<html>
<head>
	<title>WordCamp Bingo</title>
	<link href="/bingo/assets/tailwind.min.css" rel="stylesheet">
	<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

	<link rel="manifest" href="/bingo/manifest.json">

	<link rel="apple-touch-icon" sizes="180x180" href="/bingo/apple-touch-icon.png">
	<link rel="icon" type="image/png" sizes="32x32" href="/bingo/assets/icons/favicon-32x32.png">
	<link rel="icon" type="image/png" sizes="16x16" href="/bingo/assets/icons/favicon-16x16.png">
	<link rel="shortcut icon" href="/bingo/favicon.ico">

	<meta name="apple-mobile-web-app-title" content="Bingo">
	<meta name="application-name" content="Bingo">
	<meta name="theme-color" content="#64328c">

	<meta property="og:locale" content="en_US" />
	<meta property="og:type" content="website" />
	<meta property="og:title" content="Play #WPBingo, from WPSessions.com" />
	<meta property="og:description" content="Generate your own random bingo board and see if you can win. Works offline!" />
	<meta property="og:url" content="https://wpbingo.com/" />
	<meta property="og:site_name" content="WPBingo.com" />
	<meta property="og:image" content="https://wpsessions.com/wp-content/uploads/2021/12/wpbingo-og-image.jpg" />
	<meta property="og:image:width" content="1200" />
	<meta property="og:image:height" content="627" />

	<meta name="twitter:card" content="summary_large_image">
	<meta name="twitter:site" content="@WPSessions">
	<meta name="twitter:creator" content="@rzen">
	<meta name="twitter:title" content="Play #WPBingo">
	<meta name="twitter:description" content="Generate your own random bingo board and see if you can win. Works offline!">

	<style>
		.grid {
			display: grid;
			grid-template-columns: repeat( 5, 1fr );
			grid-template-rows: repeat( 5, 1fr );
			grid-gap: 3px;
			padding: 3px;
		}

		.grid > *:first-child {
			grid-row: 1 / 1;
			grid-column: 1 / 1;
		}

		@media (max-width: 767px) {
			.cell {
				height:4.5rem;
			}
		}

		@media (min-width: 768px) {
			.cell {
				aspect-ratio: 1 / 1;
			}
		}
	</style>
</head>
<body class="bg-grey-lighter font-sans text-base">
<div id="app" class="flex flex-col justify-between h-full">

	<h1 class="text-center my-4 text-purple-darker">WordCamp Bingo!</h1>

	<p v-if="showKeynoteLink" class="text-center mb-4"><a href="./sotw/" class="text-purple hover:text-orange">SOTW Edition &rarr;</a></p>

	<div v-if="gameBoard" class="grid mb-4 md:m-4">
		<div class="cell flex p-1 bg-white" v-bind:class="{ 'bg-purple-lighter': cell.found }" v-for="cell in gameBoard">
			<label class="text-xs self-center text-center w-full h-full block flex"><span class="self-center text-center w-full" v-html="cell.label"></span> <input class="hidden" type="checkbox" v-model="cell.found" @change="trackChange()"></label>
		</div>
	</div>

	<div v-if="!gameBoard" class="loading container mx-auto mb-4 p-4 text-center h-64 max-h-screen flex items-center justify-center">
		<div>
			<p>Loading...</p>
			<svg class="fill-current text-purple" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="40px" height="40px" viewBox="0 0 50 50" style="enable-background:new 0 0 50 50;" xml:space="preserve">
				<path d="M43.935,25.145c0-10.318-8.364-18.683-18.683-18.683c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615c8.072,0,14.615,6.543,14.615,14.615H43.935z" transform="rotate(320 25 25)">
					<animateTransform attributeType="xml" attributeName="transform" type="rotate" from="0 25 25" to="360 25 25" dur="0.6s" repeatCount="indefinite"></animateTransform>
				</path>
			</svg>
		</div>
	</div>

	<p class="text-center mb-4"><button class="bg-purple hover:bg-purple-light text-white font-bold py-2 px-4 border-b-4 border-purple-dark hover:border-purple rounded" @click="resetGame()">Start Over</button></p>

	<div id="footer" class="container mb-4 px-4 mx-auto text-center text-sm">
		<p class="mb-4">&copy; 2017-{{ year }} WPSessions.<br>Built for fun using Vue.js and Tailwind CSS.</p>

		<div class="p-2 bg-grey-light items-center text-sm leading-none rounded-full flex inline-flex mx-auto" role="alert">
				<a href="https://wpsessions.com/wpbingo/" class="flex rounded-full bg-indigo text-white uppercase px-2 py-1 text-xs font-bold mr-2 no-underline">Pssst!</a>
				<a href="https://wpsessions.com/wpbingo/" class="text-left flex-auto text-black no-underline">
					Save $50 on a WPSessions Membership
				</a>
				<a href="https://wpsessions.com/wpbingo/">
					<svg class="fill-current text-indigo opacity-75 h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z"/></svg>
				</a>
		</div>
	</div>

	<div class="modal-wrap flex absolute w-100 h-100 pin-t pin-b pin-l pin-r" v-show="isModalVisible">
		<div class="bg-black opacity-75 w-100 h-100 absolute pin-t pin-b pin-l pin-r"></div>
		<canvas id="confetti" class="absolute pin-t pin-r pinl-l pin-b"></canvas>
		<div class="w-5/6 max-w-sm self-center rounded shadow bg-white p-8 my-8 mx-auto relative text-center">
			<div class="delete absolute pin-t pin-r p-4" @click="hideModal()">
				<svg class="h-6 w-6 text-black" role="button" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><title>Delete</title><path d="M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z"/></svg>
			</div>
			<h1 class="mb-4">Bingo!</h1>
			<p class="mb-2">You earned this bingo on <strong>{{ formatDate( victoryTime ) }}</strong>.</p>
			<p class="mb-2">You started this game board on <strong>{{ formatDate( startTime ) }}</strong>.</p>
			<p class="mb-4">Total elapsed time was <strong>{{ formatElapsedTime( elapsedTime ) }}</strong>.</p>
			<p class="mb-4">Your winning set: <strong v-html="winningSet.join('; ')"></strong></p>
			<p class="text-center"><button class="bg-purple hover:bg-purple-light text-white font-bold py-2 px-4 border-b-4 border-purple-dark hover:border-purple rounded" @click="resetGame()">Start Over</button></p>
		</div>
	</div>
</div>

<script>

	if ('serviceWorker' in navigator) {
		navigator.serviceWorker.register( './service-worker.js' )
			.then( ( registration ) => {
				console.log( '[Bingo] Service Worker registered!', registration );
			} )
			.catch( (error) => {
				console.error( '[Bingo] Error registering Service Worker', error );
			} );
	}

</script>
<script src="/bingo/assets/vue.min.js"></script>
<script>
var app = new Vue({
	el: '#app',
	data: {
		year: new Date().getFullYear(), // The current year (for footer)
		apiUrl: 'https://wpsessions.com/wp-json/wp/v2/wpbingo?per_page=48&wpbingo-card=112', // URL for fetching bingo squares. 112 is the term id for the standard bingo card.
		startTime: 0, // When the gameboard was generated
		victoryTime: 0, // When a winning set was found
		elapsedTime: 0, // Diff between start and victory time
		hasVictory: 0, // True if a winning set was found
		winningSet: [], // Labels of winning cells
		isModalVisible: 0, // True if modal should be visible
		showKeynoteLink: 0, // True if keynote link should be visible
		keynoteStartTime: Date.parse( 'December 14, 2021 13:00' ), // When keynote link should become visible
		gameBoard: [], // Cell labels and found status
		winningSets: [
			// Rows
			[ 0, 1, 2, 3, 4 ],
			[ 5, 6, 7, 8, 9 ],
			[ 10, 11, 12, 13, 14 ],
			[ 15, 16, 17, 18, 19 ],
			[ 20, 21, 22, 23, 24 ],

			// Columns
			[ 0, 5, 10, 15, 20 ],
			[ 1, 6, 11, 16, 21 ],
			[ 2, 7, 12, 17, 22 ],
			[ 3, 8, 13, 18, 23 ],
			[ 4, 9, 14, 19, 24 ],

			// Diagonals
			[ 0, 6, 12, 18, 24 ],
			[ 4, 8, 12, 16, 20 ]
		]
	},

	created: function () {
		this.populateGameBoard();
		this.maybeShowKeynoteLink();

		window.setInterval(
			this.maybeShowKeynoteLink,
			( 1000 * 60 * 5 )
		);
	},

	methods: {

		// Populate the gameboard for play
		populateGameBoard() {
			this.getLocalStorage();

			// Generate a new gameboard when local storage is empty
			if ( ! this.gameBoard ) {
				this.generateGameBoard();
			}
		},

		// Generate a new gameboard
		generateGameBoard() {

			// Fetch cells
			var responseData = this.fetchRemoteCells();


			// Inject cells into gameboard
			responseData.then( function ( cells ) {
				console.log( cells );

				// Randomize the cells and reduce to 24 total
				cells = app.shuffleAndSliceArray( cells );

				// Add "free" cell to middle of game board
				cells.splice( 12, 0, { label: 'Free', found: 1 } );

				// populate app gameboard and start time
				app.gameBoard = cells;
				app.startTime = app.getTimeStamp();

				// store newly generated data to local storage
				app.setLocalStorage();
			});
		},

		// Fetch bingo cells via remote API call
		fetchRemoteCells() {
			console.log('fetching random cells');
			return fetch( this.apiUrl, { cache: 'no-store' } )
				.then( function( response ) {
					return response.json();
				})
				.then( function( data ) {
					return data;
				})
				.catch( function( error ) {
					console.error( error );
				});
		},

		shuffleAndSliceArray( cells ) {
			var cloned = cells.slice();
			return this.shuffleArray( cloned ).slice( 0, 24 );
		},

		shuffleArray( array ) {
			var currentIndex = array.length, temporaryValue, randomIndex;

			// While there remain elements to shuffle...
			while (0 !== currentIndex) {

				// Pick a remaining element...
				randomIndex = Math.floor(Math.random() * currentIndex);
				currentIndex -= 1;

				// And swap it with the current element.
				temporaryValue = array[currentIndex];
				array[currentIndex] = array[randomIndex];
				array[randomIndex] = temporaryValue;
			}

			return array;
		},

		// Retrieve app data from local storage
		getLocalStorage() {
			this.startTime = localStorage.getItem( 'startTime' );
			this.gameBoard = JSON.parse( localStorage.getItem( 'gameBoard' ) );
		},

		// Store app data to local storage
		setLocalStorage() {
			console.log('setting local storage');
			localStorage.setItem( 'startTime', this.startTime );
			localStorage.setItem( 'gameBoard', JSON.stringify( this.gameBoard ) );
		},

		// Update local storage and check for win on each cell change
		trackChange() {
			this.setLocalStorage();
			this.checkForWin();
		},

		// Check if there are any game-winning combinations
		checkForWin() {
			this.scoreGame();

			if ( this.hasVictory ) {
				if ( ! this.victoryTime ) {
					this.victoryTime = this.getTimeStamp();

					ga('send', {
						hitType: 'event',
						eventCategory: 'Bingo',
						eventAction: 'winner',
						eventLabel: 'Winning Game'
					});
				}
				this.elapsedTime = this.victoryTime - this.startTime;
				this.showModal();
			}
		},

		// Score all sets in the game
		scoreGame() {
			var sets = this.buildSets();

			this.hasVictory = sets.some( function( set, index, array ) {

				if ( 5 === app.scoreSet( set ) ) {
					// Capture winning set cell labels
					app.winningSet = ( array[index] ).map( function( cell ) {
						return cell.label;
					});
					return true;
				}

				return false;
			} );
		},

		// Build all sets from defined set keys
		buildSets() {
			var sets = [];

			this.winningSets.forEach( function( set, setIndex ) {
				this.push( [] );
				set.forEach( function( cell ) {
					this[ setIndex ].push( app.gameBoard[ cell ] );
				}, this );
			}, sets );

			return sets;
		},

		// Score a given set
		scoreSet( group ) {
			return group.reduce( function( sum, value ) {
				return sum + value.found;
			}, 0 );
		},

		// Get a fresh timestamp
		getTimeStamp() {
			var date = new Date();
			return date.getTime();
		},

		// Return a formatted timestamp
		formatDate( timestamp ) {
			var date = new Date( parseInt( timestamp ) );
			// Jul 20, 9:54:02 PM
			return date.toLocaleDateString( 'en-US', {
				month: 'short',
				day: 'numeric',
				hour: 'numeric',
				minute: '2-digit',
				second: '2-digit'
			} );
		},

		// Return humanized elapsed time
		formatElapsedTime( milliseconds ) {
			var seconds = milliseconds / 1000;
			var minute_in_seconds = 60;
			var hour_in_seconds = 60*60;

			if ( hour_in_seconds >= seconds ) {
				return Math.floor( seconds / minute_in_seconds % 60 ) + 'm ' + Math.floor( seconds % 60 ) + 's';
			} else {
				return Math.floor( seconds / hour_in_seconds ) + 'h ' + Math.floor( seconds / minute_in_seconds % 60 ) + 's';
			}
		},

		// Reset the game back to a fresh game board
		resetGame() {
			var prompt = window.confirm( 'Delete data and start a new game?' );

			if ( ! prompt ) {
				return;
			}

			this.startTime = this.getTimeStamp();
			this.victoryTime = 0;
			this.elapsedTime = 0;
			this.generateGameBoard();
			this.hideModal();

			ga('send', {
				hitType: 'event',
				eventCategory: 'Bingo',
				eventAction: 'reset',
				eventLabel: 'Reset Game'
			});
		},

		// Helper function for showing modal
		showModal() {
			this.isModalVisible = 1;
		},

		// Helper function for hiding modal
		hideModal() {
			this.isModalVisible = 0;
		},

		// Check if keynote link should be visible. Runs perpetually via created().
		maybeShowKeynoteLink() {
			this.showKeynoteLink = ( Date.now() >= this.keynoteStartTime );
		}
	}
});

// Confetti madness via https://codepen.io/linrock/pen/Amdhr
(function() {
	var COLORS, Confetti, NUM_CONFETTI, PI_2, canvas, confetti, context, drawCircle, i, range, resizeWindow, xpos;

	NUM_CONFETTI = 350;

	COLORS = [[85, 71, 106], [174, 61, 99], [219, 56, 83], [244, 92, 68], [248, 182, 70]];

	PI_2 = 2 * Math.PI;

	canvas = document.getElementById("confetti");

	context = canvas.getContext("2d");

	window.w = 0;

	window.h = 0;

	resizeWindow = function() {
		window.w = canvas.width = window.innerWidth;
		return window.h = canvas.height = window.innerHeight;
	};

	window.addEventListener('resize', resizeWindow, false);

	window.onload = function() {
		return setTimeout(resizeWindow, 0);
	};

	range = function(a, b) {
		return (b - a) * Math.random() + a;
	};

	drawCircle = function(x, y, r, style) {
		context.beginPath();
		context.arc(x, y, r, 0, PI_2, false);
		context.fillStyle = style;
		return context.fill();
	};

	xpos = 0.5;

	window.requestAnimationFrame = (function() {
		return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
			return window.setTimeout(callback, 1000 / 60);
		};
	})();

	Confetti = (function() {
		function Confetti() {
			this.style = COLORS[~~range(0, 5)];
			this.rgb = "rgba(" + this.style[0] + "," + this.style[1] + "," + this.style[2];
			this.r = ~~range(2, 6);
			this.r2 = 2 * this.r;
			this.replace();
		}

		Confetti.prototype.replace = function() {
			this.opacity = 0;
			this.dop = 0.03 * range(1, 4);
			this.x = range(-this.r2, w - this.r2);
			this.y = range(-20, h - this.r2);
			this.xmax = w - this.r;
			this.ymax = h - this.r;
			this.vx = range(0, 2) + 8 * xpos - 5;
			return this.vy = 0.7 * this.r + range(-1, 1);
		};

		Confetti.prototype.draw = function() {
			var ref;
			this.x += this.vx;
			this.y += this.vy;
			this.opacity += this.dop;
			if (this.opacity > 1) {
				this.opacity = 1;
				this.dop *= -1;
			}
			if (this.opacity < 0 || this.y > this.ymax) {
				this.replace();
			}
			if (!((0 < (ref = this.x) && ref < this.xmax))) {
				this.x = (this.x + this.xmax) % this.xmax;
			}
			return drawCircle(~~this.x, ~~this.y, this.r, this.rgb + "," + this.opacity + ")");
		};

		return Confetti;

	})();

	confetti = (function() {
		var j, ref, results;
		results = [];
		for (i = j = 1, ref = NUM_CONFETTI; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
			results.push(new Confetti);
		}
		return results;
	})();

	window.step = function() {
		var c, j, len, results;
		requestAnimationFrame(step);
		context.clearRect(0, 0, w, h);
		results = [];
		for (j = 0, len = confetti.length; j < len; j++) {
			c = confetti[j];
			results.push(c.draw());
		}
		return results;
	};

	step();

}).call(this);
</script>

<script>
	(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
	(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
	m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
	})(window,document,'script','//www.google-analytics.com/analytics.js','ga');
	ga('create', 'UA-41351722-1', 'wpsessions.com');
	ga('send', 'pageview');
</script>
</body>
</html>
