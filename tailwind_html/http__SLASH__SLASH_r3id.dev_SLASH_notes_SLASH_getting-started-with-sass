<!doctype html>
<html lang="en" class="light">
  <head>
    <title>Getting started with Sass ||  R3ID</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta http-equiv="last-modified" content="2022-06-28">
    <meta name="description" content="A software engineer based in Hertfordshire who specializes in developing (and occasionally designing) exceptional, high-quality websites and applications.">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.1.1/tailwind.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
    <link rel="stylesheet" href="/assets/css/main.css" media="screen">
    <link rel="stylesheet" href="/assets/css/main.css" media="print">
    <link rel="icon" type="image/png" href="https://r3id.dev/favicon.ico">
  </head>
  <body class="home-page text-gray-500">

    <nav class="max-w-5xl m-auto p-5 flex justify-between border-solid border-b border-gray-100 bg-white dark:border-black dark:bg-blackish sticky top-0 opacity-90 z-10">
  <div class="flex items-center">
    <a href="/" class="transition-colors">
      <i class="far fa-arrow-left text-sm text-glow hover:text-gray-700"></i>
    </a>
  </div>
</nav>




<div class="default-container">
  <div class="pt-20 pb-1 inline-flex overflow-x-auto space-x-2">
		<a href="/">
			<p class="cursor-pointer text-sm text-gray-400 dark:text-gray-600 hover:font-medium hover:text-gray-700 dark:hover:text-gray-300 min-w-max">Home /</p>
		</a>
    <a href="/notes">
			<p class="cursor-pointer text-sm text-gray-400 dark:text-gray-600 hover:font-medium hover:text-gray-700 dark:hover:text-gray-300 min-w-max">Notes to self /</p>
		</a>
		<a href="/notes/getting-started-with-sass">
			<p class="cursor-pointer text-sm text-glow dark:text-glow hover:font-medium hover:text-gray-700 dark:hover:text-gray-300 min-w-max">Getting started with Sass</p>
		</a>
	</div>
	<div class="mb-6">
		<h1 class="pb-2 font-bold text-3xl text-gray-600">Getting started with Sass</h1>
    
      <p class="text-sm italic mb-4">It's a 11 minute read</p>
    
	</div>
  <div class="text-content">
    <p>First off, there is nothing in Sass that you can’t do in CSS. Sass is a powerful tool which enables developers to create much cleaner and more maintainable styling for their sites.</p>

<p>CSS preprocessors have seen quite an increase in popularity over the last couple of years, and there is no surprise there. Let’s face it, CSS has never been the most forgiving language, and itself can cause many more problems than good more often than not.</p>

<p>Our preprocessor of choice and the reason for this article is Sass. A preprocessor compiles your Sass markup to CSS which is much easier for a browser to understand.</p>

<div class="image-center">
  <svg width="180px" height="135px" viewBox="0 0 180 135" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
      <g transform="translate(0.000000, 0.000000)" fill="#CD6799" fill-rule="nonzero">
        <path d="M154.885246,77.657767 C148.622951,77.690534 143.180328,79.1978155 138.622951,81.4259709 C136.95082,78.1165049 135.278689,75.1674757 134.983607,73.0048544 C134.655738,70.4817961 134.262295,68.9417476 134.655738,65.9271845 C135.04918,62.9126214 136.819672,58.6201456 136.786885,58.2924757 C136.754098,57.9648058 136.393443,56.4247573 132.786885,56.3919903 C129.180328,56.3592233 126.065574,57.0800971 125.704918,58.0303398 C125.344262,58.9805825 124.655738,61.1432039 124.196721,63.3713592 C123.57377,66.6480583 116.983607,78.3458738 113.213115,84.473301 C112,82.0813107 110.95082,79.9842233 110.721311,78.3131068 C110.393443,75.7900485 110,74.25 110.393443,71.2354369 C110.786885,68.2208738 112.557377,63.9283981 112.52459,63.6007282 C112.491803,63.2730583 112.131148,61.7330097 108.52459,61.7002427 C104.918033,61.6674757 101.803279,62.3883495 101.442623,63.3385922 C101.081967,64.288835 100.688525,66.5169903 99.9344262,68.6796117 C99.1803279,70.842233 90.4262295,90.3713592 88.1311475,95.4174757 C86.9508197,98.006068 85.9344262,100.070388 85.2131148,101.479369 C85.2131148,101.479369 85.2131148,101.479369 85.2131148,101.479369 C85.2131148,101.479369 85.1803279,101.57767 85.0819672,101.741505 C84.4590164,102.953883 84.0983607,103.609223 84.0983607,103.609223 C84.0983607,103.609223 84.0983607,103.609223 84.0983607,103.64199 C83.6065574,104.526699 83.0819672,105.345874 82.8196721,105.345874 C82.6229508,105.345874 82.2622951,102.98665 82.8852459,99.7754854 C84.1967213,92.9927184 87.3114754,82.4417476 87.2786885,82.0813107 C87.2786885,81.8847087 87.8688525,80.0497573 85.2459016,79.0995146 C82.6885246,78.1492718 81.7704918,79.7220874 81.5409836,79.7220874 C81.3114754,79.7220874 81.147541,80.2791262 81.147541,80.2791262 C81.147541,80.2791262 84,68.4174757 75.704918,68.4174757 C70.5245902,68.4174757 63.3770492,74.086165 59.8360656,79.1978155 C57.6065574,80.4101942 52.852459,82.9987864 47.7704918,85.7839806 C45.8360656,86.8652913 43.8360656,87.9466019 41.9672131,88.9623786 C41.8360656,88.8313107 41.704918,88.6674757 41.5737705,88.5364078 C31.5409836,77.8216019 12.9836066,70.2524272 13.7704918,55.8677184 C14.0655738,50.625 15.8688525,36.8628641 49.4098361,20.151699 C77.0163934,6.55339806 98.9836066,10.3216019 102.786885,18.6771845 C108.229508,30.6043689 91.0163934,52.7548544 62.4918033,55.9660194 C51.6065574,57.1783981 45.9016393,52.9842233 44.4590164,51.4114078 C42.9508197,49.7730583 42.7213115,49.6747573 42.1639344,50.0024272 C41.2459016,50.493932 41.8360656,51.9684466 42.1639344,52.8203883 C43.0163934,55.0485437 46.5245902,58.9805825 52.4590164,60.913835 C57.704918,62.6177184 70.4590164,63.5679612 85.9016393,57.6043689 C103.180328,50.9199029 116.688525,32.3410194 112.721311,16.776699 C108.754098,0.983009709 82.5245902,-4.22694175 57.704918,4.58737864 C42.9508197,9.83009709 26.9508197,18.0873786 15.442623,28.8349515 C1.7704918,41.6140777 -0.393442623,52.7220874 0.491803279,57.375 C3.67213115,73.8895631 26.4590164,84.6371359 35.5737705,92.5995146 C35.1147541,92.8616505 34.6885246,93.0910194 34.3278689,93.2876214 C29.7704918,95.5485437 12.3934426,104.625 8.06557377,114.225728 C3.14754098,125.104369 8.85245902,132.902913 12.6229508,133.951456 C24.3278689,137.195388 36.3606557,131.362864 42.8196721,121.729369 C49.2786885,112.095874 48.4918033,99.5788835 45.5081967,93.8446602 C45.4754098,93.7791262 45.442623,93.7135922 45.3770492,93.6480583 C46.557377,92.9599515 47.7704918,92.2390777 48.9508197,91.5509709 C51.2786885,90.1747573 53.5737705,88.8968447 55.5409836,87.848301 C54.4262295,90.8956311 53.6065574,94.532767 53.2131148,99.7754854 C52.7213115,105.93568 55.2459016,113.930825 58.557377,117.076456 C60.0327869,118.45267 61.7704918,118.485437 62.8852459,118.485437 C66.7540984,118.485437 68.4918033,115.274272 70.4262295,111.473301 C72.7868852,106.820388 74.9180328,101.413835 74.9180328,101.413835 C74.9180328,101.413835 72.2622951,116.027913 79.4754098,116.027913 C82.0983607,116.027913 84.7540984,112.620146 85.9344262,110.883495 C85.9344262,110.916262 85.9344262,110.916262 85.9344262,110.916262 C85.9344262,110.916262 86,110.817961 86.1311475,110.588592 C86.3934426,110.162621 86.557377,109.900485 86.557377,109.900485 C86.557377,109.900485 86.557377,109.867718 86.557377,109.834951 C87.6065574,108 89.9672131,103.838592 93.4754098,96.9247573 C98,88.0121359 102.360656,76.8713592 102.360656,76.8713592 C102.360656,76.8713592 102.754098,79.5910194 104.098361,84.1128641 C104.885246,86.7669903 106.52459,89.6832524 107.836066,92.5012136 C106.786885,93.9757282 106.131148,94.7949029 106.131148,94.7949029 C106.131148,94.7949029 106.131148,94.7949029 106.163934,94.8276699 C105.311475,95.9417476 104.393443,97.1541262 103.377049,98.3337379 C99.8032787,102.593447 95.5409836,107.475728 94.9508197,108.884709 C94.2622951,110.555825 94.4262295,111.768204 95.7377049,112.751214 C96.6885246,113.472087 98.3934426,113.570388 100.131148,113.472087 C103.344262,113.242718 105.606557,112.456311 106.721311,111.964806 C108.459016,111.342233 110.491803,110.39199 112.393443,108.98301 C115.901639,106.394417 118.032787,102.691748 117.836066,97.809466 C117.737705,95.1225728 116.852459,92.4356796 115.770492,89.9126214 C116.098361,89.4538835 116.393443,88.9951456 116.721311,88.5364078 C122.262295,80.4429612 126.557377,71.5631068 126.557377,71.5631068 C126.557377,71.5631068 126.95082,74.282767 128.295082,78.8046117 C128.95082,81.098301 130.295082,83.5885922 131.47541,86.0133495 C126.262295,90.2402913 123.04918,95.1553398 121.901639,98.3665049 C119.836066,104.330097 121.442623,107.01699 124.491803,107.639563 C125.868852,107.934466 127.836066,107.279126 129.278689,106.656553 C131.114754,106.066748 133.278689,105.050971 135.344262,103.543689 C138.852459,100.955097 142.229508,97.3507282 142.032787,92.4684466 C141.934426,90.2402913 141.344262,88.0449029 140.52459,85.9150485 C144.95082,84.0800971 150.655738,83.0643204 157.934426,83.9162621 C173.540984,85.7512136 176.622951,95.4830097 176.032787,99.5788835 C175.442623,103.674757 172.163934,105.902913 171.081967,106.591019 C170,107.279126 169.639344,107.508495 169.737705,108 C169.868852,108.720874 170.393443,108.688107 171.311475,108.557039 C172.590164,108.32767 179.508197,105.247573 179.803279,97.711165 C180.295082,88.0776699 171.114754,77.559466 154.885246,77.657767 Z M34.4918033,118.223301 C29.3114754,123.859223 22.0983607,125.989078 18.9836066,124.186893 C15.6393443,122.253641 16.9508197,113.930825 23.3114754,107.967233 C27.1803279,104.330097 32.1639344,100.955097 35.4754098,98.8907767 C36.2295082,98.4320388 37.3442623,97.776699 38.6885246,96.9575243 C38.9180328,96.8264563 39.0491803,96.7609223 39.0491803,96.7609223 L39.0491803,96.7609223 C39.3114754,96.5970874 39.5737705,96.4332524 39.8360656,96.2694175 C42.1639344,104.788835 39.9344262,112.292476 34.4918033,118.223301 Z M72.1967213,92.5995146 C70.3934426,96.9902913 66.6229508,108.229369 64.3278689,107.606796 C62.3606557,107.082524 61.147541,98.5631068 63.9344262,90.1419903 C65.3442623,85.9150485 68.3278689,80.868932 70.0655738,78.9029126 C72.8852459,75.7572816 76,74.7087379 76.7540984,75.9866505 C77.704918,77.657767 73.3114754,89.8470874 72.1967213,92.5995146 Z M103.311475,107.475728 C102.557377,107.868932 101.836066,108.131068 101.508197,107.934466 C101.278689,107.803398 101.836066,107.279126 101.836066,107.279126 C101.836066,107.279126 105.737705,103.084951 107.278689,101.184466 C108.163934,100.070388 109.213115,98.7597087 110.327869,97.2851942 C110.327869,97.4162621 110.327869,97.5800971 110.327869,97.711165 C110.327869,102.724515 105.47541,106.099515 103.311475,107.475728 Z M127.311475,102.003641 C126.754098,101.610437 126.852459,100.299757 128.721311,96.2038835 C129.442623,94.598301 131.147541,91.9114078 134.065574,89.3228155 C134.393443,90.3713592 134.622951,91.3871359 134.590164,92.3373786 C134.557377,98.6614078 130.032787,101.020631 127.311475,102.003641 Z" id="Shape"></path>
      </g>
    </g>
  </svg>
</div>

<p>Note: Sass is just one of the many preprocessors out there, some others are LESS , Stylus and Myth each has their pros and cons, and requirements to use.</p>

<p>Enough talk lets get on with learning some Sass!</p>

<h2 id="comments">Comments</h2>
<p>What better place to start than comments. Not all CSS or Sass is as understandable at first glance, so some sections of code can benefit from adding comments.</p>

<p>In CSS we use <code class="language-plaintext highlighter-rouge">/**/</code> to comment our styles, this can is also in Sass.
In Sass, there is also another option which we can use <code class="language-plaintext highlighter-rouge">//</code>. <code class="language-plaintext highlighter-rouge">//</code> is particularly useful because it will only show up in your Sass files and does not get compiled. If you want public comments, it’s best to use <code class="language-plaintext highlighter-rouge">/**/</code>.</p>

<p><em>Remember comments should only be simple notes or tips, there is no need to write an essay!</em></p>

<h2 id="sass-vs-scss">Sass VS SCSS</h2>
<p>The “Sass vs. SCSS” argument comes down to personal preference. Many, including myself, prefer the SCSS way of writing their styles. Others swear by the cleanses of the Sass method. That’s not to say either way is wrong, as they both produce the same compiled CSS in the end.</p>

<p><em>”So what are the differences?”</em> Well, let’s take a quick look.</p>

<p>SCSS is more like standard CSS and uses the same syntax. Curly braces and semicolons are necessary, and SCSS will fail to compile if there is a syntax error.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/* SCSS example */
.class,
#id {
  color: red;
}
</code></pre></div></div>

<p>Sass, on the other hand, respects white space and indentations and it doesn’t use <code class="language-plaintext highlighter-rouge">{}</code> or <code class="language-plaintext highlighter-rouge">;</code>. One of the issues with Sass is that it is not CSS compatible unlike SCSS, which allows you to write CSS and all would still compile fine.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/* Sass example */
.class,
#id
  color: red
</code></pre></div></div>

<p>Either way is okay to use; it’s just down to personal preference. Just remember to use the right extension with your chosen method (.sass or .scss).</p>

<h2 id="nesting">Nesting</h2>
<p>For those who are not familiar with the concept of nesting, it is a way to structure your code by indenting which donates the relationship between selectors and properties.</p>

<h2 id="selectors">Selectors</h2>
<p>In SCSS, we nest elements and classes like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.nav {
  a {
    text-decoration: none;
  }
}
</code></pre></div></div>

<p>and this code snippet would compile to:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.nav a {
  text-decoration: none;
}
</code></pre></div></div>

<p>Though you could nest infinitely, but it’s good practice not to nest more than three or four levels deep as you styles would become less maintainable, and get confusing.</p>

<h2>&amp;</h2>
<p><code class="language-plaintext highlighter-rouge">&amp;</code> can be used as shorthand for parent selectors. The following code provides some examples to show how this can be useful:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a {
  text-decoration: none;

  &amp;:hover {
    color: red;
  }
}
</code></pre></div></div>

<p>this code snippet would compile to:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a {
  text-decoration: none;
}
a:hover {
  color: red;
}
</code></pre></div></div>

<p>As you can see from the following example this stands with all parent selectors which get nested within:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>li {
  text-decoration: none;

  &amp;.menu-item {
    color: rgb(98,150,90);
    font-weight: 400;

    .nav &amp; {
      display: inline-block;
    }
  }
}
</code></pre></div></div>

<p>would compile to:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>li {
  text-decoration: none;
}
li.menu-item {
  color: #62965a;
  font-weight: 400;
}
.nav li.menu-item {
  display: inline-block;
}
</code></pre></div></div>

<p><em><strong>Note:</strong></em> How Sass will convert your RGB colour to its HEX version</p>

<p>The <code class="language-plaintext highlighter-rouge">&amp;</code> takes the parent literally, due to this you can also do something like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.nav {
  &amp;--link {
    display: inline-block;
  }
  &amp;--title {
    font-size: 18px;
  }
}
</code></pre></div></div>

<p>which when compiled to CSS will look like:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.nav--link {
  display: inline-block;
}
.nav--title {
  font-size: 18px;
}
</code></pre></div></div>

<p>Pretty impressive, right? Sass really can make life a lot easier when used correctly.</p>

<h2 id="properties">Properties</h2>
<p>As with selectors, we can also nest properties which have related namespaces such as background, font and border. Nested properties are similar to nested selectors. However, you need to include <code class="language-plaintext highlighter-rouge">:</code>. Let’s look at an example:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.class-name {
  background: {
    color: rgb(0,0,0);
    position: center;
    size: contain;
  }
  font: {
    size: 1.5rem;
    weight: 300;
    family: ‘open sans’, arial, sans-serif;
  }
}
</code></pre></div></div>

<p>would compile to:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.class-name {
  background-color: #000000;
  background-position: center;
  background-size: contain;
  font-size: 1rem;
  font-weight: 300;
  font-family: ‘open sans’, arial, sans-serif;
}
</code></pre></div></div>

<h2 id="media-queries">Media Queries</h2>
<p>When using media queries in CSS, they must have styles nested within them. In Sass we can go both ways, in fact, we can even nest media queries within media queries. However this will cause confusion for other developers, and I would avoid doing that! Let’s have a look at how we work with media queries in Sass.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.selector {
  color: rgb(98,150,90);

  @media screen and (min-width: 300px) {
    color: rgb(255,0,0);

    @media screen and (max-width: 700px) {
      color: rgb(255,212,84);
    }
  }
}
</code></pre></div></div>

<p>and this would compile to:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.selector {
  color: #62965a;
}
@media screen and (min-width: 300px) {
  .selector {
    color: #ff0000;
  }
}
@media screen and (min-width: 300px) and (max-width: 700px) {
  .selector {
    color: #ffd454;
  }
}
</code></pre></div></div>

<p>There are some excellent mixins out there which make working with media queries much easier I will discuss which mixins I use in another article.</p>

<h2 id="variables">Variables</h2>
<p>One of the best bits about Sass is the ability to create variables. These variables allow you to keep your styles <a href="https://en.wikipedia.org/wiki/Don't_repeat_yourself" target="_blank">DRY</a>. You will find that setting colors, borders, even the font-family in a variables file will make life so much easier when using Sass. With this, it also means everything becomes a little more consistent throughout a site or app.</p>

<p>Variable are not a new concept, and many other programming and logic-based languages use variables. A variable is in its simplest form is something you can assign a value. You only need to assign it once, but it can be changed or overwritten later on — so be careful.</p>

<p>A perfect example of this when dealing with company branding. When you create your company’s site, you set the main brand colour. You then need to modify this colour to match a brand update. Instead of hunting through lines and lines of code to change every instance, you change it in one place!</p>

<p>The format for creating Sass variables is like so:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ + your logical name + : + value
</code></pre></div></div>

<p>Lets have a look and see this in action:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// VARIABLES
// colors
$brand-color: rgb(98,150,90);
$link-color: rgb(66,134,244);
$white-color: rgb(255,255,255);
.main-container {
  background-color: $white-color;
}
</code></pre></div></div>

<p>when we compile our Sass we will get the following CSS:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.main-container {
  background-color: #ffffff;
}
</code></pre></div></div>

<p>I also make sure I have a <code class="language-plaintext highlighter-rouge">_variables.scss</code> file, mainly for ease of editing, even if I have only a few variables. Remember to import this file at the top of your main SCSS file.</p>

<p><em><strong>Note:</strong> z-index values should get stored in the variable file. By storing them in this file is not only best practice but allows you to create layers.</em></p>

<h2 id="extend">@extend</h2>
<p><code class="language-plaintext highlighter-rouge">@extend</code> can be used with a selector to pass the already defines styles to another selector.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a {
  color: rgb(255,212,84);
  display: list-item;
  text-decoration: none;
}
button {
  @extend a;
}
</code></pre></div></div>

<p>would compile to:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a, button {
  color: #ffd454;
  display: list-item;
  text-decoration: none;
}
</code></pre></div></div>

<p><em><strong>Note:</strong> <code class="language-plaintext highlighter-rouge">@extend</code> will copy all instances of what is being extended, and not just exact matches.</em></p>

<p>This is best show through the following example:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$yellow-color: rgb(255,212,84);
$blue-color: rgb(66,134,244);
a {
  color: $yellow-color;
  display: list-item;
  text-decoration: none;

  &amp;:hover {
   color: $blue-color;
  }

  &amp;.link {
    border: 1px solid $yellow-color;
  }
}
div a {
  position: relative;
}
button {
  @extend a;
}
</code></pre></div></div>

<p>which will compile to:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a, button {
  color: #ffd454;
  display: list-item;
  text-decoration: none;
}
a:hover, button:hover {
  color: #4286f4;
}
a.link, button.link {
  border: 1px solid #ffd454;
}
div a, div button {
  position: relative;
}
</code></pre></div></div>

<p>Did you notice our use of variables too?</p>

<h2 id="mixins">Mixins</h2>
<p>Mixins let you create reusable snippets of code, which can be used in your code later. A good example of this is when we add a <code class="language-plaintext highlighter-rouge">border-radius</code> to an element. Typically we need also to include all the vendor prefixes too, which can be a pain. Well with our example mixin below you can see how we simply these to our CSS class, and mixins allow us to pass over the property too.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@mixin border-radius($radius) {
  background-clip: padding-box; // prevents bg color from leaking outside the border
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
       -o-border-radius: $radius;
          border-radius: $radius;
}
.class {
  @include border-radius(4px);
  background: rgb(66,134,244);
  color: rgb(255,255,255);
}
would compile to:
.class {
  background-clip: padding-box;
  -webkit-border-radius: 4px;
     -moz-border-radius: 4px;
      -ms-border-radius: 4px;
       -o-border-radius: 4px;
          border-radius: 4px;
  background: #4286f4;
  color: #ffffff;
}
</code></pre></div></div>

<p>Mixins are great; I will be creating an article in the future to discuss some of the ones I use personally in projects.</p>

<h2 id="functions">Functions</h2>
<p>Creating functions in Sass is very similar to creating mixins. Sass has a large selection of functions by built-in, you can see a full list here. Functions perform a variety to tasks such as lighten and darken which would lighten or darken a colour, or make it greyscale.</p>

<hr />

<p>I will be covering creating custom functions in a later article, as I think we have covered most of the basics today.
As always there is more info on Sass in the <a href="http://sass-lang.com/documentation/file.SASS_REFERENCE.html" target="_blank">Docs</a>, and are well worth looking over.</p>

  </div>
</div>


    <div class="py-20 grid justify-center">
  <div class="w-full flex align-middle space-x-4">
    <a href="https://www.linkedin.com/in/alanr3id/" title="LinkedIn">
      <i class="fab fa-linkedin-in text-xl text-blue-600"></i>
    </a>
    <a href="https://twitter.com/alan_r3id" target="_blank" title="Twitter">
      <i class="fab fa-twitter text-xl text-blue-300"></i>
    </a>
    <a href="https://dribbble.com/r3id" target="_blank" title="Dribbble">
      <i class="fab fa-dribbble text-xl text-pink-600"></i>
    </a>
    <a href="https://github.com/r3id" target="_blank" title="GitHub">
      <i class="fab fa-github text-xl text-black"></i>
    </a>
    <a href="https://medium.com/@r3id" target="_blank" title="Medium">
      <i class="fab fa-medium text-xl text-black"></i>
    </a>
  </div>
  <p class="pt-5 pb-5 text-xs font-medium text-center text-gray-400 dark:text-gray-200">
    <a href="/privacy">Privacy</a>
  </p>
  <p class="pt-5 pb-5 text-xs font-medium text-center text-gray-300 dark:text-gray-200">
    © 2021 Alan Reid
  </p>
</div>


    <!-- Global site tag (gtag.js) - Google Analytics -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-68933763-1"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());

      gtag('config', 'UA-68933763-1');
    </script>
  </body>
</html>
