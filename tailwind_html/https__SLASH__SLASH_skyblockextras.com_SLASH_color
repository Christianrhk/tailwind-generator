
<html>

<head>
    <title>Change Colors</title>
    <link rel="icon" type="image/gif" href="favicon.ico" />
    <link href="https://unpkg.com/tailwindcss@^2.0/dist/tailwind.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
</head>

<body class="bg-gray-900">
    <div class="min-h-screen flex items-center justify-center bg-gray-900 py-12 px-4 sm:px-6 lg:px-8">
        <div class="max-w-md w-full">

            <div id="errorModel"
                class="animate__animated animate__fadeIn bg-gray-800 rounded-lg shadow-lg p-4 mb-3 hidden">
                <h1 class="text-red-500 font-bold">Something went wrong</h1>
                <h2 id="errorMessage" class="text-gray-500 font-bold text-sm"></h2>
            </div>

            <div class="animate__animated animate__fadeIn animate__slow">
                <img class="mx-auto h-20 w-auto" src="https://i.imgur.com/OmbUyyx.png" alt="Logo">
                <h2 id="headline" class="mt-6 text-center text-3xl leading-9 font-extrabold text-white">
                    Change Active IGN Color
                </h2>
                <p id="tipText" class="mt-2 text-center text-sm leading-5 text-gray-400">
                    To Begin, please login with Discord
                </p>
                <h2 id="successMsg" class="text-center text-3xl leading-9 font-extrabold text-white hidden">
                    Success! Your Active Color has been changed.
                </h2>
            </div>
            
            <form class="mt-8 animate__animated animate__fadeIn animate__slow hidden" id="discordForm">
                <div class="rounded-md shadow-sm">
                	<label id="discordbox-label" class="block text-sm font-medium text-gray-400">
					    Discord Account | IGN:
					  </label>
                    <div>
                        <input id="discordUsername" name="discord" type="text" readonly
                            class="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:shadow-outline-blue focus:border-blue-300 focus:z-10 sm:text-sm sm:leading-5"
                            placeholder="Your Discord Username">
                    </div>
                    
                    <div class="-mt-px">
                        <input id="username" name="username" type="text" readonly
                            class="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:shadow-outline-blue focus:border-blue-300 focus:z-10 sm:text-sm sm:leading-5"
                            placeholder="Your Minecraft Username">
                    </div>
               	</div>
                <div class="rounded-md shadow-sm">
                	<span id="sbe-label" class="mt-5 block text-sm font-medium text-white">
					    Enter your SBE Key. (You can use /getkey in the Discord)
					  </span>
                    <div>
                        <input id="sbekey" name="apikey" type="password" required
                            class="appearance-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-md focus:outline-none focus:shadow-outline-blue focus:border-blue-300 focus:z-10 sm:text-sm sm:leading-5"
                            placeholder="Your SBE Key">
                    </div>
                    <button id="toggleKey" class="mt-1 text-xs font-medium text-gray-400">
                    	Show/Hide Key
                    </button>
                </div>
                
                <div id="colorOptions" class="hidden">
					  <label id="listbox-label" class="mt-3 block text-sm font-medium text-white">
					    Select a Color to Activate
					  </label>
					  <div class="mt-1 relative">
					    <button id="listButton" type="button" aria-haspopup="listbox" aria-expanded="true" aria-labelledby="listbox-label" style="background-color:#FFFFFF" class="text-black relative w-full border border-gray-300 rounded-md shadow-sm pl-3 pr-10 py-2 text-left cursor-default focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm font-semibold">
					      <span class="flex items-center">
					        <span class="ml-3 block font-semibold truncate" id="selectedColor">White</span>
					      </span>
					      <span class="ml-3 absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
					        <!-- Heroicon name: selector -->
					        <svg class="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
					          <path fill-rule="evenodd" d="M10 3a1 1 0 01.707.293l3 3a1 1 0 01-1.414 1.414L10 5.414 7.707 7.707a1 1 0 01-1.414-1.414l3-3A1 1 0 0110 3zm-3.707 9.293a1 1 0 011.414 0L10 14.586l2.293-2.293a1 1 0 011.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd" />
					        </svg>
					      </span>
					    </button>
					
					    <!--
					      Select popover, show/hide based on select state.
					
					      Entering: ""
					        From: ""
					        To: ""
					      Leaving: "transition ease-in duration-100"
					        From: "opacity-100"
					        To: "opacity-0"
					    -->
					    <div class="mt-1 w-full rounded-md bg-white shadow-lg">
					      <ul tabindex="-1" role="listbox" aria-labelledby="listbox-label" aria-activedescendant="listbox-item-0" class="max-h-56 rounded-md py-1 text-base ring-1 ring-black ring-opacity-5 overflow-auto focus:outline-none sm:text-sm">
					        <!--
					          Select option, manage highlight styles based on mouseenter/mouseleave and keyboard navigation.
					
					          Highlighted: "text-white bg-indigo-600", Not Highlighted: "text-gray-900"
					        -->
					        <li id="listbox-item-0" role="option" style="background-color:#000000" class="text-white cursor-default select-none relative py-2 pl-3 pr-9 hidden"><div class="flex items-center"><span class="ml-3 block font-semibold truncate">Black</span></div></li>
					           
					        <li id="listbox-item-1" role="option" style="background-color:#0000AA" class="text-white cursor-default select-none relative py-2 pl-3 pr-9 hidden"><div class="flex items-center"><span class="ml-3 block font-semibold truncate">Dark Blue</span></div></li>
                            
                            <li id="listbox-item-2" role="option" style="background-color:#00AA00" class="text-white cursor-default select-none relative py-2 pl-3 pr-9 hidden"><div class="flex items-center"><span class="ml-3 block font-semibold truncate">Dark Green</span></div></li>
                            
                            <li id="listbox-item-3" role="option" style="background-color:#00AAAA" class="text-white cursor-default select-none relative py-2 pl-3 pr-9 hidden"><div class="flex items-center"><span class="ml-3 block font-semibold truncate">Dark Aqua</span></div></li>
                            <li id="listbox-item-5" role="option" style="background-color:#AA00AA" class="text-white cursor-default select-none relative py-2 pl-3 pr-9 hidden"><div class="flex items-center"><span class="ml-3 block font-semibold truncate">Dark Purple</span></div></li> 
                            
                            <li id="listbox-item-6" role="option" style="background-color:#FFAA00" class="text-white cursor-default select-none relative py-2 pl-3 pr-9 hidden"><div class="flex items-center"><span class="ml-3 block font-semibold truncate">Gold</span></div></li>
                            <li id="listbox-item-7" role="option" style="background-color:#AAAAAA" class="text-white cursor-default select-none relative py-2 pl-3 pr-9 hidden"><div class="flex items-center"><span class="ml-3 block font-semibold truncate">Gray</span></div></li>
                            
                            <li id="listbox-item-8" role="option" style="background-color:#555555" class="text-white cursor-default select-none relative py-2 pl-3 pr-9 hidden"><div class="flex items-center"><span class="ml-3 block font-semibold truncate">Dark Gray</span></div></li>
                            
                            <li id="listbox-item-9" role="option" style="background-color:#5555FF" class="text-black cursor-default select-none relative py-2 pl-3 pr-9 hidden"><div class="flex items-center"><span class="ml-3 block font-semibold truncate">Blue</span></div></li>
                            
                            <li id="listbox-item-a" role="option" style="background-color:#55FF55" class="text-black cursor-default select-none relative py-2 pl-3 pr-9 hidden"><div class="flex items-center"><span class="ml-3 block font-semibold truncate">Green</span></div></li>
                            
                            <li id="listbox-item-b" role="option" style="background-color:#55FFFF" class="text-black cursor-default select-none relative py-2 pl-3 pr-9 hidden"><div class="flex items-center"><span class="ml-3 block font-semibold truncate">Aqua</span></div></li>
                            
                            <li id="listbox-item-d" role="option" style="background-color:#FF55FF" class="text-black cursor-default select-none relative py-2 pl-3 pr-9 hidden"><div class="flex items-center"><span class="ml-3 block font-semibold truncate">Pink</span></div></li>
                            
                            
                            <li id="listbox-item-e" role="option" style="background-color:#FFFF55" class="text-black cursor-default select-none relative py-2 pl-3 pr-9 hidden"><div class="flex items-center"><span class="ml-3 block font-semibold truncate">Yellow</span></div></li>
                            
                            <li id="listbox-item-f" role="option" style="background-color:#FFFFFF" class="text-black cursor-default select-none relative py-2 pl-3 pr-9 hidden"><div class="flex items-center"><span class="ml-3 block font-semibold truncate">White</span></div></li>
                            
					        <!-- More options... -->
					      </ul>
					      
					    </div>
					    </div>
					    </div>
                           <button id="getColorInfoButton"
                               class="mt-3 group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm leading-5 font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-500 focus:outline-none focus:border-indigo-700 focus:shadow-outline-indigo active:bg-indigo-700 transition duration-150 ease-in-out">
                               
                               <svg id="spinner" class="animate-spin -ml-1 mr-3 h-5 w-5 text-white hidden"
                                   xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                   <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4">
                                   </circle>
                                   <path class="opacity-75" fill="currentColor"
                                       d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z">
                                   </path>
                               </svg>
                               <span id="checkoutText">Update Info</span>
                           </button>
							<button id="updateColor"
                               class="hidden mt-3 group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm leading-5 font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-500 focus:outline-none focus:border-indigo-700 focus:shadow-outline-indigo active:bg-indigo-700 transition duration-150 ease-in-out">
                               
                               <svg id="spinner" class="animate-spin -ml-1 mr-3 h-5 w-5 text-white hidden"
                                   xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                   <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4">
                                   </circle>
                                   <path class="opacity-75" fill="currentColor"
                                       d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z">
                                   </path>
                               </svg>
                               <span id="changeText">Change Settings</span>
                           </button>
               
                
              
            </form>

            <span id="signOutParent" class="hidden"><span class="text-white font-bold text-sm">Not you? </span> <button
                    id="signOut" class="text-gray-500 font-bold text-sm">Sign out.</button></span>
            <div id="colorRedirect" class="hidden mt-8">
	            <button
	                    id="colorRedirectButton" class="text-gray-500 font-bold text-sm">Click Here for In-Game Examples.
	            </button></div>
            <div class="mt-6 animate__animated animate__fadeIn animate__slow">
                <button id="discordAuth" style="background-color: #7289DA;"
                    class="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm leading-5 font-medium rounded-md text-white focus:outline-none focus:border-indigo-700 focus:shadow-outline-indigo transition duration-150 ease-in-out">
                    <span class="absolute left-0 inset-y-0 flex items-center pl-3">
                        <svg class="h-8 w-8 text-indigo-500 group-hover:text-indigo-400 transition ease-in-out duration-150"
                            id="Layer_1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 245 240">
                            <style>
                                .st0 {
                                    fill: #FFFFFF;
                                }
                            </style>
                            <path class="st0"
                                d="M104.4 103.9c-5.7 0-10.2 5-10.2 11.1s4.6 11.1 10.2 11.1c5.7 0 10.2-5 10.2-11.1.1-6.1-4.5-11.1-10.2-11.1zM140.9 103.9c-5.7 0-10.2 5-10.2 11.1s4.6 11.1 10.2 11.1c5.7 0 10.2-5 10.2-11.1s-4.5-11.1-10.2-11.1z" />
                            <path class="st0"
                                d="M189.5 20h-134C44.2 20 35 29.2 35 40.6v135.2c0 11.4 9.2 20.6 20.5 20.6h113.4l-5.3-18.5 12.8 11.9 12.1 11.2 21.5 19V40.6c0-11.4-9.2-20.6-20.5-20.6zm-38.6 130.6s-3.6-4.3-6.6-8.1c13.1-3.7 18.1-11.9 18.1-11.9-4.1 2.7-8 4.6-11.5 5.9-5 2.1-9.8 3.5-14.5 4.3-9.6 1.8-18.4 1.3-25.9-.1-5.7-1.1-10.6-2.7-14.7-4.3-2.3-.9-4.8-2-7.3-3.4-.3-.2-.6-.3-.9-.5-.2-.1-.3-.2-.4-.3-1.8-1-2.8-1.7-2.8-1.7s4.8 8 17.5 11.8c-3 3.8-6.7 8.3-6.7 8.3-22.1-.7-30.5-15.2-30.5-15.2 0-32.2 14.4-58.3 14.4-58.3 14.4-10.8 28.1-10.5 28.1-10.5l1 1.2c-18 5.2-26.3 13.1-26.3 13.1s2.2-1.2 5.9-2.9c10.7-4.7 19.2-6 22.7-6.3.6-.1 1.1-.2 1.7-.2 6.1-.8 13-1 20.2-.2 9.5 1.1 19.7 3.9 30.1 9.6 0 0-7.9-7.5-24.9-12.7l1.4-1.6s13.7-.3 28.1 10.5c0 0 14.4 26.1 14.4 58.3 0 0-8.5 14.5-30.6 15.2z" />
                        </svg>
                    </span>
                    <svg id="spinner2" class="animate-spin -ml-1 mr-3 h-5 w-5 text-white hidden"
                        xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4">
                        </circle>
                        <path class="opacity-75" fill="currentColor"
                            d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z">
                        </path>
                    </svg>
                    <span id="discordText">Login With Discord</span>
                </button>
            </div>
            
        </div>
    </div>
</body>

<script>

    const CLIENT_ID = '698633235713753268';
    const SCOPE = 'identify%20guilds';
    const CODE_TYPE = 'token';
    
    const getColorInfoButton = document.getElementById('getColorInfoButton');
    const updateColor = document.getElementById('updateColor');
    const discordForm = document.getElementById('discordForm');
    const errorModel = document.getElementById('errorModel');
    const errorMessage = document.getElementById('errorMessage');
    const checkoutText = document.getElementById('checkoutText');
    const spinner = document.getElementById('spinner');
    const spinnerDiscord = document.getElementById('spinner2');
    const discordAuth = document.getElementById('discordAuth');
    const discordText = document.getElementById('discordText');
    const discordUsername = document.getElementById('discordUsername');
    const signOut = document.getElementById('signOut');
    const signOutParent = document.getElementById('signOutParent');
    const colorRedirect = document.getElementById('colorRedirect');
    const colorRedirectButton = document.getElementById('colorRedirectButton');
    const listBox = document.getElementById('listButton');
    const listItem0 = document.getElementById('listbox-item-0');
    const listItem1 = document.getElementById('listbox-item-1');
    const listItem2 = document.getElementById('listbox-item-2');
    const listItem3 = document.getElementById('listbox-item-3');
    const listItem5 = document.getElementById('listbox-item-5');
    const listItem6 = document.getElementById('listbox-item-6');
    const listItem7 = document.getElementById('listbox-item-7');
    const listItem8 = document.getElementById('listbox-item-8');
    const listItem9 = document.getElementById('listbox-item-9');
    const listItem10 = document.getElementById('listbox-item-a');
    const listItem11 = document.getElementById('listbox-item-b');
    const listItem13 = document.getElementById('listbox-item-d');
    const listItem14 = document.getElementById('listbox-item-e');
    const listItem15 = document.getElementById('listbox-item-f');
    const color = document.getElementById('selectedColor');
    const username = document.getElementById('username');
    const sbekey = document.getElementById('sbekey');
    const colorOptions = document.getElementById('colorOptions');
    const tipText = document.getElementById('tipText');
    const toggleKey = document.getElementById('toggleKey');
    
    let giftOpen = false;
    let listOpen = false;
    let shownKey = false;
    
    let discordUserData = null;
    let discordUserGuildData = null;
    let discordRolesData = null;
    
    var colorJson = null;
    var uuid = null;
    const isDiscordCallback = document.location.hash.length > 0;
    if (localStorage.expiresAt && Date.now() > Number(localStorage.expiresAt)) localStorage.clear();

    const generateState = () => {
        const currentMs = Date.now();
        const rand = Math.random() * 100;
        const newMs = Math.ceil(currentMs + rand * Math.random() * 20);

        return newMs;
    }
    const handleListOpen = () => {
    	if(!listOpen){
            listOpen = true;
			if(colorJson == null) return;
	        var ownedColors = colorJson.purchasedColors;
	        for(var i = 0; i < ownedColors.length; i++) {
	            var color = ownedColors[i];
	            var ele = document.getElementById('listbox-item-'+color);
            	ele.classList.remove('hidden');
	        }
	     }else{
	         listOpen = false;
	         listItem0.classList.add('hidden');
	         listItem1.classList.add('hidden');
	         listItem2.classList.add('hidden');
	         listItem3.classList.add('hidden');
             listItem5.classList.add('hidden');
             listItem6.classList.add('hidden');
             listItem7.classList.add('hidden');
             listItem8.classList.add('hidden');
             listItem9.classList.add('hidden');
             listItem10.classList.add('hidden');
             listItem11.classList.add('hidden');
             listItem13.classList.add('hidden');
             listItem14.classList.add('hidden');
             listItem15.classList.add('hidden');
	     }
    }
    const handleListClick = (id) => {
    	var selectedColor = document.getElementById(id);
        listBox.innerText = selectedColor.innerText;
       
        listBox.classList.replace(listBox.classList.item(0),selectedColor.classList.item(0));
        listBox.style.backgroundColor = selectedColor.style.backgroundColor;
        colorJson.selectedColor = id.substring(13);
        console.log(colorJson.selectedColor);
        
        handleListOpen();
        
    }
    const redirectToDiscord = () => {
        const state = generateState();
        localStorage.setItem('lastKnownState', state);
        localStorage.setItem('lastStateUpdate', Date.now());

        document.location.href = `https://discord.com/api/oauth2/authorize?response_type=${CODE_TYPE}&client_id=${CLIENT_ID}&state=${state}&scope=${SCOPE}&redirect_uri=https://skyblockextras.com/color`;
    }
    //https://stackoverflow.com/questions/4197591/parsing-url-hash-fragment-identifier-with-javascript
    const getHashParams = () => {

        let hashParams = {};
        let e,
            a = /\+/g,
            r = /([^&;=]+)=?([^&;]*)/g,
            d = (s) => { return decodeURIComponent(s.replace(a, " ")); },
            q = window.location.hash.substring(1);

        while (e = r.exec(q))
            hashParams[d(e[1])] = d(e[2]);

        return hashParams;
    }


    const discordCallbackFailed = (message) => {
        errorModel.classList.remove('hidden');
        errorMessage.innerText = message;
        spinnerDiscord.classList.add('hidden');
        discordText.innerText = 'Login With Discord';
        localStorage.clear();
    }

    const getDiscordInformation = async () => {
        if (!localStorage.accessToken) return discordCallbackFailed('There was an issue with processing your discord account. Please try again.');

        try {
            const gresponse = await fetch('https://discord.com/api/v8/users/@me/guilds', {
                headers: {
                    'Authorization': `Bearer ${localStorage.accessToken}`
                }
            });
            
            const gdata = await gresponse.json();

            
            
            if (gdata.id) {
                discordUserGuildData = gdata;
                return gdata;
            } else throw new Error('There was an issue when fetching user data. Please report to SBE developers.');
            
        } catch (e) {
            discordCallbackFailed(e.message);

            return null;
        }
    }
    const getDiscordRolesInformation = async () => {
    	const requestBuilder = new URL('https://skyblockextras.com/discordlookup');
        requestBuilder.searchParams.append('discordId', discordUserData.id);
        const response = await fetch(requestBuilder);
        var data;
        try{
            data = await response.json();
        }catch(err){
        	return discordCallbackFailed('There was an issue with processing your discord account. Please try again.');
        }
		discordRolesData = data;
        return data;
    }
    const getUserInformation = async () => {
        if (!localStorage.accessToken) return discordCallbackFailed('There was an issue with processing your discord account. Please try again.');

        try {
            const response = await fetch('https://discord.com/api/v8/users/@me', {
                headers: {
                    'Authorization': `Bearer ${localStorage.accessToken}`
                }
            });

            const data = await response.json();

            if (data.id) {
                discordUserData = data;

                return data;
            } else throw new Error('There was an issue when fetching user data. Please report to SBE developers.');
        } catch (e) {
            discordCallbackFailed(e.message);

            return null;
        }
    }
    const discordCallback = async (bypass = false) => {
        const hashParams = getHashParams();

        if (!bypass && localStorage.lastKnownState && hashParams.state !== localStorage.lastKnownState) return discordCallbackFailed('Discord callback state does not match stored state. Please try again.');
        const expiresAt = (Number(hashParams.expires_in) * 1000) + Date.now();

        spinnerDiscord.classList.remove('hidden');
        discordText.innerText = '';

        if (!bypass) {
            localStorage.setItem('expiresAt', expiresAt);
            localStorage.setItem('accessToken', hashParams.access_token);
        }

        document.location.hash = ""; // removes hash as soon as it is stored to protect users

        const userData = await getUserInformation();
        if (!userData) return discordCallbackFailed('There was an issue when getting your user data from Discord. Please try again.');
        const roleInfo = await getDiscordRolesInformation();
        if (!roleInfo) return discordCallbackFailed('There was an issue when getting your user data from Discord. Please try again.');
        
        
        discordAuth.classList.add('hidden');
        discordForm.classList.remove('hidden');
        getColorInfoButton.classList.remove('hidden');
        signOutParent.classList.remove('hidden');
        colorRedirect.classList.remove('hidden');
        tipText.classList.add('hidden');
        
        discordUsername.value = `${userData.username}#${userData.discriminator}`;
        if(roleInfo.nick==null){
        	return discordCallbackFailed('Discord User does not have a Nickname');
        }
        username.value = roleInfo.nick.replace('.','');
    }

    if (isDiscordCallback) discordCallback();
    else if (localStorage.accessToken) discordCallback(true);

    const validateUsername = async username => {
        try {
            const response = await fetch(`https://skyblockextras.com/mclookup?type=uuidlookup&input=${username}`);
            const data = await response.json();

            if (data && data.id) return data;
            else return false;
        } catch (e) {
            return false;
        }
    }
    const validateCreds = async username => {
         try {
             const response = await fetch(`https://skyblockextras.com/colorlookup?uuid=${username.id}&sbekey=${sbekey.value}`);
             if(response.status != 200){
            	 errorModel.classList.remove('hidden');
                 errorMessage.innerText = `One or more Credentials are invalid, or user has no purchased Colors`;
                 checkoutText.innerText = 'Update Info';
                 spinner.classList.add('hidden');
                 return false;
             }
             const data = await response.json();
			 
             if (data) return data;
             else return false;
         } catch (e) {
             return false;
         }
    }
    discordAuth.addEventListener('click', () => redirectToDiscord());

    getColorInfoButton.addEventListener('click', async () => {
        checkoutText.innerText = '';
        spinner.classList.remove('hidden');
        errorModel.classList.add('hidden');
        
        if (!discordUserData) {
            errorModel.classList.remove('hidden');
            errorMessage.innerText = `Discord user data not found. Please try again.`;
            checkoutText.innerText = 'Update Info';
            spinner.classList.add('hidden');

            return;
        }
        
        const usernameData = await validateUsername(username.value);
        uuid = usernameData.id;
		
        if (!usernameData) {
            errorModel.classList.remove('hidden');
            errorMessage.innerText = 'Nickname on Discord server is not Current IGN. Please Re-Verify in the Discord server';
            checkoutText.innerText = 'Update Info';
            spinner.classList.add('hidden');

            return;
        }
        try {
    		const colorData = await validateCreds(usernameData);
    		colorJson = colorData;
    		
    		if(colorData){
    			// Successfully validated
    			colorOptions.classList.remove('hidden');
    			spinner.classList.add('hidden');
    	        getColorInfoButton.classList.add('hidden');
    	        updateColor.classList.remove('hidden');
    	        if(colorData.selectedColor == ""){
    	        	errorModel.classList.remove('hidden');
    	            errorMessage.innerText = 'User has no available Colors';
    	            checkoutText.innerText = 'Update Info';
    	            spinner.classList.add('hidden');
    	        }
    	        var selectedColor = document.getElementById('listbox-item-'+colorData.selectedColor);
    	        
    	        listBox.innerText = selectedColor.innerText;
    	        listBox.classList.replace(listBox.classList.item(0), selectedColor.classList.item(0));
    	        listBox.style.backgroundColor = selectedColor.style.backgroundColor;
    	        
    		}

        } catch (e) {
            errorModel.classList.remove('hidden');
            errorMessage.innerText = 'Something went wrong, please report your console to SBE Developers.';
            checkoutText.innerText = 'Update Info';
            spinner.classList.add('hidden');
        }
    });
    
    updateColor.addEventListener('click', async () => {
    	try {
            const response = await fetch(`https://skyblockextras.com/colorlookup?uuid=${uuid}&sbekey=${sbekey.value}`, 
         		{
	                headers: {
	                    'Accept': 'application/json',
	                    'Content-Type': 'application/json'
	                },
	                method: "POST",
	                body: JSON.stringify(colorJson)
              	});
            if(response.status != 204){
           	 errorModel.classList.remove('hidden');
                errorMessage.innerText = `Something went wrong`;
                checkoutText.innerText = 'Update Info';
                spinner.classList.add('hidden');
                return false;
            }
            // success
            discordForm.classList.add('hidden');
            getColorInfoButton.classList.add('hidden');
            signOutParent.classList.add('hidden');
            colorRedirect.classList.add('hidden');
            document.getElementById('successMsg').classList.remove('hidden');
            document.getElementById('headline').classList.add('hidden');
            
        } catch (e) {
            return false;
        }
    });
    discordForm.addEventListener('submit', (e) => e.preventDefault());
    
    signOut.addEventListener('click', () => {
        localStorage.clear();

        document.location.reload();
    });
    colorRedirectButton.addEventListener('click', () => {
    	window.open("https://minecraft.gamepedia.com/Formatting_codes");
    });
    listBox.addEventListener('click', () => handleListOpen());
    listItem0.addEventListener('click', () => handleListClick(listItem0.id));
    listItem1.addEventListener('click', () => handleListClick(listItem1.id));
    listItem2.addEventListener('click', () => handleListClick(listItem2.id));
    listItem3.addEventListener('click', () => handleListClick(listItem3.id));
    listItem5.addEventListener('click', () => handleListClick(listItem5.id));
    listItem6.addEventListener('click', () => handleListClick(listItem6.id));
    listItem7.addEventListener('click', () => handleListClick(listItem7.id));
    listItem8.addEventListener('click', () => handleListClick(listItem8.id));
    listItem9.addEventListener('click', () => handleListClick(listItem9.id));
    listItem10.addEventListener('click', () => handleListClick(listItem10.id));
    listItem11.addEventListener('click', () => handleListClick(listItem11.id));
    listItem13.addEventListener('click', () => handleListClick(listItem13.id));
    listItem14.addEventListener('click', () => handleListClick(listItem14.id));
    listItem15.addEventListener('click', () => handleListClick(listItem15.id));
    
    toggleKey.addEventListener('click', () => {
    	const type = sbekey.getAttribute('type') === 'password' ? 'text' : 'password';
    	sbekey.setAttribute('type', type)
    });
</script>

</html>