<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <title>Validators | Nodewood - Node.js &amp; Vue.js SaaS Boilerplate &amp; Starter Kit</title>
    <meta name="generator" content="VuePress 1.8.0">
    <link href="https://fonts.googleapis.com/css?family=Raleway|Rubik&amp;display=swap" rel="stylesheet">
    <link href="https://unpkg.com/tailwindcss@^1.0/dist/tailwind.min.css" rel="stylesheet">
    <script>var clicky_site_ids = clicky_site_ids || []; clicky_site_ids.push(101244903);</script>
    <script async="async" src="https://static.getclicky.com/js"></script>
    <meta name="description" content="Save weeks or months of development time and start writing code now with Nodewood, a Vue.js/Node.js Javascript SaaS starter kit focused on setting you up for success.">
    
    <link rel="preload" href="/assets/css/0.styles.a1f64882.css" as="style"><link rel="preload" href="/assets/js/app.2c5c8431.js" as="script"><link rel="preload" href="/assets/js/3.97560a66.js" as="script"><link rel="preload" href="/assets/js/31.b0f778d0.js" as="script"><link rel="prefetch" href="/assets/js/1.e7c95f4b.js"><link rel="prefetch" href="/assets/js/10.4714bec1.js"><link rel="prefetch" href="/assets/js/11.e1c6e275.js"><link rel="prefetch" href="/assets/js/12.7d1683db.js"><link rel="prefetch" href="/assets/js/13.6ad699ae.js"><link rel="prefetch" href="/assets/js/14.98fffd60.js"><link rel="prefetch" href="/assets/js/15.75e154cd.js"><link rel="prefetch" href="/assets/js/16.e0558b03.js"><link rel="prefetch" href="/assets/js/17.2c79718e.js"><link rel="prefetch" href="/assets/js/18.01df460c.js"><link rel="prefetch" href="/assets/js/19.dcfb6177.js"><link rel="prefetch" href="/assets/js/20.7a5ebcf2.js"><link rel="prefetch" href="/assets/js/21.8e46f6a6.js"><link rel="prefetch" href="/assets/js/22.85a4fe2c.js"><link rel="prefetch" href="/assets/js/23.144f5590.js"><link rel="prefetch" href="/assets/js/24.e330e298.js"><link rel="prefetch" href="/assets/js/25.11d829d6.js"><link rel="prefetch" href="/assets/js/26.8efddb91.js"><link rel="prefetch" href="/assets/js/27.6151565d.js"><link rel="prefetch" href="/assets/js/28.2ff0aeda.js"><link rel="prefetch" href="/assets/js/29.7d3717f8.js"><link rel="prefetch" href="/assets/js/30.2c5eca19.js"><link rel="prefetch" href="/assets/js/32.da80e8ef.js"><link rel="prefetch" href="/assets/js/33.f36044ca.js"><link rel="prefetch" href="/assets/js/34.ca2176a9.js"><link rel="prefetch" href="/assets/js/35.486971e2.js"><link rel="prefetch" href="/assets/js/36.01f889f1.js"><link rel="prefetch" href="/assets/js/37.22720a84.js"><link rel="prefetch" href="/assets/js/38.3879083d.js"><link rel="prefetch" href="/assets/js/39.76217072.js"><link rel="prefetch" href="/assets/js/4.82b986e7.js"><link rel="prefetch" href="/assets/js/40.2f3ff916.js"><link rel="prefetch" href="/assets/js/41.d1beef0f.js"><link rel="prefetch" href="/assets/js/42.b55d7485.js"><link rel="prefetch" href="/assets/js/43.abfd8c00.js"><link rel="prefetch" href="/assets/js/44.785cabc6.js"><link rel="prefetch" href="/assets/js/45.a7ebb691.js"><link rel="prefetch" href="/assets/js/46.505af8a7.js"><link rel="prefetch" href="/assets/js/47.87e4cbfe.js"><link rel="prefetch" href="/assets/js/48.7fe633eb.js"><link rel="prefetch" href="/assets/js/49.695e374f.js"><link rel="prefetch" href="/assets/js/5.a06e35e7.js"><link rel="prefetch" href="/assets/js/50.6a044cca.js"><link rel="prefetch" href="/assets/js/51.cd34d42b.js"><link rel="prefetch" href="/assets/js/52.6c1a4410.js"><link rel="prefetch" href="/assets/js/53.1c5bba26.js"><link rel="prefetch" href="/assets/js/54.79229308.js"><link rel="prefetch" href="/assets/js/55.17556840.js"><link rel="prefetch" href="/assets/js/56.efe22f15.js"><link rel="prefetch" href="/assets/js/57.85a6201e.js"><link rel="prefetch" href="/assets/js/58.e62d9cf8.js"><link rel="prefetch" href="/assets/js/59.616f8f3d.js"><link rel="prefetch" href="/assets/js/6.5c0e4fa7.js"><link rel="prefetch" href="/assets/js/60.5de3197c.js"><link rel="prefetch" href="/assets/js/61.05007999.js"><link rel="prefetch" href="/assets/js/62.3ab5ac3f.js"><link rel="prefetch" href="/assets/js/63.cf858a85.js"><link rel="prefetch" href="/assets/js/64.6679b2f5.js"><link rel="prefetch" href="/assets/js/65.4846ffb2.js"><link rel="prefetch" href="/assets/js/7.4701d5ea.js"><link rel="prefetch" href="/assets/js/8.a264957f.js"><link rel="prefetch" href="/assets/js/9.addc3dd2.js">
    <link rel="stylesheet" href="/assets/css/0.styles.a1f64882.css">
  </head>
  <body>
    <div id="app" data-server-rendered="true"><div class="theme-container"><header class="navbar"><div class="sidebar-button"><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" role="img" viewBox="0 0 448 512" class="icon"><path fill="currentColor" d="M436 124H12c-6.627 0-12-5.373-12-12V80c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12zm0 160H12c-6.627 0-12-5.373-12-12v-32c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12zm0 160H12c-6.627 0-12-5.373-12-12v-32c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12z"></path></svg></div> <a href="/" class="home-link router-link-active"><img src="/log-logo-bw.svg" alt="Nodewood Documentation" class="logo"> <span class="site-name can-hide">Nodewood</span></a> <div class="links mr-32"><nav class="nav-links can-hide"><div class="nav-item"><a href="/" class="nav-link">
  Home
</a></div><div class="nav-item"><a href="/blog/">
      Blog
    </a></div> <!----></nav> <a href="/app/signup" class="build-with-nodewood">
      Build with Nodewood
    </a> <div class="search-box"><input aria-label="Search" autocomplete="off" spellcheck="false" value=""> <!----></div></div> <div class="bg-red-700 text-white fixed transform rotate-45 px-16" style="top: 20px; right: -40px">
    BETA
  </div></header> <div class="sidebar-mask"></div> <aside class="sidebar"><nav class="nav-links"><div class="nav-item"><a href="/" class="nav-link">
  Home
</a></div><div class="nav-item"><a href="/blog/">
      Blog
    </a></div> <!----></nav>  <ul class="sidebar-links"><li><section class="sidebar-group collapsable depth-0"><p class="sidebar-heading"><span>Overview</span> <span class="arrow right"></span></p> <!----></section></li><li><section class="sidebar-group collapsable depth-0"><p class="sidebar-heading"><span>Getting Started</span> <span class="arrow right"></span></p> <!----></section></li><li><section class="sidebar-group collapsable depth-0"><p class="sidebar-heading open"><span>Architecture Concepts</span> <span class="arrow down"></span></p> <ul class="sidebar-links sidebar-group-items"><li><a href="/docs/architecture/" aria-current="page" class="sidebar-link">Introduction</a></li><li><a href="/docs/architecture/shared-code/" class="sidebar-link">Shared Code</a></li><li><a href="/docs/architecture/cascading-filesystem/" class="sidebar-link">Cascading Filesystem</a></li><li><a href="/docs/architecture/configuration/" class="sidebar-link">Configuration</a></li><li><a href="/docs/architecture/features/" class="sidebar-link">Feature-based Development</a></li><li><a href="/docs/architecture/models/" class="sidebar-link">Models</a></li><li><a href="/docs/architecture/validators/" aria-current="page" class="active sidebar-link">Validators</a></li><li><a href="/docs/architecture/errors/" class="sidebar-link">Error Handling</a></li></ul></section></li><li><section class="sidebar-group collapsable depth-0"><p class="sidebar-heading"><span>API / Backend</span> <span class="arrow right"></span></p> <!----></section></li><li><section class="sidebar-group collapsable depth-0"><p class="sidebar-heading"><span>UI / Frontend</span> <span class="arrow right"></span></p> <!----></section></li><li><a href="/docs/cli/" class="sidebar-link">CLI / Scripts</a></li><li><section class="sidebar-group collapsable depth-0"><p class="sidebar-heading"><span>Nodewood Features</span> <span class="arrow right"></span></p> <!----></section></li><li><section class="sidebar-group collapsable depth-0"><p class="sidebar-heading"><span>Tutorials</span> <span class="arrow right"></span></p> <!----></section></li><li><a href="/docs/sales-website/" class="sidebar-link">Sales Website</a></li><li><a href="/docs/deploying/" class="sidebar-link">Deploying to Production</a></li><li><a href="/docs/help/" class="sidebar-link">Help</a></li></ul> </aside> <main class="page"> <div class="theme-default-content content__default"><h1 id="validators"><a href="#validators" class="header-anchor">#</a> Validators</h1> <p>Before submitting forms to your API (for user convenience), and before accepting API input (for security), you will want to validate form input.  Since this happens on both the front-end and back-end, Nodewood makes use of shared Validator helpers to define the validation rules and error messages for your model fields.</p> <h2 id="creating-a-new-validator"><a href="#creating-a-new-validator" class="header-anchor">#</a> Creating a new Validator</h2> <p>From the root of your project, run <code>nodewood add:validator FEATURE NAME</code>.  (e.g.: <code>nodewood add:validator scheduling calendar</code>.)  This will create a new Validator in <code>app/features/FEATURE/lib/validators/NAMEValidator.js</code>.  Typically, you will pair Validators with Models, so if you have a <code>PostModel</code>, you'll likely want to pair it with a <code>PostValidator</code>.</p> <h2 id="adding-rules-to-validators"><a href="#adding-rules-to-validators" class="header-anchor">#</a> Adding Rules to Validators</h2> <p>Nodewood's Validator classes allow you to add Rules in the constructor, which make it very easy to take advantage of <a href="https://www.npmjs.com/package/validator" target="_blank" rel="noopener noreferrer">validator.js<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>:</p> <div class="language-javascript extra-class"><pre class="language-javascript"><code><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">fields</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">super</span><span class="token punctuation">(</span>fields<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span>rules <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token keyword">new</span> <span class="token class-name">Rule</span><span class="token punctuation">(</span><span class="token string">'isEmpty'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token constant">ERROR_EMPTY</span><span class="token punctuation">,</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'You must enter a name.'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>In the above case, whenever validating the <code>name</code> field, it will be checked to see if it is empty.  If so, it will add an error object with the <code>code</code> and <code>title</code> provided to the errors returned.</p> <p>The above rule triggers when the <code>isEmpty</code> validator returns <code>true</code> about the <code>name</code> field, but we can also trigger when a validator returns <code>false</code>:</p> <div class="language-javascript extra-class"><pre class="language-javascript"><code><span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token keyword">new</span> <span class="token class-name">Rule</span><span class="token punctuation">(</span><span class="token string">'isEmpty'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token constant">ERROR_EMPTY</span><span class="token punctuation">,</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'You must enter a name.'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">new</span> <span class="token class-name">NotRule</span><span class="token punctuation">(</span><span class="token string">'isEmail'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token constant">ERROR_INVALID_EMAIL</span><span class="token punctuation">,</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'You must enter a valid email address.'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">,</span>
</code></pre></div><p>Rules are evaluated in order, and the first rule to trigger skips the rest.  In this case, if the <code>email</code> field is not empty, it is checked to see if it is a valid email address.  A <code>NotRule</code> will trigger if the validator fails, so in this case, the second rule will trigger when the <code>email</code> field is <em>not</em> a valid email address.</p> <p>You can use any of <a href="https://www.npmjs.com/package/validator#validators" target="_blank" rel="noopener noreferrer">validator.js's Validators<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> as the first parameter of the rule.  If it requires additional arguments, those can be passed as the third parameter to the Rule's constructor:</p> <div class="language-javascript extra-class"><pre class="language-javascript"><code><span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token keyword">new</span> <span class="token class-name">NotRule</span><span class="token punctuation">(</span>
    <span class="token string">'isLength'</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token constant">ERROR_MIN_LENGTH</span><span class="token punctuation">,</span>
      <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Password must be at least </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">PASSWORD_LENGTH</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> characters.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">minLength</span><span class="token operator">:</span> <span class="token constant">PASSWORD_LENGTH</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token constant">PASSWORD_LENGTH</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">,</span>
</code></pre></div><p>Additional validator rules have been added for convenience:</p> <table><thead><tr><th><strong>Name</strong></th> <th><strong>Description</strong></th></tr></thead> <tbody><tr><td><strong>equalsField(str, field)</strong></td> <td>Compare the value of this field to the value in another field.  Check UserValidator for an example.</td></tr></tbody></table> <p>You can also extend the <code>Rule</code> class from <code>#lib/Rules</code> to add your own validator rules.  Any function defined on that class can be used as a validator rule.  For an example, see the <code>equalsField</code> function defined in <code>wood/lib/Rules</code>.</p> <h2 id="using-validators-in-the-api"><a href="#using-validators-in-the-api" class="header-anchor">#</a> Using Validators in the API</h2> <p>Since a single validator can be used to validate multiple forms, you'll need to pass an array of the fields you wish to validate to the Validator constructor.</p> <p>The base Controller class that your controllers will inherit from has a <code>validate()</code> function that accepts a <code>form</code> object containing your data to validate and a <code>validator</code> object, which accepts an initialized Validator:</p> <div class="language-javascript extra-class"><pre class="language-javascript"><code>  <span class="token keyword">const</span> <span class="token constant">SIGNUP_FORM_FIELDS</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'email'</span><span class="token punctuation">,</span> <span class="token string">'password'</span><span class="token punctuation">,</span> <span class="token string">'passwordRepeat'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">signup</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">UserValidator</span><span class="token punctuation">(</span><span class="token constant">SIGNUP_FORM_FIELDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Signup code goes here</span>
  <span class="token punctuation">}</span>
</code></pre></div><p>Any errors found during validation are thrown as a <code>Standard400Error</code>, which is handled in an Express middleware and returned as a response with a 400 Status Code and a body that describes the error using the <a href="https://jsonapi.org/format/#errors" target="_blank" rel="noopener noreferrer">JSON API error format<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>:</p> <div class="language-json extra-class"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;errors&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;code&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ERROR_UNIQUE&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;source&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;parameter&quot;</span><span class="token operator">:</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;You already have a project with that name.&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="using-multiple-validators-in-the-api"><a href="#using-multiple-validators-in-the-api" class="header-anchor">#</a> Using multiple validators in the API</h3> <p>If your form is a composite form (i.e. the fields will be used to update multiple models/tables, for intance in the case of the team signup page), you may want to use multiple Validators to take care of all of the fields in the form.  In this case, you can actually pass multiple Validators to the <code>validate()</code> function:</p> <div class="language-javascript extra-class"><pre class="language-javascript"><code>  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">signup</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">,</span> <span class="token punctuation">[</span>
      <span class="token keyword">new</span> <span class="token class-name">UserValidator</span><span class="token punctuation">(</span><span class="token constant">USER_FORM_FIELDS</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token keyword">new</span> <span class="token class-name">TeamValidator</span><span class="token punctuation">(</span><span class="token constant">TEAM_FORM_FIELDS</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">aliases</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">team_name</span><span class="token operator">:</span> <span class="token string">'name'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
</code></pre></div><p>For more information on what aliases are and how to use them, refer to <a href="/docs/architecture/validators/#aliasing-fields">Aliasing fields</a>.</p> <h2 id="using-validators-in-the-ui"><a href="#using-validators-in-the-ui" class="header-anchor">#</a> Using Validators in the UI</h2> <p>Using Validators in the UI is a little more involved, but it's still a fairly simple pattern.  First, you need to add an object for your form data and errors returned from the API (since only the API will be able to validate things like duplicate fields, failed 3rd-party transactions).  Then, for each field in your form, you'll want to add some convenience <code>computed</code> functions:</p> <div class="language-javascript extra-class"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> computed<span class="token punctuation">,</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> UserValidator<span class="token punctuation">,</span> <span class="token constant">SIGNUP_FORM_FIELDS</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'#features/users/lib/validators/UserValidator'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> fieldErrorText <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'#ui/lib/forms'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> validator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserValidator</span><span class="token punctuation">(</span><span class="token constant">SIGNUP_FORM_FIELDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> form <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> apiErrors <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> nameErrorText <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token function">fieldErrorText</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> validator<span class="token punctuation">,</span> form<span class="token punctuation">,</span> apiErrors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> emailErrorText <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token function">fieldErrorText</span><span class="token punctuation">(</span><span class="token string">'email'</span><span class="token punctuation">,</span> validator<span class="token punctuation">,</span> form<span class="token punctuation">,</span> apiErrors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><code>fieldErrorText</code> is a helper function (located in <code>wood/ui/lib/forms.js</code>) that will attempt to validate the provided form field with the provided validator and combine it with any apiErrors that are defined.  If the form field is empty, no errors are displayed (since a form might require a field to not be empty to submit, but you don't want to display that error passive-aggressively in all fields when it loads).</p> <p>Now in your template, you can use these computed properties to alter and display your form data:</p> <div class="language-vue extra-class"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>form.email<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>emailErrorText.length &gt;= 0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text-red-600<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  {{ emailErrorText }}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>You can also create a convenience computed property for the entire form:</p> <div class="language-javascript extra-class"><pre class="language-javascript"><code><span class="token keyword">const</span> formValid <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> validator<span class="token punctuation">.</span><span class="token function">valid</span><span class="token punctuation">(</span>form<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Then you can use it to enable/disable the submit button:</p> <div class="language-vue extra-class"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">:disabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>! formValid<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  Submit
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>This prevents you from having to duplicate the critical code: the actual validation logic.  That way, if your validation logic ever changes, you can change the rules in just the Validator, and know that your API and UI will both adapt without you needing to make any changes there.</p> <h2 id="aliasing-fields"><a href="#aliasing-fields" class="header-anchor">#</a> Aliasing fields</h2> <p>From time to time, you'll need to have form fields that have a different name from what you'll use in the <code>rules</code> key in your validators, for example, when combining validators to validate a single form.</p> <p>An example of this is <code>SignupNoCCTeamPage.vue</code>, where the <code>UserValidator</code> and <code>TeamValidator</code> are combined to validate the user fields and team name fields of one combined form.  In this case, we can't use <code>name</code> for the team name, since it's already being used for the user name, so instead we have to <em>alias</em> this entry.</p> <p>This is done by providing an optional parameter when creating the validator:</p> <div class="language-javascript extra-class"><pre class="language-javascript"><code><span class="token keyword">const</span> teamValidator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TeamValidator</span><span class="token punctuation">(</span><span class="token constant">FORM_FIELDS</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">aliases</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">team_name</span><span class="token operator">:</span> <span class="token string">'name'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>This means that later, when you check the form for errors with:</p> <div class="language-javascript extra-class"><pre class="language-javascript"><code>teamValidator<span class="token punctuation">.</span><span class="token function">errors</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>apiErrors<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>It will use <code>team_name</code> to pull values from the form, but compare them against the rules for <code>name</code> in the validator.  This will effectively and safely decouple the form field names from the validator rule names, when necessary.</p> <p>Note, in the returned errors array, the key for the aliased field will be the alias.  For example, if you are aliasing <code>name</code> as <code>team_name</code>, as above, the error key for that field will be <code>team_name</code>, not <code>name</code>.  This is because, usually, you are aliasing fields because you already have other fields with that key from other validators that you want to include.  If you just merged the objects, the latter one with the same key would overwrite it.  With the aliases preserved, it is safe to merge the objects without worrying about losing error information.</p></div> <footer class="page-edit"><!----> <!----></footer> <div class="page-nav"><p class="inner"><span class="prev">
      ←
      <a href="/docs/architecture/models/" class="prev">
        Models
      </a></span> <span class="next"><a href="/docs/architecture/errors/">
        Error Handling
      </a>
      →
    </span></p></div> </main></div><div class="global-ui"></div></div>
    <script src="/assets/js/app.2c5c8431.js" defer></script><script src="/assets/js/3.97560a66.js" defer></script><script src="/assets/js/31.b0f778d0.js" defer></script>
  </body>
</html>
