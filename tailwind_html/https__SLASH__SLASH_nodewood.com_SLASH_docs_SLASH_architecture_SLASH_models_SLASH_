<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <title>Models | Nodewood - Node.js &amp; Vue.js SaaS Boilerplate &amp; Starter Kit</title>
    <meta name="generator" content="VuePress 1.8.0">
    <link href="https://fonts.googleapis.com/css?family=Raleway|Rubik&amp;display=swap" rel="stylesheet">
    <link href="https://unpkg.com/tailwindcss@^1.0/dist/tailwind.min.css" rel="stylesheet">
    <script>var clicky_site_ids = clicky_site_ids || []; clicky_site_ids.push(101244903);</script>
    <script async="async" src="https://static.getclicky.com/js"></script>
    <meta name="description" content="Save weeks or months of development time and start writing code now with Nodewood, a Vue.js/Node.js Javascript SaaS starter kit focused on setting you up for success.">
    
    <link rel="preload" href="/assets/css/0.styles.a1f64882.css" as="style"><link rel="preload" href="/assets/js/app.2c5c8431.js" as="script"><link rel="preload" href="/assets/js/3.97560a66.js" as="script"><link rel="preload" href="/assets/js/29.7d3717f8.js" as="script"><link rel="prefetch" href="/assets/js/1.e7c95f4b.js"><link rel="prefetch" href="/assets/js/10.4714bec1.js"><link rel="prefetch" href="/assets/js/11.e1c6e275.js"><link rel="prefetch" href="/assets/js/12.7d1683db.js"><link rel="prefetch" href="/assets/js/13.6ad699ae.js"><link rel="prefetch" href="/assets/js/14.98fffd60.js"><link rel="prefetch" href="/assets/js/15.75e154cd.js"><link rel="prefetch" href="/assets/js/16.e0558b03.js"><link rel="prefetch" href="/assets/js/17.2c79718e.js"><link rel="prefetch" href="/assets/js/18.01df460c.js"><link rel="prefetch" href="/assets/js/19.dcfb6177.js"><link rel="prefetch" href="/assets/js/20.7a5ebcf2.js"><link rel="prefetch" href="/assets/js/21.8e46f6a6.js"><link rel="prefetch" href="/assets/js/22.85a4fe2c.js"><link rel="prefetch" href="/assets/js/23.144f5590.js"><link rel="prefetch" href="/assets/js/24.e330e298.js"><link rel="prefetch" href="/assets/js/25.11d829d6.js"><link rel="prefetch" href="/assets/js/26.8efddb91.js"><link rel="prefetch" href="/assets/js/27.6151565d.js"><link rel="prefetch" href="/assets/js/28.2ff0aeda.js"><link rel="prefetch" href="/assets/js/30.2c5eca19.js"><link rel="prefetch" href="/assets/js/31.b0f778d0.js"><link rel="prefetch" href="/assets/js/32.da80e8ef.js"><link rel="prefetch" href="/assets/js/33.f36044ca.js"><link rel="prefetch" href="/assets/js/34.ca2176a9.js"><link rel="prefetch" href="/assets/js/35.486971e2.js"><link rel="prefetch" href="/assets/js/36.01f889f1.js"><link rel="prefetch" href="/assets/js/37.22720a84.js"><link rel="prefetch" href="/assets/js/38.3879083d.js"><link rel="prefetch" href="/assets/js/39.76217072.js"><link rel="prefetch" href="/assets/js/4.82b986e7.js"><link rel="prefetch" href="/assets/js/40.2f3ff916.js"><link rel="prefetch" href="/assets/js/41.d1beef0f.js"><link rel="prefetch" href="/assets/js/42.b55d7485.js"><link rel="prefetch" href="/assets/js/43.abfd8c00.js"><link rel="prefetch" href="/assets/js/44.785cabc6.js"><link rel="prefetch" href="/assets/js/45.a7ebb691.js"><link rel="prefetch" href="/assets/js/46.505af8a7.js"><link rel="prefetch" href="/assets/js/47.87e4cbfe.js"><link rel="prefetch" href="/assets/js/48.7fe633eb.js"><link rel="prefetch" href="/assets/js/49.695e374f.js"><link rel="prefetch" href="/assets/js/5.a06e35e7.js"><link rel="prefetch" href="/assets/js/50.6a044cca.js"><link rel="prefetch" href="/assets/js/51.cd34d42b.js"><link rel="prefetch" href="/assets/js/52.6c1a4410.js"><link rel="prefetch" href="/assets/js/53.1c5bba26.js"><link rel="prefetch" href="/assets/js/54.79229308.js"><link rel="prefetch" href="/assets/js/55.17556840.js"><link rel="prefetch" href="/assets/js/56.efe22f15.js"><link rel="prefetch" href="/assets/js/57.85a6201e.js"><link rel="prefetch" href="/assets/js/58.e62d9cf8.js"><link rel="prefetch" href="/assets/js/59.616f8f3d.js"><link rel="prefetch" href="/assets/js/6.5c0e4fa7.js"><link rel="prefetch" href="/assets/js/60.5de3197c.js"><link rel="prefetch" href="/assets/js/61.05007999.js"><link rel="prefetch" href="/assets/js/62.3ab5ac3f.js"><link rel="prefetch" href="/assets/js/63.cf858a85.js"><link rel="prefetch" href="/assets/js/64.6679b2f5.js"><link rel="prefetch" href="/assets/js/65.4846ffb2.js"><link rel="prefetch" href="/assets/js/7.4701d5ea.js"><link rel="prefetch" href="/assets/js/8.a264957f.js"><link rel="prefetch" href="/assets/js/9.addc3dd2.js">
    <link rel="stylesheet" href="/assets/css/0.styles.a1f64882.css">
  </head>
  <body>
    <div id="app" data-server-rendered="true"><div class="theme-container"><header class="navbar"><div class="sidebar-button"><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" role="img" viewBox="0 0 448 512" class="icon"><path fill="currentColor" d="M436 124H12c-6.627 0-12-5.373-12-12V80c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12zm0 160H12c-6.627 0-12-5.373-12-12v-32c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12zm0 160H12c-6.627 0-12-5.373-12-12v-32c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12z"></path></svg></div> <a href="/" class="home-link router-link-active"><img src="/log-logo-bw.svg" alt="Nodewood Documentation" class="logo"> <span class="site-name can-hide">Nodewood</span></a> <div class="links mr-32"><nav class="nav-links can-hide"><div class="nav-item"><a href="/" class="nav-link">
  Home
</a></div><div class="nav-item"><a href="/blog/">
      Blog
    </a></div> <!----></nav> <a href="/app/signup" class="build-with-nodewood">
      Build with Nodewood
    </a> <div class="search-box"><input aria-label="Search" autocomplete="off" spellcheck="false" value=""> <!----></div></div> <div class="bg-red-700 text-white fixed transform rotate-45 px-16" style="top: 20px; right: -40px">
    BETA
  </div></header> <div class="sidebar-mask"></div> <aside class="sidebar"><nav class="nav-links"><div class="nav-item"><a href="/" class="nav-link">
  Home
</a></div><div class="nav-item"><a href="/blog/">
      Blog
    </a></div> <!----></nav>  <ul class="sidebar-links"><li><section class="sidebar-group collapsable depth-0"><p class="sidebar-heading"><span>Overview</span> <span class="arrow right"></span></p> <!----></section></li><li><section class="sidebar-group collapsable depth-0"><p class="sidebar-heading"><span>Getting Started</span> <span class="arrow right"></span></p> <!----></section></li><li><section class="sidebar-group collapsable depth-0"><p class="sidebar-heading open"><span>Architecture Concepts</span> <span class="arrow down"></span></p> <ul class="sidebar-links sidebar-group-items"><li><a href="/docs/architecture/" aria-current="page" class="sidebar-link">Introduction</a></li><li><a href="/docs/architecture/shared-code/" class="sidebar-link">Shared Code</a></li><li><a href="/docs/architecture/cascading-filesystem/" class="sidebar-link">Cascading Filesystem</a></li><li><a href="/docs/architecture/configuration/" class="sidebar-link">Configuration</a></li><li><a href="/docs/architecture/features/" class="sidebar-link">Feature-based Development</a></li><li><a href="/docs/architecture/models/" aria-current="page" class="active sidebar-link">Models</a></li><li><a href="/docs/architecture/validators/" class="sidebar-link">Validators</a></li><li><a href="/docs/architecture/errors/" class="sidebar-link">Error Handling</a></li></ul></section></li><li><section class="sidebar-group collapsable depth-0"><p class="sidebar-heading"><span>API / Backend</span> <span class="arrow right"></span></p> <!----></section></li><li><section class="sidebar-group collapsable depth-0"><p class="sidebar-heading"><span>UI / Frontend</span> <span class="arrow right"></span></p> <!----></section></li><li><a href="/docs/cli/" class="sidebar-link">CLI / Scripts</a></li><li><section class="sidebar-group collapsable depth-0"><p class="sidebar-heading"><span>Nodewood Features</span> <span class="arrow right"></span></p> <!----></section></li><li><section class="sidebar-group collapsable depth-0"><p class="sidebar-heading"><span>Tutorials</span> <span class="arrow right"></span></p> <!----></section></li><li><a href="/docs/sales-website/" class="sidebar-link">Sales Website</a></li><li><a href="/docs/deploying/" class="sidebar-link">Deploying to Production</a></li><li><a href="/docs/help/" class="sidebar-link">Help</a></li></ul> </aside> <main class="page"> <div class="theme-default-content content__default"><h1 id="models"><a href="#models" class="header-anchor">#</a> Models</h1> <p>Models in Nodewood are not the ORM models you may expect.  They don't even have to represent a database entity at all - they represent a <strong>business logic entity</strong>, and that can come from a database, a third-party API, intermediate data, whatever your business logic requires.</p> <h2 id="creating-a-new-model"><a href="#creating-a-new-model" class="header-anchor">#</a> Creating a new Model</h2> <p>From the root of your project, run <code>nodewood add:model FEATURE NAME</code>.  (e.g.: <code>nodewood add:model scheduling calendar</code>.)  This will create a new Model in <code>app/features/FEATURE/lib/models/NAMEModel.js</code>.  Typically, you will pair Models with Validators, so if you have a <code>PostModel</code>, you'll likely want to pair it with a <code>PostValidator</code>.</p> <p>The simplest model looks something like:</p> <div class="language-javascript extra-class"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> FieldNumber<span class="token punctuation">,</span> FieldString <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'#lib/Fields'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">SAMPLE_MODEL_FIELDS</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">FieldNumber</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'ID'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">FieldString</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'First Name'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">FieldString</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'Last Name'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">SampleModel</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> id<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> last_name <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token constant">SAMPLE_MODEL_FIELDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> first_name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> last_name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span>
      <span class="token literal-property property">first_name</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token punctuation">,</span>
      <span class="token literal-property property">last_name</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  SampleModel<span class="token punctuation">,</span>
  <span class="token constant">SAMPLE_MODEL_FIELDS</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="constructor"><a href="#constructor" class="header-anchor">#</a> Constructor</h2> <p>The model's constructor accepts a snake-case-keyed object and assigns those values to camel-cased local properties.  It also passes the <a href="/docs/architecture/models/#fields">fields</a> for this model to the base Model class to make it easier to display this model's fields.</p> <div class="language-javascript extra-class"><pre class="language-javascript"><code><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> id<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> last_name <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token constant">SAMPLE_MODEL_FIELDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> first_name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> last_name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Most databases and JSON formats use snake-case, and most JavaScript code is camel-cased, so this helps translate between persistence/transmission formats and your code.</p> <p>Note that only business logic-related values are saved to the model.  The database table your model is based on may have fields like <code>created_at</code> and <code>updated_at</code>, but if those fields aren't important to the logic of your application (i.e. only used in sorting when loading from the database), you don't need to save them as model fields.  Further, secure fields (like passwords) often shouldn't be stored in models either.  They should be accessed securely from within <a href="/docs/api/services">services</a>.</p> <h2 id="tojson"><a href="#tojson" class="header-anchor">#</a> toJSON()</h2> <p>This function is essentially the opposite of the constructor, taking the camel-cased local properties of the model and turning them back into a snake-case-keyed object for use when saving in a database or sending back from an API.</p> <div class="language-javascript extra-class"><pre class="language-javascript"><code><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span>
    <span class="token literal-property property">first_name</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token punctuation">,</span>
    <span class="token literal-property property">last_name</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="fields"><a href="#fields" class="header-anchor">#</a> Fields</h2> <p>Models have a <code>MODEL_NAME_FIELDS</code> variable that describe the fields of that model for display purposes:</p> <div class="language-javascript extra-class"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">MODEL_NAME_FIELDS</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">FieldNumber</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'ID'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">FieldString</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'First Name'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">FieldString</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'Last Name'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>It is important to note that Fields don't contain the <em>value</em> of the field, they <em>describe</em> it for display.  Values for fields are stored in the Model themselves.</p> <p>Each field is defined with a class from <code>wood/lib/Fields.js</code> that has different display options available to set in its constructor, and a <code>value()</code> function you can call with the value of the field to display it appropriately.  This makes it easy to loop over a collection of models and just call the <code>value()</code> function do format it as expected, without needing to store that information in multiple other places in your application.</p> <p>The base Model class actually has copies of these functions to make it easier to display the model's fields, properly formatted by its fields, as we'll explore in the next section.</p> <h3 id="using-fields"><a href="#using-fields" class="header-anchor">#</a> Using fields</h3> <p>To iterate over a list of fields in a model and display the values in a user-friendly way:</p> <div class="language-javascript extra-class"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> ExampleModel<span class="token punctuation">,</span> <span class="token constant">EXAMPLE_MODEL_FIELDS</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'#features/example/lib/models/ExampleModel'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExampleModel</span><span class="token punctuation">(</span>someValues<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token constant">EXAMPLE_MODEL_FIELDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>example<span class="token punctuation">.</span><span class="token function">label</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>example<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>You can also add classes to the label or data when defining the fields.  You can choose whether these classes apply in desktop or mobile mode, and you can choose to apply these classes to the container or inner text.  This is useful for certain fields that you want to be displayed centered in their elements, but only on desktop displays:</p> <div class="language-javascript extra-class"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">EXAMPLE_MODEL_FIELDS</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">approved</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">FieldBoolean</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'Approved'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">desktopValueClasses</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'text-center'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">valueInnerClasses</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'underline'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><div class="language-html extra-class"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>key in Object.keys(EXAMPLE_MODEL_FIELDS)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>example.valueClass(key, { desktop: true })<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>example.valueInnerClass(key, { desktop: true })<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      {{ example.value(key) }}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>This will show the &quot;approved&quot; field centered in its container, with the inner text underlined.  If you were to pass <code>{ mobile: true }</code> as the second parameter (or omit it entirely), the field would have its inner text underlined only, with no centering.</p> <p>If you want to display the field's output as HTML, you must set <code>isHtml</code> in the constructor to <code>true</code>, otherwise Vue's security model will escape the text instead.</p> <h3 id="custom-value-class-functions"><a href="#custom-value-class-functions" class="header-anchor">#</a> Custom value class functions</h3> <p>Sometimes you will want to add a class to a field based on that field's value (positive/negative money value, true/false, etc).  In these cases, you can define <code>valueClassFn</code> or <code>valueInnerClassFn</code> on the field:</p> <div class="language-javascript extra-class"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">EXAMPLE_MODEL_FIELDS</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">balance</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">FieldNumber</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'Balance'</span><span class="token punctuation">,</span>
    <span class="token function-variable function">desktopValueInnerClassFn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> value <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">'text-green-500'</span> <span class="token operator">:</span> <span class="token string">'text-red-600'</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="different-classes-for-desktop-and-mobile"><a href="#different-classes-for-desktop-and-mobile" class="header-anchor">#</a> Different classes for desktop and mobile</h3> <p>Fields will frequently require different styles for display on desktop or mobile mode.  For example, the built-in <a href="/docs/ui/styling-components/#datatable">DataTable component</a> displays tables horizontally in desktop mode, and vertically in mobile mode.  Centering a field label in mobile mode would look out of place.  In order to create a field with different styles in different modes, you can just define those classes when defining the field:</p> <div class="language-javascript extra-class"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">EXAMPLE_MODEL_FIELDS</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">approved</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">FieldBoolean</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'Approved'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">desktopValueClasses</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'text-center'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">mobileValueClasses</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'text-right'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token function-variable function">valueClassFn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> value <span class="token operator">?</span> <span class="token string">'text-green-600'</span> <span class="token operator">:</span> <span class="token string">'text-red-500'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>Then, when creating the template to display this field, use <a href="https://tailwindcss.com/docs/responsive-design" target="_blank" rel="noopener noreferrer">Tailwind's responsive design utilities<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> to selectively hide and show the differently-styled sections:</p> <div class="language-html extra-class"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>w-3/5 hidden sm:table<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>key in Object.keys(EXAMPLE_MODEL_FIELDS)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>example.valueClasses(key, { desktop: true })<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      {{ example.value(key) }}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>w-full m-1 table sm:hidden<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>key in Object.keys(EXAMPLE_MODEL_FIELDS)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>example.valueClasses(key, { mobile: true })<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      {{ example.value(key) }}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3 id="list-of-field-types"><a href="#list-of-field-types" class="header-anchor">#</a> List of Field types</h3> <p>The following fields come with Nodewood, but you can create your own by extending <code>{ FieldDisplay }</code> in <code>#lib/Fields</code>.</p> <h4 id="fieldstring"><a href="#fieldstring" class="header-anchor">#</a> FieldString</h4> <p>The simplest of fields, FieldString displays the field without any modification or formatting.</p> <p>Code:</p> <div class="language-javascript extra-class"><pre class="language-javascript"><code><span class="token keyword">const</span> address <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FieldString</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'Address'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>address<span class="token punctuation">.</span><span class="token function">label</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>address<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string">'55 West St'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Output:</p> <div class="language- extra-class"><pre class="language-text"><code>Address: 55 West St
</code></pre></div><h4 id="fieldnumber"><a href="#fieldnumber" class="header-anchor">#</a> FieldNumber</h4> <p>The Number field uses the <a href="https://numbrojs.com/format.html" target="_blank" rel="noopener noreferrer">Numbro<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> library to format the provided value as a number.</p> <p>Code:</p> <div class="language-javascript extra-class"><pre class="language-javascript"><code><span class="token keyword">const</span> price <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FieldNumber</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'Price'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">numberFormat</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">thousandSeparated</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">mantissa</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> day <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FieldNumber</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'Day'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">numberFormat</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token string">&quot;ordinal&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>price<span class="token punctuation">.</span><span class="token function">label</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: $</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>price<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token number">5555.5</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>day<span class="token punctuation">.</span><span class="token function">label</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>day<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Output:</p> <div class="language- extra-class"><pre class="language-text"><code>Price: $5,555.50
Day: 2nd
</code></pre></div><h4 id="fieldboolean"><a href="#fieldboolean" class="header-anchor">#</a> FieldBoolean</h4> <p>Use a Boolean field when you have a value that is either true or false, exclusively.  The default text for the value is 'Yes' and 'No', but that can be customized.</p> <p>Code:</p> <div class="language-javascript extra-class"><pre class="language-javascript"><code><span class="token keyword">const</span> enabled <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FieldBoolean</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'Enabled'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">trueValue</span><span class="token operator">:</span> <span class="token string">'Indeed'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">falseValue</span><span class="token operator">:</span> <span class="token string">'Negatory'</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>enabled<span class="token punctuation">.</span><span class="token function">label</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>enabled<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Isn't </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>enabled<span class="token punctuation">.</span><span class="token function">label</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>enabled<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Output:</p> <div class="language- extra-class"><pre class="language-text"><code>Is Enabled: Indeed
Isn't Enabled: Negatory
</code></pre></div><h4 id="fielddate"><a href="#fielddate" class="header-anchor">#</a> FieldDate</h4> <p>The Date field uses the <a href="https://momentjs.com/docs/#/displaying/format" target="_blank" rel="noopener noreferrer">Moment<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> library to format the provided value as a date.  You can also specify the value you wish to display if a date is optional and no date has been specified.</p> <p>Code:</p> <div class="language-javascript extra-class"><pre class="language-javascript"><code><span class="token keyword">const</span> openingNight <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FieldDate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'Opening Night'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">dateFormat</span><span class="token operator">:</span> <span class="token string">'MMMM Do YYYY, h:mm:ss a'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">nullValue</span><span class="token operator">:</span> <span class="token string">'Not Scheduled'</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hamilton </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>openingNight<span class="token punctuation">.</span><span class="token function">label</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>openingNight<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string">'2015-08-06 20:30:00'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Cats - The Return </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>openingNight<span class="token punctuation">.</span><span class="token function">label</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>openingNight<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Output:</p> <div class="language- extra-class"><pre class="language-text"><code>Hamilton Opening Night: August 6th 2015, 8:30 pm
Cats - The Return Opening Night: Not Scheduled
</code></pre></div><h4 id="fieldenum"><a href="#fieldenum" class="header-anchor">#</a> FieldEnum</h4> <p>Enum fields are like super-powered booleans.  However, instead of two defined values, Enums can translate a list of values to a corresponding list of display values.</p> <p>Code:</p> <div class="language-javascript extra-class"><pre class="language-javascript"><code><span class="token keyword">const</span> role <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FieldEnum</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'Role'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">enumList</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">'leader'</span><span class="token operator">:</span> <span class="token string">'Team Leader'</span><span class="token punctuation">,</span>
    <span class="token string-property property">'member'</span><span class="token operator">:</span> <span class="token string">'Team Member'</span><span class="token punctuation">,</span>
    <span class="token string-property property">'w+m1'</span><span class="token operator">:</span> <span class="token string">'Team Fortress 2'</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">desktopValueInnerClasses</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'text-center'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Miyamoto's </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>role<span class="token punctuation">.</span><span class="token function">label</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>role<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string">'leader'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Dave's </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>role<span class="token punctuation">.</span><span class="token function">label</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>role<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string">'member'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Pyro's </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>role<span class="token punctuation">.</span><span class="token function">label</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>role<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string">'w+m1'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Output:</p> <div class="language- extra-class"><pre class="language-text"><code>Miyamoto's Role: Team Leader
Dave's Role: Team Member
Pyro's Role: Team Fortress 2
</code></pre></div><h4 id="fieldemail"><a href="#fieldemail" class="header-anchor">#</a> FieldEmail</h4> <p>Email fields allow you to display email addresses as links prepended with <code>mailto:</code>.  For example, the <code>email</code> field in the <code>UserModel</code> is now a <code>FieldEmail</code> field, making it easy to quickly fire off an email to a user you need to contact.</p> <p>This field sets <code>isHtml</code> to true by default so that the field can properly display HTML output.</p> <p>Code:</p> <div class="language-javascript extra-class"><pre class="language-javascript"><code><span class="token keyword">const</span> email <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FieldEmail</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'Email'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>email<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string">'hello@email.com'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Output:</p> <div class="language- extra-class"><pre class="language-text"><code>&lt;a href=&quot;mailto:hello@email.com&quot;&gt;hello@email.com&lt;/value&gt;
</code></pre></div></div> <footer class="page-edit"><!----> <!----></footer> <div class="page-nav"><p class="inner"><span class="prev">
      ←
      <a href="/docs/architecture/features/" class="prev">
        Feature-based Development
      </a></span> <span class="next"><a href="/docs/architecture/validators/">
        Validators
      </a>
      →
    </span></p></div> </main></div><div class="global-ui"></div></div>
    <script src="/assets/js/app.2c5c8431.js" defer></script><script src="/assets/js/3.97560a66.js" defer></script><script src="/assets/js/29.7d3717f8.js" defer></script>
  </body>
</html>
