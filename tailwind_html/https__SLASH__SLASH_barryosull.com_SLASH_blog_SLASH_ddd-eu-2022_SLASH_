<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<meta http-equiv="X-UA-Compatible" content="ie=edge" />
<title>
    Legacy Web App Specialist</title>
<meta name="description" content="" />
<meta name="keywords" content="" />
<meta name="author" content="Barry O'Sullivan" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css" integrity="sha512-wnea99uKIC3TJF7v4eKk4Y+lMz2Mklv18+r4na2Gn1abDRPPOeef95xTzdwGD9e6zXJBteMIhZ1+68QC5byJZw==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<link rel="stylesheet" href="https://unpkg.com/@tailwindcss/typography@0.2.x/dist/typography.min.css"/>
<link rel="stylesheet" href="https://unpkg.com/prismjs@1.23.0/themes/prism-okaidia.css" />

<!--Replace with your tailwind.css once created-->
<link href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:400,700" rel="stylesheet" />

<style>
    .gradient {
        background: linear-gradient(90deg, #d56c33 0%, #ffd658 100%);
    }

    #header.gradient .logo {
        filter:invert();
    }

    table {
        margin: 10px 0;
    }

    table th, table td {
        text-align: left;
        border-bottom: 1px solid #ddd;
        padding: 2px 4px;
    }

    .entry-content img {
        display: block;
        margin: 0 auto;
    }

</style>
</head>
<body class="leading-normal tracking-normal text-white gradient" style="font-family: 'Source Sans Pro', sans-serif;">
<!--Nav-->
<nav id="header" class="fixed w-full z-30 top-0 text-white gradient">
    <div class="w-full container mx-auto flex flex-wrap items-center justify-between mt-0 py-2">
        <div class="pl-4 flex items-center">
            <a class="toggleColour text-white no-underline hover:no-underline font-bold text-2xl lg:text-4xl" href="/">
                <img alt="logo" class="logo h-8 fill-current inline" src="/images/icon.svg"/>
                Barry O'Sullivan
            </a>
        </div>
        <div class="block lg:hidden pr-4">
            <button id="nav-toggle" class="flex items-center p-1 text-pink-800 hover:text-gray-900 focus:outline-none focus:shadow-outline transform transition hover:scale-105 duration-300 ease-in-out">
                <svg class="fill-current h-6 w-6" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                    <title>Menu</title>
                    <path d="M0 3h20v2H0V3zm0 6h20v2H0V9zm0 6h20v2H0v-2z" />
                </svg>
            </button>
        </div>
        <div class="w-full flex-grow lg:flex lg:items-center lg:w-auto hidden mt-2 lg:mt-0 bg-white lg:bg-transparent text-black p-4 lg:p-0 z-20" id="nav-content">
            <ul class="list-reset lg:flex justify-end flex-1 items-center">
                <li class="mr-3">
                    <a class="inline-block text-black no-underline hover:text-gray-800 hover:text-underline py-2 px-4" href="/blog">Blog</a>
                </li>
                <li class="mr-3">
                    <a class="inline-block text-black no-underline hover:text-gray-800 hover:text-underline py-2 px-4" href="/talks">Talks</a>
                </li>
                <li class="mr-3">
                    <a class="inline-block text-black no-underline hover:text-gray-800 hover:text-underline py-2 px-4" href="/cv">CV</a>
                </li>
                <li class="mr-3">
                    <a class="inline-block text-black no-underline hover:text-gray-800 hover:text-underline py-2 px-4" href="https://github.com/barryosull">Github</a>
                </li>
                <li class="mr-3">
                    <a class="inline-block text-black no-underline hover:text-gray-800 hover:text-underline py-2 px-4" href="https://twitter.com/barryosull">Twitter</a>
                </li>
                <li class="mr-3">
                    <a class="inline-block text-black no-underline hover:text-gray-800 hover:text-underline py-2 px-4" href="https://www.linkedin.com/in/barryosu/">LinkedIn</a>
                </li>
            </ul>
            <button
                    id="navAction"
                    class="mx-auto lg:mx-0 hover:underline bg-white text-gray-800 font-bold rounded-full mt-4 lg:mt-0 py-4 px-8 shadow opacity-75 focus:outline-none focus:shadow-outline transform transition hover:scale-105 duration-300 ease-in-out"
                    onclick="location.href='mailto:barry@tercet.io';"
            >
                Contact me
            </button>
        </div>
    </div>
    <hr class="border-b border-gray-100 opacity-25 my-0 py-0" />
</nav>

<section class="bg-white border-b pt-8 lg:pt-16 pb-8">
    <div class="container max-w-5xl mx-auto m-8">
        <div class="text-black m-2">
            <article class="article">
                <header>
                                            <div style="padding-top: 42%; background-size: cover; background-color:#e3dac6;background-image:url(https://res.cloudinary.com/value-object/image/upload/t_opengraph/v1615494785/landingpage/DDDEU-landing-hero.png)"></div>
                    
                    <h1 class="text-3xl font-bold mt-9 mb-6">DDD EU 2022</h1>

                </header>
                <div class="entry-content prose" style="max-width: max-content">
                    <p>Here are my notes from <a href="https://2022.dddeurope.com/schedule/">DDD EU 2022</a>. It was a great conference this year with a focus on models, growth, managing complexity and dealing with legacy.</p>
<p>Will definitely review these notes in the near future and see how I can apply them to my work day to day.</p>
<h2>Opening Keynote</h2>
<p>Speakers:</p>
<ul>
<li>Andrew Harmel-Law</li>
<li>Diana Montalion</li>
<li>Mike Rozinsky</li>
<li>Gayathri Thiyagarajan</li>
</ul>
<p><strong>The advice process:</strong></p>
<ol>
<li>When working on something, get advice from two groups:
<ol>
<li>Those affected by the decision</li>
<li>Experts in the area</li>
</ol></li>
<li>Then it's up to you to decide</li>
</ol>
<p>The goal is to free up decision bottlenecks from making decisions and to democratise architecture.</p>
<p>No checks, no barriers, whatever you decide goes.</p>
<p>&quot;Lead by example&quot; vs &quot;exert control&quot;.</p>
<p>Discussed amongst ourselves: Would this work or fail? Why?</p>
<p>We realised that most of us already followed this process to some degree. The more senior someone is, the more they would seek advice but ultimately the decision would be theirs.</p>
<p>A great mindset for growing self reliance and independence, a bad mindset for those used to a standard tayloristist model, i.e. &quot;I decide, you do&quot;.</p>
<p>Would involce a junior being able to release whatever they want without review, however, they would have the choice to wait for an approval before release.</p>
<p>Kind of breaks the PR approval process, must have a review beforehand, but given the nature of PRs, if the PR is the first time someone is seeing the concept, then they're not likely to spot bugs anyway.</p>
<p>Requires trust and psychological safety.</p>
<h2>Residulaity theory</h2>
<p>Speaker: Barry O'Reilly</p>
<p>Software is Ordered (predicable, static)
Business processes and people are disordered (unpredicable, adaptive)</p>
<p>The focus os this theory is on the software side,</p>
<p>Where did this talk come from?</p>
<ol>
<li>Some architects consistently design systems that can handle unknown stressors
<ul>
<li>I.e. they build resiliant systems</li>
</ul></li>
<li>Overall industry success rate of building resiliant systems is 17%</li>
</ol>
<p>What are these architects doing that others aren't?</p>
<p>We can handle some of the known unknowns, but those aren't what breaks your system, it's the unknown unknowns that getcha.</p>
<p>Figure out the knowns and known unknowns:</p>
<p>Requirements gathering is like throwing darts at a wall with a circle somewhere in it.</p>
<ul>
<li>Sometimes we hit the circle and that's requirement for change</li>
<li>Other times we hit outside and that's something that should stay the same</li>
</ul>
<p>I.e. a random simulation of the environment =&gt; requirement gathering</p>
<p>Every system has attractors, be these for success paths or failure paths</p>
<ul>
<li>See chaos theory</li>
</ul>
<p>We design systems areound happy path attractors and ignore failure path attractors</p>
<p>No wonder our systems are brittle</p>
<p>A connected network has square root of N boolean states</p>
<p>Kauffman networks: NKp
N = Nodes
K = Connection count
p = ... I'll get back to you on that one</p>
<p>We need to make the simulation more random</p>
<p>Residue: What's left over when a stressor breaks a system</p>
<p>Building a resiliant system steps:</p>
<ol>
<li>Map out what parts of your system work and what breaks under a stressor</li>
<li>Build up a map of residues for different stressors and attractors</li>
<li>Try to merge and build a system that can handle all</li>
</ol>
<p>Handling one stressor tends to handle many due to nature of attractors</p>
<p>There is coupling we cannot see until a stressor affects a system
This coupling is called &quot;Hyperliminal coupling&quot;</p>
<p>Testing your resiliancy:</p>
<ol>
<li>Take a naive system (N)</li>
<li>Create a stressor list</li>
<li>Use half to create residues and design a robust system (R)
<ul>
<li>Dont need to build it just yet</li>
</ul></li>
<li>Use other half to verify if system R can handle stressors better than N</li>
</ol>
<p>Equation:</p>
<p>R = Residue count
X = New stressors handled by N
Y = New stressors handled by R</p>
<pre><code>      Y - X
Ri = -------
        S</code></pre>
<p>Ri &gt; 0 = System can handle the unknown</p>
<p>This is called residual analysis</p>
<p>Important caveat: Only works for software, not suitable for organisations and people.</p>
<p>Speaker has a PHD based on this very topic</p>
<h2>DDD at Scale</h2>
<p>Speaker: Xin Yao
<a href="https://speakerdeck.com/xinyaodk/domain-driven-architecture-at-scale-ddd-eu-2022">https://speakerdeck.com/xinyaodk/domain-driven-architecture-at-scale-ddd-eu-2022</a></p>
<p>Chief Architect at Deutsch Bank (I think)</p>
<p>They spotified and inverse conwayed</p>
<p>Issues withg compounding complexity:</p>
<ul>
<li>Reshuffled teams</li>
<li>Complex domains</li>
<li>Legacy systemns</li>
</ul>
<p>Noticed a recurring problem due to self organised teams
They'd optimised the parts (teams) not the connectons (relationships)</p>
<pre><code>    (t)   &lt;--- Good :)
   /   \
  /     \ &lt;--- Bad :(
(t)     (t)</code></pre>
<p>Alignment does not necessarily bring coherence </p>
<p>Common purpose can be an invisible leader</p>
<p>Value Bets:     </p>
<ul>
<li>North Star </li>
<li>Inputs    </li>
</ul>
<p>Works Bets:</p>
<ul>
<li>Opportunities</li>
<li>Implementations</li>
</ul>
<p>Value bets are strategic and high level</p>
<p>(This is their own language for describing this process)</p>
<p>Basically a hierarchy:
North Star =&gt; Inputs =&gt; Opportunities =&gt; Implementations</p>
<p>Involves implementors in North Start and Inputs collection</p>
<p>Opportunities are solution agnostic</p>
<p>Software at Scale suffers from temporal anomalies:</p>
<ul>
<li>Language drifts</li>
<li>Models fragement</li>
</ul>
<p>When strategising think of your vision of the future through a future cone.</p>
<p>We can see the proable, plausible and the maybe</p>
<p>Strategic goal:
Can we improve our odds of deciding and acting with better correspondance to an emergent reality?</p>
<p>Revenge of Conways law:</p>
<ul>
<li>Shipping org charts</li>
<li>Empowerment not helping</li>
</ul>
<p>Problem: Teams have different initiatives affecting the same solution space
Result: No collaboration</p>
<p>Goal: How do we add our change with reducing optionality for other teams operating in the solution space?</p>
<p>Being a maker is a multplier</p>
<ul>
<li>We can improve things and increase momentum</li>
</ul>
<h2>Functional Aggregate Design</h2>
<p>Speaker:  Thomas Ploch
<a href="https://slides.com/tploch/what-is-a-ddd-aggregate">https://slides.com/tploch/what-is-a-ddd-aggregate</a></p>
<p>Process theorises why something happens
Variant theorises how something happens</p>
<p>Process is temporal
Variant is state based</p>
<p>Four types of process theory:</p>
<ol>
<li>Evolution: Change through time</li>
<li>Dialectic: How power shifts and causes change (e.g. politics)</li>
<li>Telelogical: Plan of action</li>
<li>Lifecycle: End state and how to get there</li>
</ol>
<p>Aggregates are experiments into implementing a process theory</p>
<p>State machines have limitiations:</p>
<ul>
<li>No parallel processing per aggregate instance (sync)</li>
<li>Does not support random ordering of messages</li>
</ul>
<p>Transducer (new term) take state and output events</p>
<p>Types of objects:</p>
<ul>
<li>Commands</li>
<li>Behaviour</li>
<li>Invariants</li>
<li>Events</li>
<li>Policies</li>
</ul>
<h2>Distributed Pain</h2>
<p>Speakers:</p>
<ul>
<li>Sara Pellegrini</li>
<li>Milan Savić</li>
</ul>
<p>Mostly a talk on async messaging problems and strategies.</p>
<p>Avoid building a distributed system for as long as you can, they open up many can of worms.</p>
<p>Discussed various techniques:</p>
<ul>
<li>Retry</li>
<li>Circuit Breaker</li>
<li>Idempotence
<ul>
<li>Command ID when theres no aggregates</li>
</ul></li>
</ul>
<p>Most of this is already written in patterns around distributed systems, talk is more of primer in the concepts.</p>
<p>Two types of solution:</p>
<ol>
<li>Technical</li>
<li>Design</li>
</ol>
<p>Design is the best place to fix, if you can design your system so the problem doesn't exist then you're in a better position.</p>
<p>Be evolution ready:</p>
<ul>
<li>Stay responsive</li>
<li>Accept responsibility</li>
<li>Embrace failures</li>
</ul>
<h2>Critically Interacting with Models</h2>
<p>Speakers:</p>
<ul>
<li>Mathias Verraes</li>
<li>Rebecca Wirfs-Brock</li>
</ul>
<p>Take three business models:</p>
<ol>
<li>
<p>Hierarchical</p>
<pre><code>__|__
_|_   _|_
| | | | | |</code></pre>
</li>
<li>
<p>Social Network</p>
<pre><code>(1)---(2)-(3)---(4)
/       \ /
(5)       (6)---(7)</code></pre>
</li>
<li>
<p>Value creation</p>
<pre><code>[Work] =&gt; €€€</code></pre>
</li>
</ol>
<p>All three have different belief systems and are potentially imcompatible.</p>
<ol>
<li>Hierarchical believes that top down is the ideal structure for how decisions are made</li>
<li>Social networks believe that talking fluidly and empowering individuals leads to better systems</li>
<li>Value creation believes that value creation is king and everthing else is in service</li>
</ol>
<p>All models have belief systems. When incorporating different models watch for inconsistencies and address them.</p>
<p>The status quo is that adopted models are assimilated without much thought
Examples: Agile, Scrum, Safe, Lean, etc...</p>
<p>Models mess with you, we start thinking of the models as reality and not, well, a model that's missing details</p>
<p>There's no such thing as a pure model, no such thing as a pure abstraction.</p>
<p>Heuristics:</p>
<ul>
<li>Compare models to figure out what each adds or omits, emphasises or downplays</li>
<li>Does it address or solve problems you are interested in</li>
</ul>
<p>Switching between org models comes with risks
Beware of reorganisation fatigue!</p>
<p>Avoid Model Fitting: </p>
<ul>
<li>Trying to generalise two models is often a bad idea</li>
<li>It always feels possible, but you often lose key details that makes the models unique
<ul>
<li>I.e. you strip the models of the very things that make them useful</li>
</ul></li>
</ul>
<p>If you care about something have a building block for it</p>
<p>Steps for working critically with models:</p>
<ol>
<li>Scrutinize multiple models</li>
<li>Adapt the model to your context
<ul>
<li>Requires a redesign, not just a nudge</li>
</ul></li>
<li>Gather feedback and reshape</li>
</ol>
<h2>Fractal Geometry of Software Design</h2>
<p>Speaker: Vladik Khononov
<a href="https://speakerdeck.com/vladikk/fractal-geometry-of-software-design">https://speakerdeck.com/vladikk/fractal-geometry-of-software-design</a></p>
<p>Energy supply systems are the foundation for all growing systems, be they organic or artificial</p>
<p>These are systems sustained through energy supplying a hierarchical network
E.g.</p>
<ul>
<li>Bodies</li>
<li>Cities</li>
<li>Companies</li>
<li>Trees</li>
</ul>
<p>There is a direct correlation between size and energy consistent across systems</p>
<p>Energy is abstract and depends on the context.</p>
<p>Knowledge is the energy supply of software design.</p>
<p>Four types of knowledge coupling:</p>
<ol>
<li>Implementation: Not intended for inter component intergration</li>
<li>Functional: Business logic, use-cases</li>
<li>Model: Data structures, core components of functional</li>
<li>Contract: APIs</li>
</ol>
<p>In energy systems growth is not linear, systems usually get more efficient as they grow</p>
<p>This is called sub-linear growth
E.g.</p>
<ul>
<li>Metabolic rate by mass
<ul>
<li>Energy requirement grows slower than size</li>
</ul></li>
</ul>
<p>Systems also have super linear grwoth, were growth takes more energy each time</p>
<p>Very few systems have linear growth between size and energy, most are sub linear or super linear</p>
<p>Growth increases the efficiency of all systems, whether they're beneficial or not</p>
<p>In software this manifests as:</p>
<ol>
<li>Components (modules) grow sub linearly</li>
<li>Connections between components grow super linearly (complexity)</li>
</ol>
<p>NB: Cognitive load limit is static, no growth</p>
<p>Once knowledge complexity surpases cognitive load we can no longer understnad the system and change risk increases super linearly</p>
<p>Most energy systems follow fractcal topolology networks
I.e. there is self similarity between the different levels of the system</p>
<p>Also called the &quot;Self similarity principle&quot;</p>
<p>Key examples:</p>
<ul>
<li>City roads</li>
<li>Tree</li>
<li>Vascular system</li>
</ul>
<p>Strenth (S) is the amount of shared knowledge
Cost of change is proportional to the Distance (D) between components</p>
<p>Low Distance x Low Stength = Low complexity
High Distance x Low Stength = Loose coupling
Low Distance x High Stength = High cohesion
High Distance x High Stength = Global complexity</p>
<p>The last one is obviously bad and massively increases cognitive load, that's why we avoid it</p>
<p>Expressed as an equations: M = S^D</p>
<p>High strength should have low distance</p>
<ul>
<li>aggregate or module</li>
<li>High cohesion</li>
</ul>
<p>Low strength should have high distance</p>
<ul>
<li>System to system
<ul>
<li>Bounded content to bounded context</li>
</ul></li>
<li>Low coupling</li>
</ul>
<h2>How Complex Software Impacts Cognitive Load</h2>
<p>Speaker: Corstian Boerman</p>
<p>Cognitive ability:</p>
<ul>
<li>Senses</li>
<li>Thoughts</li>
<li>Experiences</li>
</ul>
<p>Mental wellbeing is the no.1 priority ✙</p>
<p>For a system to function it must accomodate the weakess link in the chain
O-O-O-O-O-o-O</p>
<p>Rights cannot exist without responsibility</p>
<p>Surplus of cognitive capacity improves resiliance</p>
<p>A system running at maximum efficiancy cannot handle change, it will implode</p>
<p>Expections &gt; Abilities = Burnout</p>
<ul>
<li>Overtime this will decrease cognitive ability
<ul>
<li>Positive feedback loop can occur further destroying it</li>
</ul></li>
</ul>
<p>Cognitive depletion is an occupational hazard</p>
<p>How to handle it:</p>
<ol>
<li>Recude code complexity</li>
<li>Recude cognitive load</li>
</ol>
<h2>Closing keynote</h2>
<p>Speakers:</p>
<ul>
<li>Indu Alagarsamy</li>
<li>Olivia Cheng</li>
</ul>
<p>When system complexity bleeds over we lose site of the user, get stuck focussing in the details</p>
<p>We need to center the uner in everything we build, it exists to serve their needs, no matter how far away</p>
<p>If it's not solving a problem for the user then it's not worth it.</p>
<p>We don't build resiliant system for fun, we do it to enable customer success.</p>
<hr />
<p>I also spoke at DDD EU this year on Using Test Pain as a Design Guide. I don't have notes for that talk, since that would just be the script I wrote for it. :D</p>
<p>Here are the slides though incase you're interested, it got some very positive feedback: <a href="https://slides.com/barryosull/using-test-pain-as-a-design-guide-c930e9">https://slides.com/barryosull/using-test-pain-as-a-design-guide-c930e9</a></p>                </div>
                <a class="float-right text-white bg-blue-500 border rounded p-3 pt-1 pb-1 hover:bg-blue-400" href="https://twitter.com/intent/tweet?text=DDD EU 2022&url=http%3A%2F%2Fbarryosull.com%2Fblog%2Fddd-eu-2022&via=barryosull" class="twitter-share-button" data-size="large" data-show-count="false">Tweet</a>
                <div class="clear"></div>
            </article>
        </div>
    </div>
</section>

<script src="/themes/kiss/js/prism.js"></script>
<svg class="wave-top" viewBox="0 0 1439 147" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <g transform="translate(-1.000000, -14.000000)" fill-rule="nonzero">
            <g class="wave" fill="#f8fafc">
                <path
                        d="M1440,84 C1383.555,64.3 1342.555,51.3 1317,45 C1259.5,30.824 1206.707,25.526 1169,22 C1129.711,18.326 1044.426,18.475 980,22 C954.25,23.409 922.25,26.742 884,32 C845.122,37.787 818.455,42.121 804,45 C776.833,50.41 728.136,61.77 713,65 C660.023,76.309 621.544,87.729 584,94 C517.525,105.104 484.525,106.438 429,108 C379.49,106.484 342.823,104.484 319,102 C278.571,97.783 231.737,88.736 205,84 C154.629,75.076 86.296,57.743 0,32 L0,0 L1440,0 L1440,84 Z"
                ></path>
            </g>
            <g transform="translate(1.000000, 15.000000)" fill="#FFFFFF">
                <g transform="translate(719.500000, 68.500000) rotate(-180.000000) translate(-719.500000, -68.500000) ">
                    <path d="M0,0 C90.7283404,0.927527913 147.912752,27.187927 291.910178,59.9119003 C387.908462,81.7278826 543.605069,89.334785 759,82.7326078 C469.336065,156.254352 216.336065,153.6679 0,74.9732496" opacity="0.100000001"></path>
                    <path
                            d="M100,104.708498 C277.413333,72.2345949 426.147877,52.5246657 546.203633,45.5787101 C666.259389,38.6327546 810.524845,41.7979068 979,55.0741668 C931.069965,56.122511 810.303266,74.8455141 616.699903,111.243176 C423.096539,147.640838 250.863238,145.462612 100,104.708498 Z"
                            opacity="0.100000001"
                    ></path>
                    <path d="M1046,51.6521276 C1130.83045,29.328812 1279.08318,17.607883 1439,40.1656806 L1439,120 C1271.17211,77.9435312 1140.17211,55.1609071 1046,51.6521276 Z" opacity="0.200000003"></path>
                </g>
            </g>
        </g>
    </g>
</svg>
<section class="container mx-auto text-center py-6 mb-12">
    <h1 class="w-full my-2 text-5xl font-bold leading-tight text-center text-white">
        Expert help
    </h1>
    <div class="w-full mb-4">
        <div class="h-1 mx-auto bg-white w-1/6 opacity-25 my-0 py-0 rounded-t"></div>
    </div>
    <h3 class="my-4 text-3xl leading-tight">
        Have a codebase where change is expensive and risky?
    </h3>
    <button
            class="mx-auto lg:mx-0 hover:underline bg-white text-gray-800 font-bold rounded-full my-6 py-4 px-8 shadow-lg focus:outline-none focus:shadow-outline transform transition hover:scale-105 duration-300 ease-in-out"
            onclick="location.href='mailto:barry@tercet.io';"
    >
        Contact Me
    </button>
</section>
<!--Footer-->
<footer class="bg-white">
    <div class="container mx-auto px-8">
        <div class="w-full flex flex-col md:flex-row py-3">
            <div class="flex-3 text-black">
                <a class="no-underline hover:no-underline font-bold text-xl lg:text-2xl" href="/">
                    <img alt="logo" class="h-8 fill-current inline" src="/images/icon.svg"/>
                    Barry O'Sullivan
                </a>
            </div>
        </div>
    </div>
</footer>

<script>
    var scrollpos = window.scrollY;
    var header = document.getElementById("header");
    var navcontent = document.getElementById("nav-content");
    var navaction = document.getElementById("navAction");
    var brandname = document.getElementById("brandname");
    var toToggle = document.querySelectorAll(".toggleColour");

    document.addEventListener("scroll", updateHeader);
    updateHeader();

    function updateHeader()
    {
        scrollpos = window.scrollY;
        if (scrollpos > 10) {
            enableWhiteHeader();
        } else {
            enableColouredHeader();
        }
    }

    function enableWhiteHeader()
    {
        header.classList.add("bg-white");
        header.classList.remove("gradient");
        navaction.classList.remove("bg-white");
        navaction.classList.add("gradient");
        navaction.classList.remove("text-gray-800");
        navaction.classList.add("text-white");
        //Use to switch toggleColour colours
        for (var i = 0; i < toToggle.length; i++) {
            toToggle[i].classList.add("text-gray-800");
            toToggle[i].classList.remove("text-white");
        }
        header.classList.add("shadow");
        navcontent.classList.remove("bg-gray-100");
        navcontent.classList.add("bg-white");
    }

    function enableColouredHeader()
    {
        header.classList.add("gradient");
        header.classList.remove("bg-white");
        navaction.classList.remove("gradient");
        navaction.classList.add("bg-white");
        navaction.classList.remove("text-white");
        navaction.classList.add("text-gray-800");
        //Use to switch toggleColour colours
        for (var i = 0; i < toToggle.length; i++) {
            toToggle[i].classList.add("text-white");
            toToggle[i].classList.remove("text-gray-800");
        }

        header.classList.remove("shadow");
        navcontent.classList.remove("bg-white");
        navcontent.classList.add("bg-gray-100");
    }

</script>
<script>

    var navMenuDiv = document.getElementById("nav-content");
    var navMenu = document.getElementById("nav-toggle");

    document.onclick = toggleMenu;

    function toggleMenu(e) {
        var target = (e && e.target) || (event && event.srcElement);

        if (checkParent(target, navMenuDiv)) {
            return;
        }

        if (checkParent(target, navMenu)) {
            if (navMenuDiv.classList.contains("hidden")) {
                navMenuDiv.classList.remove("hidden");
            } else {
                navMenuDiv.classList.add("hidden");
            }
            return;
        }

        navMenuDiv.classList.add("hidden");
    }

    function checkParent(t, elm) {
        while (t.parentNode) {
            if (t === elm) {
                return true;
            }
            t = t.parentNode;
        }
        return false;
    }

</script>

<script src="https://unpkg.com/prismjs@1.23.0/components/prism-core.min.js"></script>
<script src="https://unpkg.com/prismjs@1.23.0/plugins/autoloader/prism-autoloader.min.js"></script>

</body>
</html>
