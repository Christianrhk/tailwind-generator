<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>/var/</title><link href="https://www.spapas.net/" rel="alternate"></link><link href="https://www.spapas.net/feeds/all.atom.xml" rel="self"></link><id>https://www.spapas.net/</id><updated>2022-06-28T12:20:00+03:00</updated><subtitle>Various programming stuff</subtitle><entry><title>Better DjangoÂ inlines</title><link href="https://www.spapas.net/2022/06/28/better-django-inlines/" rel="alternate"></link><published>2022-06-28T12:20:00+03:00</published><updated>2022-06-28T12:20:00+03:00</updated><author><name>Serafeim Papastefanos</name></author><id>tag:www.spapas.net,2022-06-28:/2022/06/28/better-django-inlines/</id><summary type="html">&lt;p class="first last"&gt;How to improve our Django&amp;nbsp;inlines&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Django has a feature called &lt;em&gt;inlines&lt;/em&gt; which can be used to edit multiple related
objects at once. You&amp;#8217;ll get a single view that will contain a single html form that
includes a different Django form for each object, edit any of them and submit them
all to be&amp;nbsp;saved.&lt;/p&gt;
&lt;p&gt;This feature is heavily used when you have objects that have a parent-child relation
between them. For example, a book and a testimonial for each book. Each testimonial
will belong to a single book and from a &lt;span class="caps"&gt;UX&lt;/span&gt; point of view it seems better to be able
to edit all testimonials for each book at the same&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;The biggest disadvantage of inlines is that, because of how Django works, their
interface is very primitive: For adding new objects, you need to define the number
of empty forms that will be included for each inline. The user can fill them up
and press save. Then the objects will be created and the user will get new empty forms to fill.
To understand this better, let&amp;#8217;s suppose that you have defined 3 empty forms (which is the
default) and the user wants to create 10 inline objects. The flow will&amp;nbsp;be:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The user sees the 3 empty forms and fills them with&amp;nbsp;data.&lt;/li&gt;
&lt;li&gt;The user presses save to &lt;span class="caps"&gt;POST&lt;/span&gt; the&amp;nbsp;data.&lt;/li&gt;
&lt;li&gt;The user sees the 3 new objects and another 3 empty&amp;nbsp;forms.&lt;/li&gt;
&lt;li&gt;The user fills the 3 empty forms with&amp;nbsp;data.&lt;/li&gt;
&lt;li&gt;The user presses save to &lt;span class="caps"&gt;POST&lt;/span&gt; the&amp;nbsp;data.&lt;/li&gt;
&lt;li&gt;The user sees the 6 new objects and another 3 empty&amp;nbsp;forms.&lt;/li&gt;
&lt;li&gt;The user fills the 3 empty forms with&amp;nbsp;data.&lt;/li&gt;
&lt;li&gt;The user presses save to &lt;span class="caps"&gt;POST&lt;/span&gt; the&amp;nbsp;data.&lt;/li&gt;
&lt;li&gt;The user sees the 9 new objects and another 3 empty&amp;nbsp;forms.&lt;/li&gt;
&lt;li&gt;The user fills 1 empty form with&amp;nbsp;data.&lt;/li&gt;
&lt;li&gt;The user presses save to &lt;span class="caps"&gt;POST&lt;/span&gt; the&amp;nbsp;data.&lt;/li&gt;
&lt;li&gt;The user sees the 10 new objects and another 3 empty&amp;nbsp;forms.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you can see the user is filling up the available forms and presses save all the time to get the
new forms to display the objects. This makes the
experience very problematic and confuses users that are not familiar with it. Also, when deleting
objects, the user will see a delete checkbox for each object which needs to select and press save to
actually &lt;em&gt;delete&lt;/em&gt; the object. This is also counter-intuitive because it&amp;#8217;s not easy for the user
to understand that the object will be deleted when he saves the&amp;nbsp;form.&lt;/p&gt;
&lt;p&gt;In this article I&amp;#8217;ll present a way to improve the experience of inlines: We&amp;#8217;ll have a way to add
new inlines without the need to save the form all the time. Also we&amp;#8217;ll be able to improve the
behavior of the delete button so it has a better &lt;span class="caps"&gt;UX&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The work in this article is published in this github repository: &lt;a class="reference external" href="https://github.com/spapas/inlinesample"&gt;https://github.com/spapas/inlinesample&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The project implements a Book model containing multiple testimonials and editions. For each book
you use inlines to add/edit the Book, its testimonials and editions in the same form. Also, I have included
two ways to add/edit a book: Using the traditional django inlines way and using the javascript way I propose&amp;nbsp;here.&lt;/p&gt;
&lt;div class="section" id="models"&gt;
&lt;h2&gt;Models&lt;/h2&gt;
&lt;p&gt;The models used in this project are the&amp;nbsp;following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Edition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CASCADE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;publisher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntegerField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;pages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntegerField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Testimonial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CASCADE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;testimonial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see they are very simple; each edition and testimonial has a foreign key to a&amp;nbsp;book.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="views"&gt;
&lt;h2&gt;Views&lt;/h2&gt;
&lt;p&gt;For the views I&amp;#8217;m going to use the &lt;a class="reference external" href="https://github.com/AndrewIngram/django-extra-views"&gt;django-extra-views&lt;/a&gt; package that provides a bunch of
useful inline-related Class Based&amp;nbsp;Views:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.generic&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ListView&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;extra_views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;CreateWithInlinesView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;UpdateWithInlinesView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;InlineFormSetFactory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BookListView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ListView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Book&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_queryset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_queryset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prefetch_related&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;edition_set&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;testimonial_set&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EditionInline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;InlineFormSetFactory&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Edition&lt;/span&gt;
    &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;publisher&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pages&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;factory_kwargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;extra&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestimonialInline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;InlineFormSetFactory&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Testimonial&lt;/span&gt;
    &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;testimonial&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;factory_kwargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;extra&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BetterMixin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_template_names&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;better&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;books/book_better_form.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_template_names&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_success_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BookCreateView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BetterMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CreateWithInlinesView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Book&lt;/span&gt;
    &lt;span class="n"&gt;inlines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;EditionInline&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TestimonialInline&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BookUpdateView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BetterMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UpdateWithInlinesView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Book&lt;/span&gt;
    &lt;span class="n"&gt;inlines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;EditionInline&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TestimonialInline&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see for starts we add a BookListView that will be mapped to the / &lt;span class="caps"&gt;URL&lt;/span&gt;. This displays a table with all the books
along with links to add a new or edit an existing book using both the traditional and better&amp;nbsp;approach.&lt;/p&gt;
&lt;p&gt;Then we define two classes inheriting from &lt;tt class="docutils literal"&gt;InlineFormSetFactory&lt;/tt&gt;: &lt;tt class="docutils literal"&gt;EditionInline&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;TestimonialInline&lt;/tt&gt;.
These classes define our inlines: We set a model for them, the fields that will be displayed and pass extra parameters
if needed. In this case we pass &lt;tt class="docutils literal"&gt;factory_kwargs = {&amp;quot;extra&amp;quot;: 1}&lt;/tt&gt; to have a single extra form for each inline. If we didn&amp;#8217;t
pass this Django would create 3 extra forms for each inline. Notice that if we were only using the better inlines we&amp;#8217;d pass
0 to the extra parameter since it&amp;#8217;s not really needed here. However because we use the same inlines for both the traditional
and the better inlines I&amp;#8217;m using 1 here (or else we wouldn&amp;#8217;t be able to add new objects on the traditional&amp;nbsp;approach).&lt;/p&gt;
&lt;p&gt;Then we define a &lt;cite&gt;BetterMixin&lt;/cite&gt;; the only thing it does it to return a different html template if the user visits the &lt;em&gt;better&lt;/em&gt;
views and override the get_sucess_url method to return to &amp;#8220;/&amp;#8221;. As you can understand from this, the only difference between the traditional and better approach is the&amp;nbsp;template.&lt;/p&gt;
&lt;p&gt;Finally, we&amp;#8217;ve got two views for adding/editing a new book. We inherit from &lt;tt class="docutils literal"&gt;CreateWithInlinesView&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;UpdateWithInlinesView&lt;/tt&gt;
and set their model, inlines and fields attributes to the correct&amp;nbsp;values.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="traditional-templates"&gt;
&lt;h2&gt;Traditional&amp;nbsp;templates&lt;/h2&gt;
&lt;p&gt;The traditional book_form.html template is like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% extends &amp;quot;base.html&amp;quot; %}
{% load crispy_forms_tags %}
{% block html_title %}Book form{% endblock%}
{% block page_title %}Book form{% endblock%}

{% block content %}
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        {% csrf_token %}
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;card w-full bg-base-100 shadow-xl card-bordered card-compact border border-gray-900&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;card-body&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;card-title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Book&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                {{ form|crispy }}
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        {% include &amp;quot;partials/_inline_set_simple.html&amp;quot; with formset=inlines.0 title=&amp;quot;Editions&amp;quot; %}
        {% include &amp;quot;partials/_inline_set_simple.html&amp;quot; with formset=inlines.1 title=&amp;quot;Testimonials&amp;quot; %}

        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;submit&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;btn bg-blue-600&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Save&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;btn bg-gray-600&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Back&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
{% endblock %}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;#8217;m using tailwind css for the templates. As you can see we get a two important context variables: &lt;tt class="docutils literal"&gt;form&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;inlines&lt;/tt&gt;. The
&lt;tt class="docutils literal"&gt;form&lt;/tt&gt; is the main object form (book) and the &lt;tt class="docutils literal"&gt;inlines&lt;/tt&gt; is the list of inlines (editions and testimonials). Notice that I&amp;#8217;m
using a partial template for each of the inlines to improve re-usability. The &lt;cite&gt;_inline_set_simple.html&lt;/cite&gt; is like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% load crispy_forms_tags %}

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;card w-full bg-base-100 shadow-xl card-bordered card-compact border border-gray-900&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;card-body&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;card-title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{{ title }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    {{ formset.management_form }}
    {% for form in formset %}
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;flex border rounded p-1 m-1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        {% for field in form %}
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;flex-col mx-2 my-2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            {{ field|as_crispy_field }}
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        {% endfor %}
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    {% endfor %}
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This uses the django-crispy-forms package to improve form handling. See
&lt;a class="reference external" href="https://www.spapas.net/2020/03/18/django-crispy-form-quick-easy-layout/"&gt;this article&lt;/a&gt; for a tutorial on using&amp;nbsp;django-crispy-forms.&lt;/p&gt;
&lt;p&gt;Notice that i&amp;#8217;m doing &lt;tt class="docutils literal"&gt;formset=inlines[n]&lt;/tt&gt;, so each inline will have a &lt;tt class="docutils literal"&gt;management_form&lt;/tt&gt; that is
used internally by django and
a bunch of forms (1 for each object). Each form will have the fields we defined for that inline with
the addition of the delete&amp;nbsp;checkbox.&lt;/p&gt;
&lt;p&gt;This is enough to get the basic function. The user will get the following form when adding a new&amp;nbsp;book:&lt;/p&gt;
&lt;img alt="The traditional book form" src="/images/book-form.png" style="width: 640px;" /&gt;
&lt;p&gt;As we already discussed, the user fills the info and presses save if he wants to add more testimonials or&amp;nbsp;editions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="better-templates"&gt;
&lt;h2&gt;Better&amp;nbsp;templates&lt;/h2&gt;
&lt;p&gt;Let&amp;#8217;s now take a peek at the &lt;tt class="docutils literal"&gt;book_better_form.html&lt;/tt&gt; template:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% extends &amp;quot;base.html&amp;quot; %}
{% load crispy_forms_tags static %}
{% block html_title %}Book better form{% endblock%}
{% block page_title %}Book better form{% endblock%}

{% block content %}
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        {% csrf_token %}
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;card w-full bg-base-100 shadow-xl card-bordered card-compact border border-gray-900&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;card-body&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;card-title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Book&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                {{ form|crispy }}
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        {% include &amp;quot;partials/_inline_set.html&amp;quot; with inline_name=&amp;#39;edition_set&amp;#39; inline_title=&amp;quot;Editions&amp;quot; formset=inlines.0 %}
        {% include &amp;quot;partials/_inline_set.html&amp;quot; with inline_name=&amp;#39;testimonial_set&amp;#39; inline_title=&amp;quot;Testimonials&amp;quot; formset=inlines.1 %}

        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;submit&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;btn bg-blue-600&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Save&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;btn bg-gray-600&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Back&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{% static &amp;#39;inline-editor.js&amp;#39; %}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

{% endblock %}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is similar to the &lt;tt class="docutils literal"&gt;book_form.html&lt;/tt&gt; with the following&amp;nbsp;differences:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We include the &lt;tt class="docutils literal"&gt;partials/_inline_set.html&lt;/tt&gt; partial template passing it the inline_name which is used to identify the inline. We also pass it the actual inline formset object and a&amp;nbsp;title.&lt;/li&gt;
&lt;li&gt;We include some custom javascript called &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;inline-editor.js&lt;/span&gt;&lt;/tt&gt; that is used to handle the inline&amp;nbsp;formset.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Notice here that we need to use the &lt;em&gt;correct&lt;/em&gt; inline_name and not whatever we want! Usually it will be &lt;tt class="docutils literal"&gt;child_name_set&lt;/tt&gt; but to be sure
we can easily find it by taking a
peek at the management form django will generate for us (we&amp;#8217;ll see something like &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;testimonial_set-TOTAL_FORMS&lt;/span&gt;&lt;/tt&gt;, so we know that
the name is &lt;tt class="docutils literal"&gt;testimonial_set&lt;/tt&gt;).&lt;/p&gt;
&lt;p&gt;The partial &lt;tt class="docutils literal"&gt;_inline_set.html&lt;/tt&gt; is a little more&amp;nbsp;complex:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;better_inline_{{ inline_name }}&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;card w-full bg-base-100 shadow-xl card-bordered card-compact border border-gray-900&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;card-body&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;card-title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            {{ inline_title }}
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;btn btn-primary&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;button bg-blue-500&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;add-form-{{ inline_name }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Add&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        {% if formset.non_form_errors %}
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;alert alert-danger&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{{ formset.non_form_errors }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        {% endif %}

        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;template&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;empty-form-{{ inline_name }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;flex border border-primary rounded p-1 m-1 inline-form&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                {% for field in formset.empty_form %}
                    {% include &amp;quot;partials/_inline_field.html&amp;quot; %}
                {% endfor %}
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;template&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        {{ formset.management_form }}

        {% for form in formset %}
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;flex border rounded p-1 m-1 inline-form&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                {% for field in form %}
                    {% include &amp;quot;partials/_inline_field.html&amp;quot; %}
                {% endfor %}
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        {% empty %}
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;flex p-1 m-1 inline-form&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        {% endfor %}
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- card body --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- card --&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We use the &lt;tt class="docutils literal"&gt;inline_name&lt;/tt&gt; we passed to generate a unique id for this inline to reference it in the javascript. Then
we have an add new form button. We also add an empty form template that we&amp;#8217;ll use to copy over when adding a new form.
The &lt;tt class="docutils literal"&gt;formset.empty_form&lt;/tt&gt; is generated by django. After we include the &lt;tt class="docutils literal"&gt;management_form&lt;/tt&gt; we enumerate the forms using
a for loop. Notice the empty div &lt;tt class="docutils literal"&gt;&amp;lt;div &lt;span class="pre"&gt;class='flex&lt;/span&gt; &lt;span class="pre"&gt;p-1&lt;/span&gt; &lt;span class="pre"&gt;m-1&lt;/span&gt; &lt;span class="pre"&gt;inline-form'&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/tt&gt; when there are no forms, we need that
to help us position the place of the forms to be added as will be explained later. The same &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;inline-form&lt;/span&gt;&lt;/tt&gt; class is used
on the empty template and on the existing&amp;nbsp;forms.&lt;/p&gt;
&lt;p&gt;This uses the _inline_field.html partial template which is like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% load widget_tweaks %}
{% load crispy_forms_tags %}

{% if field.field.widget.input_type == &amp;#39;hidden&amp;#39; %}
    {{ field }}
{% else %}
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;flex-col my-1 mx-2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        {% if &amp;quot;DELETE&amp;quot; in field.name  %}
            {{ field|add_class:&amp;quot;&amp;quot;|attr:&amp;quot;onclick:delClick(this)&amp;quot;|as_crispy_field }}
        {% elif field.name == &amp;quot;testimonial&amp;quot; %}
            {{ field|attr:&amp;quot;rows:2&amp;quot;|as_crispy_field }}
        {% else %}
            {{ field|as_crispy_field }}
        {% endif %}
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
{% endif %}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this template we add an onclick function called &lt;tt class="docutils literal"&gt;delClick&lt;/tt&gt; when the user clicks the delete checkbox. We could also do
various other stuff like hide the delete checkbox and add a delete button instead but i&amp;#8217;m leaving it as an exercise to the&amp;nbsp;reader.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="better-templates-js"&gt;
&lt;h2&gt;Better templates&amp;nbsp;js&lt;/h2&gt;
&lt;p&gt;Let&amp;#8217;s now take a peek at the actual javascript. First of all we define a function named&amp;nbsp;inlinEditor:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;inlineEditor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inlineSetName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;tmpl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#empty-form-&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;inlineSetName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;[name=&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;inlineSetName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-TOTAL_FORMS]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#add-form-&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;inlineSetName&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ev&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;ev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tmpl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cloneNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;newForm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;[id*=__prefix__]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__prefix__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__prefix__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="nx"&gt;newForm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;[for*=__prefix__]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;htmlFor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__prefix__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;

        &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;last_element_selector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;form #better_inline_&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;inlineSetName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; .inline-form:last-of-type&amp;#39;&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;last_element_selector&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;insertAdjacentElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;afterend&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newForm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This initially function saves the empty form template and the number of forms in the inline. The number of the forms initially is provided
by the django management form. Then we add a click event to the add button for that particular inline. When the user clicks the add
button we&amp;#8217;ll add a new empty form to the end of the existing forms. This works like&amp;nbsp;this:&lt;/p&gt;
&lt;p&gt;Each of the inline forms has an id that has the following form &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;inline_name-&lt;span class="caps"&gt;NUMBER&lt;/span&gt;-field_name&lt;/span&gt;&lt;/tt&gt;, so for example for the first form of editions publisher we&amp;#8217;ll get something like &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;edition_set-0-publisher&lt;/span&gt;&lt;/tt&gt;. The empty form has the string &lt;tt class="docutils literal"&gt;__prefix__&lt;/tt&gt; instead of the number
so it will be &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;edition_set-__prefix__-publisher&lt;/span&gt;&lt;/tt&gt;. To create the new form we clone the empty form template and replace the &lt;tt class="docutils literal"&gt;__prefix__&lt;/tt&gt;
on  the elements with the correct number (based on the total number of forms). Then we increase the number of forms and insert the new form
next to the element with the &lt;tt class="docutils literal"&gt;last_element_selector&lt;/tt&gt; we define there. As you can see this selector will find the last element that
is inside our inline and has a class of &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;inline-form&lt;/span&gt;&lt;/tt&gt;.
That&amp;#8217;s why we need the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;inline-form&lt;/span&gt;&lt;/tt&gt; class to all three cases as we discussed&amp;nbsp;above&lt;/p&gt;
&lt;p&gt;Beyond this, we also have the implementation of &lt;tt class="docutils literal"&gt;delClick&lt;/tt&gt; that adds a red-border class to form of the element that was clicked
(notice the parentElement.parentElement&amp;nbsp;thingie):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;delClick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;border-red-500&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;border-red-500&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, we generate the  inlineEditors when the dom is&amp;nbsp;loaded:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DOMContentLoaded&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;inlineEditor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;edition_set&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;inlineEditor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;testimonial_set&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Please notice that here we also need to use the &lt;em&gt;correct&lt;/em&gt; name of the inlines (both here and in the&amp;nbsp;template).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Using the better approach our book form will be like&amp;nbsp;this:&lt;/p&gt;
&lt;img alt="The better book form" src="/images/better-book-form.png" style="width: 640px;" /&gt;
&lt;p&gt;Now the user can click the add button and a new form will be added in the end of the current list of forms. Also
when he clicks the delete button he&amp;#8217;ll get a red border around the form to be&amp;nbsp;deleted.&lt;/p&gt;
&lt;p&gt;Before finishing this tutorial I&amp;#8217;d like to point out some things that you need to be extra careful about, especially
since you are probably going to use your own html&amp;nbsp;structure:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Don&amp;#8217;t forget to use the correct name for the inlines in the partial template and when initializing it with&amp;nbsp;inlineEditor&lt;/li&gt;
&lt;li&gt;Make sure to add the inline-form class to an empty div if there are no forms in the inline, to the existing forms of the inline and to the empty&amp;nbsp;template&lt;/li&gt;
&lt;li&gt;Be careful on where you&amp;#8217;ll add  classes to the delClick handler; it depends on the structure of your&amp;nbsp;html&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="django"></category><category term="django"></category><category term="python"></category><category term="inlines"></category></entry><entry><title>Using clojure fromÂ Windows</title><link href="https://www.spapas.net/2022/04/14/clojure-windows/" rel="alternate"></link><published>2022-04-14T11:20:00+03:00</published><updated>2022-04-14T11:20:00+03:00</updated><author><name>Serafeim Papastefanos</name></author><id>tag:www.spapas.net,2022-04-14:/2022/04/14/clojure-windows/</id><summary type="html">&lt;p class="first last"&gt;How to install and use clojure from&amp;nbsp;Windows&lt;/p&gt;
</summary><content type="html">&lt;p&gt;In this small article I&amp;#8217;m going to post a guide on how to install and use clojure from Windows using good old&amp;#8217;&amp;nbsp;cmd.exe.&lt;/p&gt;
&lt;p&gt;Unfortunately, most guides on the official clojure site have instructions on using Clojure from Windows through Powershell or &lt;span class="caps"&gt;WSL&lt;/span&gt;.
For my own reasons I hate both these approaches and only use the cmd.exe to interact with the Windows command&amp;nbsp;line.&lt;/p&gt;
&lt;p&gt;There are more or less two approaches to using clojure. Using &lt;a class="reference external" href="https://leiningen.org/"&gt;leiningen&lt;/a&gt; or using the clj tools.
The clojure official guide seems to be &lt;cite&gt;biased towards clj tools&lt;/cite&gt;. However I think that leiningen may be easier for new users.
I&amp;#8217;ll cover both approaches&amp;nbsp;here.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Warning&lt;/em&gt; Before doing anything else please make sure to install Java. You need a version of java that is at least 1.8. Try running
&lt;tt class="docutils literal"&gt;java &lt;span class="pre"&gt;-version&lt;/span&gt;&lt;/tt&gt; in cmd.exe to make sure you have java and it is the correct&amp;nbsp;version.&lt;/p&gt;
&lt;div class="section" id="leiningen"&gt;
&lt;h2&gt;Leiningen&lt;/h2&gt;
&lt;p&gt;To install leiningen you just download the lein.bat file from their page and put it in a folder in your &lt;span class="caps"&gt;PATH&lt;/span&gt;. You&amp;#8217;ll then run
lein and it will download all dependencies and install&amp;nbsp;itself!&lt;/p&gt;
&lt;p&gt;To start a clojure repl to be able to play with clojure you write &lt;tt class="docutils literal"&gt;lein repl&lt;/tt&gt;. If everything went smooth you should see a prompt
and if you write &lt;tt class="docutils literal"&gt;(+ 1 2)&lt;/tt&gt; you should get &lt;tt class="docutils literal"&gt;3&lt;/tt&gt;. To exit press &lt;tt class="docutils literal"&gt;ctrl+d&lt;/tt&gt; or write &lt;tt class="docutils literal"&gt;exit&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;To start a new project you&amp;#8217;ll use &lt;tt class="docutils literal"&gt;lein new [template name] [project name]&lt;/tt&gt;. For example, to create a new app you&amp;#8217;ll write:
&lt;tt class="docutils literal"&gt;lein new app leinapp&lt;/tt&gt;. You&amp;#8217;ll get a new directory called &lt;tt class="docutils literal"&gt;leinapp&lt;/tt&gt;. The important stuff in this directory&amp;nbsp;are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;project.clj&lt;/tt&gt;: The basic descriptor of your project; here you can set various attrs of your project and also add&amp;nbsp;dependencies&lt;/li&gt;
&lt;li&gt;src\leinapp: The source directory of your project. This is where you&amp;#8217;ll put your&amp;nbsp;code.&lt;/li&gt;
&lt;li&gt;test\leinapp: Add tests&amp;nbsp;here&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There should be a &lt;tt class="docutils literal"&gt;core.clj&lt;/tt&gt; file inside your src\leinapp folder. The &lt;tt class="docutils literal"&gt;main&lt;/tt&gt; function is the entry point of the app. Try running
&lt;tt class="docutils literal"&gt;lein run&lt;/tt&gt; from the project folder and you should get the output of the &lt;tt class="docutils literal"&gt;main&lt;/tt&gt; function.&lt;/p&gt;
&lt;p&gt;Add this to the end of the &lt;tt class="docutils literal"&gt;core.clj&lt;/tt&gt; to define a &lt;tt class="docutils literal"&gt;foo&lt;/tt&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And run &lt;tt class="docutils literal"&gt;lein repl&lt;/tt&gt;. You should get a repl command prompt for your application
in the &lt;tt class="docutils literal"&gt;leinapp.core&lt;/tt&gt; namespace (if you named your app &lt;tt class="docutils literal"&gt;leinapp&lt;/tt&gt;). Type
&lt;tt class="docutils literal"&gt;(foo)&lt;/tt&gt; and you should see &lt;tt class="docutils literal"&gt;&amp;quot;bar&amp;quot;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;To create a stand alone jar with your code (called &lt;em&gt;uberjar&lt;/em&gt;) you can use &lt;tt class="docutils literal"&gt;lein uberjar&lt;/tt&gt;. This will create a file
named &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;target\uberjar\leinapp-0.1.0-&lt;span class="caps"&gt;SNAPSHOT&lt;/span&gt;-standalone.jar&lt;/span&gt;&lt;/tt&gt;. Then try &lt;tt class="docutils literal"&gt;java &lt;span class="pre"&gt;-jar&lt;/span&gt; &lt;span class="pre"&gt;target\uberjar\leinapp-0.1.0-&lt;span class="caps"&gt;SNAPSHOT&lt;/span&gt;-standalone.jar&lt;/span&gt;&lt;/tt&gt;
(notice I&amp;#8217;m still on the leinapp project folder) and you&amp;#8217;ll see the output of&amp;nbsp;main!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="clj"&gt;
&lt;h2&gt;clj&lt;/h2&gt;
&lt;p&gt;Using the clj is a more &lt;em&gt;modern&lt;/em&gt; approach to clojure development. As I said before the official clojure page seems to be biased towards
using this approach. The problem is that it seems to require Powershell to run as you can see on the  &lt;cite&gt;clj on Windows&lt;/cite&gt; page.&lt;/p&gt;
&lt;p&gt;Thankfully, the good people at the &lt;a class="reference external" href="https://clojurians.slack.com/"&gt;clojurians&lt;/a&gt; slack pointed me to &lt;a class="reference external" href="https://github.com/borkdude/deps.clj"&gt;deps.clj&lt;/a&gt; project. This is an implementation of clj in clojure and
can be installed natively on Windows by downloading the .zip &lt;a class="reference external" href="https://github.com/borkdude/deps.clj/releases"&gt;from the releases page&lt;/a&gt;. This zip should contain a deps.exe file. Put
that executable it in your path. You can also rename it to clj.exe if you want. Also if you have the powershell installed you can run this command from cmd.exe
&lt;tt class="docutils literal"&gt;PowerShell &lt;span class="pre"&gt;-Command&lt;/span&gt; &amp;quot;iwr &lt;span class="pre"&gt;-useb&lt;/span&gt; &lt;span class="pre"&gt;https://raw.githubusercontent.com/borkdude/deps.clj/master/install.ps1&lt;/span&gt; | iex&amp;quot;&lt;/tt&gt; to install it&amp;nbsp;automatically.&lt;/p&gt;
&lt;p&gt;You can now run &lt;tt class="docutils literal"&gt;deps&lt;/tt&gt; and you should get a clojure repl similar to &lt;tt class="docutils literal"&gt;lein repl&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;To create a new project skeleton you can use the
use the &lt;a class="reference external" href="https://github.com/seancorfield/deps-new"&gt;deps-new&lt;/a&gt; project. To install it run the following command from cmd.exe:
&lt;tt class="docutils literal"&gt;deps &lt;span class="pre"&gt;-Ttools&lt;/span&gt; install &lt;span class="pre"&gt;io.github.seancorfield/deps-new&lt;/span&gt; &lt;span class="pre"&gt;&amp;quot;{:git/tag&lt;/span&gt; &lt;span class="pre"&gt;&amp;quot;&amp;quot;&amp;quot;v0.4.9&amp;quot;&amp;quot;&amp;quot;}&amp;quot;&lt;/span&gt; :as new&lt;/tt&gt; (please notice that there are various
&lt;a class="reference external" href="https://clojure.org/reference/deps_and_cli#quoting"&gt;problems with the quoting on windows&lt;/a&gt; but this command should work&amp;nbsp;fine).&lt;/p&gt;
&lt;p&gt;To create a new app run: &lt;tt class="docutils literal"&gt;deps &lt;span class="pre"&gt;-Tnew&lt;/span&gt; app :name organization/depsapp&lt;/tt&gt; and you&amp;#8217;ll get your app in the &lt;tt class="docutils literal"&gt;depsapp&lt;/tt&gt; folder. If you want
a similar form as with lein, try &lt;tt class="docutils literal"&gt;deps &lt;span class="pre"&gt;-Tnew&lt;/span&gt; app :name depsapp/core &lt;span class="pre"&gt;:target-dir&lt;/span&gt; depsapp&lt;/tt&gt;. Now the &lt;tt class="docutils literal"&gt;depsapp&lt;/tt&gt; folder will&amp;nbsp;contain:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;deps.edn&lt;/tt&gt;: The basic descriptor of your project; here you can set various attrs of your project and also add dependencies. This more or less changes the project.clj we got from&amp;nbsp;leiningen.&lt;/li&gt;
&lt;li&gt;src\depsapp: The source directory of your project. This is where you&amp;#8217;ll put your&amp;nbsp;code.&lt;/li&gt;
&lt;li&gt;test\depsapp: Add tests&amp;nbsp;here&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To run the project, try: &lt;tt class="docutils literal"&gt;deps &lt;span class="pre"&gt;-M&lt;/span&gt; &lt;span class="pre"&gt;-m&lt;/span&gt; depsapp.core&lt;/tt&gt; or
&lt;tt class="docutils literal"&gt;deps&amp;nbsp; &lt;span class="pre"&gt;-M:run-m&lt;/span&gt;&lt;/tt&gt; or
&lt;tt class="docutils literal"&gt;deps&amp;nbsp; &lt;span class="pre"&gt;-X:run-x&lt;/span&gt;&lt;/tt&gt; to directly run the greet function (&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;run-m&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;run-x&lt;/span&gt;&lt;/tt&gt; are aliases defined in &lt;tt class="docutils literal"&gt;deps.edn&lt;/tt&gt; take a&amp;nbsp;peek).&lt;/p&gt;
&lt;p&gt;To start a &lt;span class="caps"&gt;REPL&lt;/span&gt;, run &lt;tt class="docutils literal"&gt;deps&lt;/tt&gt;. Notice this will start on the &lt;tt class="docutils literal"&gt;user&lt;/tt&gt; namespace, so you&amp;#8217;ll need to do something&amp;nbsp;like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;user=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;depsapp.core&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;nil&lt;/span&gt;
&lt;span class="nv"&gt;user=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;depsapp.core/foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to run a &lt;tt class="docutils literal"&gt;(foo)&lt;/tt&gt; function that you&amp;#8217;ve added in the &lt;tt class="docutils literal"&gt;core.clj&lt;/tt&gt; file.&lt;/p&gt;
&lt;p&gt;To run the tests use: &lt;tt class="docutils literal"&gt;deps &lt;span class="pre"&gt;-T:build&lt;/span&gt; test&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;To create the uberjar you&amp;#8217;ll run:
&lt;tt class="docutils literal"&gt;deps &lt;span class="pre"&gt;-T:build&lt;/span&gt; ci&lt;/tt&gt; (tests must pass). Then execute it directly using
&lt;tt class="docutils literal"&gt;java &lt;span class="pre"&gt;-jar&lt;/span&gt; &lt;span class="pre"&gt;target\core-0.1.0-&lt;span class="caps"&gt;SNAPSHOT&lt;/span&gt;.jar&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Also, notice that it&amp;#8217;s really simple to create a new project with deps without the deps-new. For example,
create a folder named &lt;tt class="docutils literal"&gt;manualapp&lt;/tt&gt; and in this folder
create a &lt;tt class="docutils literal"&gt;deps.edn&lt;/tt&gt; file containing just the string &lt;tt class="docutils literal"&gt;{}&lt;/tt&gt;. Then add another folder named &lt;tt class="docutils literal"&gt;src&lt;/tt&gt; with a  &lt;tt class="docutils literal"&gt;hello.clj&lt;/tt&gt; file
containing something&amp;nbsp;like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;ns &lt;/span&gt;&lt;span class="nv"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;run&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;println &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can then open a &lt;span class="caps"&gt;REPL&lt;/span&gt; on the project using &lt;tt class="docutils literal"&gt;deps&lt;/tt&gt; or run the run function using &lt;tt class="docutils literal"&gt;deps &lt;span class="pre"&gt;-X&lt;/span&gt; hello/run&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="vscode-integration"&gt;
&lt;h2&gt;VSCode&amp;nbsp;integration&lt;/h2&gt;
&lt;p&gt;Both leining and clj projects can easily be used with VSCode. First of all, install the calva package in your VSCode. Then, open your
clojure project in VScode and press &lt;tt class="docutils literal"&gt;ctrl+shift+p&lt;/tt&gt; to bring up the command pallete. Here write &amp;#8220;Jack&amp;#8221; (from jack-in) and select it
(also this has the shortctut &lt;tt class="docutils literal"&gt;ctrl+alt+c ctrl+alt+j&lt;/tt&gt;). Select the correct project type (&lt;tt class="docutils literal"&gt;leiningen&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;deps.edn&lt;/tt&gt;). A repl
will be opened to the side; you can then go to your core.clj file and run &lt;tt class="docutils literal"&gt;ctrl+alt+c enter&lt;/tt&gt; to load the current&amp;nbsp;file.&lt;/p&gt;
&lt;p&gt;Then you can move to the repl on the side and run the function with &lt;tt class="docutils literal"&gt;(foo)&lt;/tt&gt; or run &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;(-main)&lt;/span&gt;&lt;/tt&gt;. Also you can write &lt;tt class="docutils literal"&gt;(foo)&lt;/tt&gt;
in your source file and press &lt;tt class="docutils literal"&gt;ctrl+enter&lt;/tt&gt; to execute it and see the result; the &lt;tt class="docutils literal"&gt;ctrl+enter&lt;/tt&gt; will execute the form where your
cursor is. See &lt;a class="reference external" href="https://calva.io/try-first/"&gt;this&lt;/a&gt; for&amp;nbsp;more.&lt;/p&gt;
&lt;/div&gt;
</content><category term="clojure"></category><category term="clojure"></category><category term="windows"></category><category term="cmd"></category></entry><entry><title>PDFs in Django like itâsÂ 2022!</title><link href="https://www.spapas.net/2022/02/14/django-pdfs-2022/" rel="alternate"></link><published>2022-02-14T12:20:00+02:00</published><updated>2022-02-14T12:20:00+02:00</updated><author><name>Serafeim Papastefanos</name></author><id>tag:www.spapas.net,2022-02-14:/2022/02/14/django-pdfs-2022/</id><summary type="html">&lt;p class="first last"&gt;How to render PDFs in Django like it&amp;#8217;s&amp;nbsp;2022!&lt;/p&gt;
</summary><content type="html">&lt;p&gt;In a &lt;a class="reference external" href="https://www.spapas.net/2015/11/27/pdf-in-django/"&gt;previous article&lt;/a&gt; I had written a very comprehensive
guide on how to render PDFs in Django using tools like reportlab and xhtml2pdf. Although these tools
are still valid and work fine I have decided that usually it&amp;#8217;s way too much pain to set them up to work&amp;nbsp;properly.&lt;/p&gt;
&lt;p&gt;Another common way to generate PDFs in the Python world is using the &lt;a class="reference external" href="https://weasyprint.org/"&gt;weasyprint&lt;/a&gt; library.
Unfortunately this library has way too many requirements and installing it on Windows
is worse than &lt;a class="reference external" href="https://doc.courtbouillon.org/weasyprint/stable/first_steps.html#windows"&gt;putting needles in your eyes&lt;/a&gt;. I don&amp;#8217;t like needles in my eyes, thank you very&amp;nbsp;much.&lt;/p&gt;
&lt;p&gt;There are various other ways to generate PDFs like using a report server like Japser or
&lt;span class="caps"&gt;SQL&lt;/span&gt; Server Reporting Services but these are too &amp;#8220;enterpris-y&amp;#8221; for most people and require
another server, a learning curve,&amp;nbsp;etc.&lt;/p&gt;
&lt;p&gt;I was actually so disappointed by the status of &lt;span class="caps"&gt;PDF&lt;/span&gt; generation today that in some recent projects
instead of the &lt;span class="caps"&gt;PDF&lt;/span&gt; file I generated an &lt;span class="caps"&gt;HTML&lt;/span&gt; page with a nice pdf-printing stylesheet and
instructed the users to print it as &lt;span class="caps"&gt;PDF&lt;/span&gt; (from the browser) so as to generate the &lt;span class="caps"&gt;PDF&lt;/span&gt;&amp;nbsp;themselves!&lt;/p&gt;
&lt;p&gt;However, recently I found another way to generate PDFs in my Django projects which I&amp;#8217;d like to share
with you: Using the &lt;a class="reference external" href="https://wkhtmltopdf.org/"&gt;wkhtmltopdf&lt;/a&gt; tool. The wkhtmltopdf is a command line program that has binaries
for more or less every operating system. It&amp;#8217;s a single binary that you can download and put it in
a directory, you don&amp;#8217;t need to run another server or any fancy installation. Only an executable. To
use it? You call it like &lt;cite&gt;wkhtmltopdf http://google.com google.pdf&lt;/cite&gt; and it will download the url
and generate the pdf! It&amp;#8217;s as simple as that! This tool is old and heavily used but only recently I
researched its integration with&amp;nbsp;Django.&lt;/p&gt;
&lt;p&gt;Please notice that there&amp;#8217;s actually a &lt;a class="reference external" href="https://github.com/incuna/django-wkhtmltopdf"&gt;django-wkhtmltopdf&lt;/a&gt; library for integrating wkhtmltopdf with
django. However I din&amp;#8217;t have good results while trying to use it (maybe because of my Windows dev
environment). Also, implementing the integration myself allowed my to more easily understand what&amp;#8217;s
happening and better debug the wkhtmltopdf. However &lt;span class="caps"&gt;YMMV&lt;/span&gt;, after you read this small post to understand
how the integration works you can try django-wkhtmltopdf to see if it works in your&amp;nbsp;case.&lt;/p&gt;
&lt;p&gt;In any way, the first thing you need to do is download and install wkhtmltopdf for your platform and save its
full path in your settings.py like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# For linux&lt;/span&gt;
&lt;span class="n"&gt;WKHTMLTOPDF_CMD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/usr/local/bin/wkhtmltopdf&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# or for windows&lt;/span&gt;
&lt;span class="n"&gt;WKHTMLTOPDF_CMD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;c:\util\wkhtmltopdf.exe&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that I&amp;#8217;m using the full path. I have observed that even if you put the binary to a directory
in the system &lt;span class="caps"&gt;PATH&lt;/span&gt; it won&amp;#8217;t be picked (at least in my case) thus I recommend using the full&amp;nbsp;path.&lt;/p&gt;
&lt;p&gt;Now, let&amp;#8217;s suppose we&amp;#8217;ve got a &lt;tt class="docutils literal"&gt;DetailView&lt;/tt&gt; (let&amp;#8217;s call it &lt;tt class="docutils literal"&gt;SampleDetailView&lt;/tt&gt;) that we&amp;#8217;d like to render as &lt;span class="caps"&gt;PDF&lt;/span&gt;. We can use the following
&lt;span class="caps"&gt;CBV&lt;/span&gt; for&amp;nbsp;that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;check_output&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.template&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.template.loader&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_template&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tempfile&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;NamedTemporaryFile&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SamplePdfDetailView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SampleDetailView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_resp_from_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_resp_from_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template_str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;template_str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;render_to_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pdf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
      &lt;span class="c1"&gt;# We can use either&lt;/span&gt;
      &lt;span class="n"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_resp_from_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;h1&amp;gt;Hello, world! {{ object }}&amp;lt;/h1&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c1"&gt;# or&lt;/span&gt;
      &lt;span class="c1"&gt;# resp = self.get_resp_from_file(&amp;#39;test_pdf.html&amp;#39;, context)&lt;/span&gt;

      &lt;span class="n"&gt;tempfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NamedTemporaryFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;w+b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buffering&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                    &lt;span class="n"&gt;suffix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tmp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                    &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="n"&gt;tempfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="n"&gt;tempfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="n"&gt;tempfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WKHTMLTOPDF_CMD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s1"&gt;&amp;#39;--page-size&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--encoding&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s1"&gt;&amp;#39;--footer-center&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[page] / [topage]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s1"&gt;&amp;#39;--enable-local-file-access&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;tempfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="c1"&gt;# print(&amp;quot; &amp;quot;.join(cmd))&lt;/span&gt;
      &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;check_output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tempfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;application/pdf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can put the pdf view on our url patterns right next to our &lt;tt class="docutils literal"&gt;DetailView&lt;/tt&gt; i.e:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;detail/&amp;lt;int:pk&amp;gt;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;permission_required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;core.user&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;
          &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SampleDetailView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;detail&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;detail/&amp;lt;int:pk&amp;gt;/pdf/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;permission_required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;core.user&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;
          &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SamplePdfDetailView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;detail_pdf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;#8217;s try to understand how this works: First of all notice that we have two options, either
create a &lt;span class="caps"&gt;PDF&lt;/span&gt; from an html string or from a normal template file. For the first option we pass
the full html string to the &lt;tt class="docutils literal"&gt;get_resp_from_string&lt;/tt&gt; and the context and we&amp;#8217;ll get the rendered html
(i.e the context will be applied to the template).
For the second option we pass the filename of a django template and the context. Notice that
there&amp;#8217;s a small difference on how the &lt;tt class="docutils literal"&gt;template.render()&lt;/tt&gt; method is called in the two&amp;nbsp;methods.&lt;/p&gt;
&lt;p&gt;After that we&amp;#8217;ve got an html file saved in the &lt;tt class="docutils literal"&gt;resp&lt;/tt&gt; string. We want to give this to wkhtmltopdf so
as to be converted to &lt;span class="caps"&gt;PDF&lt;/span&gt;. To do that we first create a temporary file using the &lt;tt class="docutils literal"&gt;NamedTemporaryFile&lt;/tt&gt;
class and write the &lt;tt class="docutils literal"&gt;resp&lt;/tt&gt; to it. Then we call wkhtmltopdf passing it this temporary file. Notice we
use the &lt;tt class="docutils literal"&gt;subprocess.check_output&lt;/tt&gt; function that will capture the output of the command and return&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Finally we delete the temporary file and return the pdf as an &lt;tt class="docutils literal"&gt;HttpResponse&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;We call the wkhtmltopdf like&amp;nbsp;this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
c:\util\wkhtmltopdf.exe --page-size A4 --encoding utf-8 --footer-center [page] / [topage] --enable-local-file-access C:\Users\serafeim\AppData\Local\Temp\tmp_lh5r6f9.html -
&lt;/pre&gt;
&lt;p&gt;The page-size can be changed to letter if you are in the &lt;span class="caps"&gt;US&lt;/span&gt;. The encoding should be utf-8. The &amp;#8212;footer-center option adds a
footer to the &lt;span class="caps"&gt;PDF&lt;/span&gt; page with the current page and the total number of pages. The &amp;#8212;enable-local-file-access is very important
since it allows &lt;tt class="docutils literal"&gt;wkhtmltopdf&lt;/tt&gt; to access local files (in the filesystem) and not only remote ones. After that we&amp;#8217;ve got the
full path of our temporary file and following is the &lt;tt class="docutils literal"&gt;-&lt;/tt&gt; which means that the pdf output will be on the stdout (so we&amp;#8217;ll capture it
with &lt;tt class="docutils literal"&gt;check_output&lt;/tt&gt;).&lt;/p&gt;
&lt;p&gt;Notice that there&amp;#8217;s a commented out print command before the &lt;tt class="docutils literal"&gt;check_output&lt;/tt&gt; call. If you have problems you can call this
command from your command line to debug the wkhtmltopdf command (don&amp;#8217;t forget to comment out the &lt;tt class="docutils literal"&gt;os.remove&lt;/tt&gt; line to keep
the temporary file). Also, wkhtmltopdf will output some stuff while rendering the command, for example something&amp;nbsp;like:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
Loading pages (1/6)
Counting pages (2/6)
Resolving links (4/6)
Loading headers and footers (5/6)
Printing pages (6/6)
Done
&lt;/pre&gt;
&lt;p&gt;You can pass the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--quiet&lt;/span&gt;&lt;/tt&gt; option to hide this output. However the output is useful to see what wkhtmltopdf is doing in
case there are problems so I recommend leaving it on while developing. Let&amp;#8217;s take a look at a problematic&amp;nbsp;output:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
Loading pages (1/6)
Error: Failed to load file:///static/bootstrap/css/bootstrap.min.css, with network status code 203 and http status code 0 - Error opening /static_edla/bootstrap/css/govgr_bootstrap.min.css: The system cannot find the path specified.
[...]
Counting pages (2/6)
Resolving links (4/6)
Loading headers and footers (5/6)
Printing pages (6/6)
Done
&lt;/pre&gt;
&lt;p&gt;The above output means that our template tries to load a css file that wkhtmltopdf can&amp;#8217;t find and errors out! To understand this error, I had a line like this in my&amp;nbsp;template:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;lt;link href=&amp;quot;{% static 'bootstrap/css/bootstrap.min.css' %}&amp;quot; rel=&amp;quot;stylesheet&amp;quot;&amp;gt;
&lt;/pre&gt;
&lt;p&gt;which will be converted to a link like &lt;tt class="docutils literal"&gt;`/static/bootstrap/css/bootstrap.min.css&lt;/tt&gt;.
However notice that I tell wkhtmltopdf to render a file from my temporary directory, it doesn&amp;#8217;t
know where that link points to!
Following this thing you need to be extra careful to &lt;em&gt;include everything&lt;/em&gt; in your &lt;span class="caps"&gt;HTML&lt;/span&gt;-pdf template and not
use any external links. So all styles must be inlined in the template using &lt;tt class="docutils literal"&gt;&amp;lt;style&amp;gt;&lt;/tt&gt; tags and all images must be
converted to data images with base64, something&amp;nbsp;like:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;lt;img src='data:image/png;base64,...&amp;gt;
&lt;/pre&gt;
&lt;p&gt;To do that in python for a dynamic image you can use something&amp;nbsp;like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;base64&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;convert_to_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;data:image/xyz;base64,{}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and then use that as your image src (notice I&amp;#8217;m using &lt;tt class="docutils literal"&gt;image/xyz&lt;/tt&gt; here for an
arbitrary image, please use the correct image type if you know it i.e &lt;tt class="docutils literal"&gt;image/png&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;image/jpg&lt;/tt&gt;).&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;ve got a static image you want to include you can convert it to base64 using an online service &lt;a class="reference external" href="https://www.base64-image.de/"&gt;like this&lt;/a&gt;,
or read it with python and convert&amp;nbsp;it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;base64&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;static/images/image.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instead of a &lt;tt class="docutils literal"&gt;DetailView&lt;/tt&gt; we could use the same approach for any kind of &lt;span class="caps"&gt;CBV&lt;/span&gt;. If you are to use the &lt;span class="caps"&gt;PDF&lt;/span&gt;
response to multiple CBVs I recommend exporting the functionality to a mixin and inheriting from that also
(see my &lt;a class="reference external" href="https://www.spapas.net/2018/03/19/comprehensive-django-cbv-guide/"&gt;&lt;span class="caps"&gt;CBV&lt;/span&gt; guide&lt;/a&gt; for&amp;nbsp;more).&lt;/p&gt;
&lt;p&gt;Finally, the big question in the room is why should I convert my template to a file and pass that to
wkhtmltopdf, can&amp;#8217;t I use the &lt;span class="caps"&gt;URL&lt;/span&gt; of my template, i.e pass wkhtmltopdf something like &lt;a class="reference external" href="http://example.com/app/detail/321/"&gt;http://example.com/app/detail/321/&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;By all means you can! This will also enable you to avoid using inline styles and media!!
However keep in mind that the usual case is that this view will not be public but will need an authenticated user to
access it; wkhtmltopdf is publicly trying to access it, it doesn&amp;#8217;t have any rights to it so you&amp;#8217;ll get a 404 or 403 error!
Of course you can
start an adventure on authenticating it somehow (and maybe doing something stupid) or you can just follow my lead
and render it to a file&amp;nbsp;:)&lt;/p&gt;
</content><category term="django"></category><category term="django"></category><category term="python"></category><category term="pdf"></category><category term="wkhtmltopdf"></category></entry><entry><title>A forward and reverse proxy primer for theÂ layman</title><link href="https://www.spapas.net/2021/09/21/layman-proxy-primer/" rel="alternate"></link><published>2021-09-21T14:20:00+03:00</published><updated>2021-09-21T14:20:00+03:00</updated><author><name>Serafeim Papastefanos</name></author><id>tag:www.spapas.net,2021-09-21:/2021/09/21/layman-proxy-primer/</id><summary type="html">&lt;p class="first last"&gt;A primer for explaining forward and reverse proxies to the&amp;nbsp;layman&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Before some days I&amp;#8217;d &lt;a class="reference external" href="https://news.ycombinator.com/item?id=28381220"&gt;written an answer on &lt;span class="caps"&gt;HN&lt;/span&gt;&lt;/a&gt; where I explained as simply as possible
how a forward and a reverse proxy is working and what is the difference between them. In this article
I&amp;#8217;m going to extend this answer a bit to make it a full post and clarify some things even&amp;nbsp;more.&lt;/p&gt;
&lt;p&gt;Forward and reverse proxies is an important concept that a lot of technical people aren&amp;#8217;t familiar with.
&lt;span class="caps"&gt;HTTP&lt;/span&gt; Proxying is a process of forwarding (&lt;span class="caps"&gt;HTTP&lt;/span&gt;) requests from one server to the other. So when an &lt;span class="caps"&gt;HTTP&lt;/span&gt;
client issues a request to the server, the request will pass through the proxy server and be forwarded to the
destination server (called the origin server). This explanation is true both for forward and reverse&amp;nbsp;proxying.&lt;/p&gt;
&lt;div class="section" id="forward-proxy"&gt;
&lt;h2&gt;Forward&amp;nbsp;Proxy&lt;/h2&gt;
&lt;p&gt;A forward proxy is used when an &lt;span class="caps"&gt;HTTP&lt;/span&gt; Client (i.e a browser) wants to access resources in the internet
but isn&amp;#8217;t allowed to connect directly to the public internet so instead uses the&amp;nbsp;proxy.&lt;/p&gt;
&lt;p&gt;Usually companies don&amp;#8217;t allow unrestricted access to the internet from their internal network.
Thus the internal users would need to use a proxy to access the internet. This is the concept of the forward proxy.
What happens is that when an internal user want to access an internet resource (i.e www.google.com) her client (i.e browser)
will ask a specific server (the proxy server) for that resource. The client needs to be configured properly with the address
of the proxy&amp;nbsp;server.&lt;/p&gt;
&lt;p&gt;So instead of &lt;a class="reference external" href="http://www.google.com"&gt;http://www.google.com&lt;/a&gt; the browser will access &lt;a class="reference external" href="http://proxy.company.com/?url=www.google.com"&gt;http://proxy.company.com/?url=www.google.com&lt;/a&gt; and the
proxy will fetch the results and return them to you. If the browser wants to access &lt;a class="reference external" href="https://www.google.com"&gt;https://www.google.com&lt;/a&gt; &lt;em&gt;without&lt;/em&gt;
a configured proxy server it will get a network&amp;nbsp;error.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s an image that explains&amp;nbsp;this:&lt;/p&gt;
&lt;img alt="Forward proxy" src="/images/fw_proxy.png" style="width: 800px;" /&gt;
&lt;p&gt;The internal client can access the internal web server directly without problems. However he cannot access
the internet server directly so he needs to use the proxy to access&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;One thing that needs to be made crystal is that the fact that your browser works with the proxy does not mean
that any other &lt;span class="caps"&gt;HTTP&lt;/span&gt; clients you use will also work. For example, you may want to run &lt;tt class="docutils literal"&gt;curl&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;wget&lt;/tt&gt; to download
some files from an external server; these programs will not work without setting a proxy (usually by setting the http_proxy
and https_proxy environment variables or by passing a parameter). Also, the proxy only works for &lt;span class="caps"&gt;HTTP&lt;/span&gt; requests. If you are
in a private network without external access you will &lt;em&gt;not&lt;/em&gt; be able to access non-&lt;span class="caps"&gt;HTTP&lt;/span&gt; resources. For example you will not be able
to access your non-company mail server (which uses either &lt;span class="caps"&gt;IMAP&lt;/span&gt; or &lt;span class="caps"&gt;POP3&lt;/span&gt;) from behind your company&amp;#8217;s network. Typically, you&amp;#8217;ll use
a web client for accessing your&amp;nbsp;mails.&lt;/p&gt;
&lt;p&gt;So it seems that using a proxy heavily restricts the internal users usage of internet. What are the advantages of using a forward&amp;nbsp;proxy?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Security: Since the internal computers of a company will not have internet access there&amp;#8217;s no easy way for attackers to access these&amp;nbsp;computers.&lt;/li&gt;
&lt;li&gt;Content moderation: The company through the proxy can block access to various internet sites (i.e social network, gaming etc) that the users shouldn&amp;#8217;t access during&amp;nbsp;work.&lt;/li&gt;
&lt;li&gt;Caching: The proxy server can have a cache so when multiple users access the same internet resource it will downloaded only once saving the company&amp;#8217;s&amp;nbsp;bandwidth.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Especially the security thing is so important that almost all corporate (or university etc) networks will use a proxy server and never
allow direct access to the&amp;nbsp;internet.&lt;/p&gt;
&lt;p&gt;A well known, open source forward proxy server is &lt;a class="reference external" href="http://www.squid-cache.org/"&gt;Squid&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reverse-proxy"&gt;
&lt;h2&gt;Reverse&amp;nbsp;proxy&lt;/h2&gt;
&lt;p&gt;A reverse proxy is an &lt;span class="caps"&gt;HTTP&lt;/span&gt; server that &amp;#8220;proxies&amp;#8221; (i.e forwards) some (or all) requests it receives to a different &lt;span class="caps"&gt;HTTP&lt;/span&gt;
server and returns the answer back. For example, a company may have a couple of &lt;span class="caps"&gt;HTTP&lt;/span&gt; servers in its internal network. These
servers have private addresses and cannot be accessed through the internet. To allow external users to access these servers,
the company will configure a reverse proxy server that will forward the requests to the internal servers as seen in the&amp;nbsp;picture:&lt;/p&gt;
&lt;img alt="Reverse proxy" src="/images/reverseproxy.png" style="width: 800px;" /&gt;
&lt;p&gt;What happens is that the proxy server will forward requests that fulfill some specific
criteria to other web servers. The criteria may be requests that have
* a specific host (forward the requests that have a hostname of &lt;tt class="docutils literal"&gt;www.server1.company.com&lt;/tt&gt; to the internal server named &lt;tt class="docutils literal"&gt;server1&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;www.server2.company.com&lt;/tt&gt; to the internal server named &lt;tt class="docutils literal"&gt;server2&lt;/tt&gt;)
* or a specific port (forward requests in the port 81 to &lt;tt class="docutils literal"&gt;server1&lt;/tt&gt; and requests in the port 82 to &lt;tt class="docutils literal"&gt;server2&lt;/tt&gt;)
* or even a particular path (forward requests with the path &lt;tt class="docutils literal"&gt;www.company.com/server1&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;server1&lt;/tt&gt; and requests with the path &lt;tt class="docutils literal"&gt;www.company.com/server2&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;server2&lt;/tt&gt;)&lt;/p&gt;
&lt;p&gt;or even other criteria that may be&amp;nbsp;decided.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s see some example of reverse&amp;nbsp;proxying:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A characteristic example of reverse proxy is the well-known 3-tier architecture  (web server / app server / database server). The web server is used to serve all requests but it &amp;#8220;proxies&amp;#8221;  (forwards) some of the requests to the app server. This is used because the web server cannot serve dynamic  replies but can serve static replies like for example&amp;nbsp;files.&lt;/li&gt;
&lt;li&gt;Offloading the &lt;span class="caps"&gt;SSL&lt;/span&gt; (https) security to a particular web server. This server will store the private key of your certificate and terminate the &lt;span class="caps"&gt;SSL&lt;/span&gt; connections. It will then forward the requests to the internal web servers using plain &lt;span class="caps"&gt;HTTP&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;An &lt;span class="caps"&gt;HTTP&lt;/span&gt; load balancer will proxy the requests to a set of other servers based on some algorithm to share the load (i.e the HAProxy software load balancer or even a hardware load&amp;nbsp;balancer)&lt;/li&gt;
&lt;li&gt;A reverse proxy can be used to act as a security and &lt;span class="caps"&gt;DOS&lt;/span&gt; &amp;#8220;shield&amp;#8221; for your web servers. It will check the requests for common attack patterns and forward them to your servers only if they are&amp;nbsp;safe&lt;/li&gt;
&lt;li&gt;A reverse proxy can be used for caching; it will return cached versions of resources if they are available to avoid overloading the application&amp;nbsp;servers&lt;/li&gt;
&lt;li&gt;A &lt;span class="caps"&gt;CDN&lt;/span&gt; (content delivery network) is more or less a set of glorified reverse proxy servers that act as a first step for serving the user&amp;#8217;s requests (based on the geographic location) also offering security protection and caching (this is what akamai or cloudflare&amp;nbsp;do)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As can be seen from the previous examples there are a lot of apps that do reverse proxying, for example apache &lt;span class="caps"&gt;HTTP&lt;/span&gt;, nginx, HAProxy, varnish cache et&amp;nbsp;al.&lt;/p&gt;
&lt;p&gt;Notice that while there&amp;#8217;s only one forward proxy, there could be a (large) chain of reverse proxies when accessing a remote server.
Let&amp;#8217;s take a look at a rather complex scenario: A user in a corporate network will access an application in another network. In this case the user&amp;#8217;s request
may pass&amp;nbsp;through:&lt;/p&gt;
&lt;p&gt;forward proxy (squid) -&amp;gt;
security server / &lt;span class="caps"&gt;CDN&lt;/span&gt; (akamai) -&amp;gt;
ssl termination (nginx) -&amp;gt;
caching (varnish) -&amp;gt;
web server (nginx again) -&amp;gt;
app server (tomcat or gunicorn or &lt;span class="caps"&gt;IIS&lt;/span&gt; etc)
as can be seen on the following&amp;nbsp;image:&lt;/p&gt;
&lt;img alt="Reverse proxy" src="/images/reverseproxy2.png" style="width: 800px;" /&gt;
&lt;p&gt;Notice that is this case (which is not uncommon) there are six (05) servers between your client and the application&amp;nbsp;server!&lt;/p&gt;
&lt;p&gt;One common problem with this is that unless &lt;em&gt;all&lt;/em&gt; the intermediate servers are configured properly
(by properly modifying and passing the &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For"&gt;X-Forwarded-For&lt;/a&gt; header)
you won&amp;#8217;t be able to retrieve the &lt;span class="caps"&gt;IP&lt;/span&gt; of the user that did the initial&amp;nbsp;request.&lt;/p&gt;
&lt;/div&gt;
</content><category term="networking"></category><category term="forward-proxy"></category><category term="reverse-proxy"></category><category term="proxy"></category><category term="networking"></category><category term="http"></category></entry><entry><title>Token Authentication forÂ django-rest-framework</title><link href="https://www.spapas.net/2021/08/25/django-token-rest-auth/" rel="alternate"></link><published>2021-08-25T12:40:00+03:00</published><updated>2021-08-25T12:40:00+03:00</updated><author><name>Serafeim Papastefanos</name></author><id>tag:www.spapas.net,2021-08-25:/2021/08/25/django-token-rest-auth/</id><summary type="html">&lt;p class="first last"&gt;How to authenticate django-rest-framework with&amp;nbsp;tokens&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In a &lt;a class="reference external" href="https://www.spapas.net/2018/03/01/django-rest-auth/"&gt;a previous article&lt;/a&gt;
I explained how to authenticate for your django-rest-framework &lt;span class="caps"&gt;API&lt;/span&gt;
using the django-rest-auth package.
Since then I have observed that various things have changed and most importantly that
the library I used there (django-rest-auth) is not updated anymore and has been
superseded by another one. Also, some of my information there is contradictory,
especially the parts that deal with the session authentication and csrf&amp;nbsp;protection.&lt;/p&gt;
&lt;p&gt;Thus I&amp;#8217;ve written this new article that betters describes a recommended
authentication workflow using tokens. This workflow does not rely on sessions at all.
Beyond that, is more or less the same as the previous one with some updates
and clarifications where&amp;nbsp;needed.&lt;/p&gt;
&lt;p&gt;I have also updated the accompanying project of the previous article which
can be found on &lt;a class="reference external" href="https://github.com/spapas/rest_authenticate"&gt;https://github.com/spapas/rest_authenticate&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Before continuing with the tutorial, let&amp;#8217;s take a look at what we&amp;#8217;ll build&amp;nbsp;here:&lt;/p&gt;
&lt;img alt="Our project" src="/images/rest-auth.gif" style="width: 640px;" /&gt;
&lt;p&gt;This is a single html page (styled with &lt;a class="reference external" href="https://picturepan2.github.io/spectre/"&gt;spectre.css&lt;/a&gt;) that checks if the user is logged in
and either displays the login or logout button (using javascript). When you click the login you&amp;#8217;ll get a modal in which you
can enter your credentials which will be submitted through &lt;span class="caps"&gt;REST&lt;/span&gt; to the authentication endpoint and
depending on the response will set a javascript variable (and a corresponding session/local storage key).
Then you can use the &amp;#8220;Test auth&amp;#8221; button that works only on authenticated users and returns their username.
Finally, notice that after you log out the &amp;#8220;test auth&amp;#8221; button returns a 403 access&amp;nbsp;denied.&lt;/p&gt;
&lt;p&gt;The javascript client uses token authentication so you can run the client in the same server as the server or
in a completely different server (if you are using the proper &lt;span class="caps"&gt;CORS&lt;/span&gt; headers of&amp;nbsp;course).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-theory"&gt;
&lt;h2&gt;Some&amp;nbsp;theory&lt;/h2&gt;
&lt;p&gt;Here I will try to explain a bunch of important&amp;nbsp;concepts:&lt;/p&gt;
&lt;div class="section" id="sessions"&gt;
&lt;h3&gt;Sessions&lt;/h3&gt;
&lt;p&gt;After you log in with Django normally, your authentication information is saved to the &lt;a class="reference external" href="https://docs.djangoproject.com/en/stable/topics/http/sessions/"&gt;session&lt;/a&gt;.
The session is a bucket of information
that the Django application saves about your visit &amp;#8212; to distinguish between different visitors a cookie with a unique
value named &lt;tt class="docutils literal"&gt;sessionid&lt;/tt&gt; will be used. So, your web browser will send this cookie with each page request thus allowing Django
to know which bucket of information is yours (and if you&amp;#8217;ve authenticated know who are you). This is not a Django
related concept but a general one (supported by most if not all &lt;span class="caps"&gt;HTTP&lt;/span&gt; frameworks) and is used to add state to an otherwise
stateless medium (&lt;span class="caps"&gt;HTTP&lt;/span&gt;).&lt;/p&gt;
&lt;p&gt;Since the &lt;tt class="docutils literal"&gt;sessionid&lt;/tt&gt; cookie is sent not only with traditional but also with Ajax request it can be used to authenticate
&lt;span class="caps"&gt;REST&lt;/span&gt; requests after you&amp;#8217;ve logged in. This is what is used by default in django-rest-framework is a very good solution for
most use cases: You login to django and you can go ahead and call the &lt;span class="caps"&gt;REST&lt;/span&gt;
&lt;span class="caps"&gt;API&lt;/span&gt; through Ajax; the &lt;tt class="docutils literal"&gt;sessionid&lt;/tt&gt; cookie will be sent along with the request and you&amp;#8217;ll be authenticated&amp;nbsp;automatically.&lt;/p&gt;
&lt;p&gt;Now, although the session authentication is nice for using in browsers, you may need to access your &lt;span class="caps"&gt;API&lt;/span&gt; through a desktop
or a mobile application where, setting the cookies yourself is not the optimal solution. Also, you may have an &lt;span class="caps"&gt;SPA&lt;/span&gt; that needs
to access an &lt;span class="caps"&gt;API&lt;/span&gt; in a different domain; using &lt;a class="reference external" href="https://stackoverflow.com/questions/3342140/cross-domain-cookies"&gt;using cookies for this is not easy&lt;/a&gt; - if possible at&amp;nbsp;all.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="csrf-protection"&gt;
&lt;h3&gt;&lt;span class="caps"&gt;CSRF&lt;/span&gt;&amp;nbsp;protection&lt;/h3&gt;
&lt;p&gt;One important thing that you should be aware if you are going to use session authentication for your &lt;span class="caps"&gt;API&lt;/span&gt; is the
&lt;a class="reference external" href="https://docs.djangoproject.com/en/stable/ref/csrf/"&gt;&lt;span class="caps"&gt;CSRF&lt;/span&gt; protection&lt;/a&gt;. This is a mechanism that helps prevent cross-site request forgery (&lt;span class="caps"&gt;CSRF&lt;/span&gt;) attacks.
A &lt;span class="caps"&gt;CSRF&lt;/span&gt; attack works like this: Let&amp;#8217;s suppose that site A is a bank, and has a form with an email and a money amount.
When the user submits the form via &lt;span class="caps"&gt;POST&lt;/span&gt; it will send this much money to the entered email using Paypal. Now, site B is
a malicious site. When the user visits site B, it will automatically generate a &lt;span class="caps"&gt;POST&lt;/span&gt; request containing the malicious
user&amp;#8217;s email and the money he wants and submit it to site A. Now, if the user is authenticated with sessions on site A
then site A will think that this is a valid form submission and will actually process the form as normally and send the
money to the malicious&amp;nbsp;user!&lt;/p&gt;
&lt;p&gt;As you can understand this is a very serious and easy to exploit attack. To prevent this attack, the &lt;span class="caps"&gt;CSRF&lt;/span&gt; protection is
used: In order to submit the form on site A, the request must contain a unique string (the &lt;span class="caps"&gt;CSRF&lt;/span&gt; token) that is generated
automatically by site A. Thankfully, site B cannot access this token and thus cannot submit the&amp;nbsp;form.&lt;/p&gt;
&lt;p&gt;The &lt;span class="caps"&gt;CSRF&lt;/span&gt; situation is only related to sessions. If you are not using sessions then &lt;span class="caps"&gt;CSRF&lt;/span&gt; protection is not needed because
there&amp;#8217;s no way for site B to submit the form on site A (for example, with TokenAuthentication, site B cannot access the
token that site A&amp;nbsp;has).&lt;/p&gt;
&lt;p&gt;However if you &lt;em&gt;are&lt;/em&gt; using sessions then you must be extra careful
to protect your &lt;span class="caps"&gt;POST&lt;/span&gt; views against &lt;span class="caps"&gt;CSRF&lt;/span&gt; attacks. Django does this by default so you don&amp;#8217;t need to do anything
fancy. However, when you actually want to submit a form using an &lt;span class="caps"&gt;API&lt;/span&gt; with sessions you must be careful to also
include the &lt;span class="caps"&gt;CSRF&lt;/span&gt; token as explained in the Django docs about the topic (&lt;a class="reference external" href="https://docs.djangoproject.com/en/stable/ref/csrf/"&gt;&lt;span class="caps"&gt;CSRF&lt;/span&gt; protection&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tokens"&gt;
&lt;h3&gt;Tokens&lt;/h3&gt;
&lt;p&gt;For cases where you can&amp;#8217;t use the session to authenticate, django-rest-framework
offers a different authentication method called &lt;tt class="docutils literal"&gt;TokenAuthentication_&lt;/tt&gt;. Using this method, each user of the Django application
is correlated with a random string (Token) which is passed along with each request at its header thus the Django app can authenticate
the user using this token. The token is retrieved when the user logs using his credentials and is saved in the&amp;nbsp;browser.&lt;/p&gt;
&lt;p&gt;One thing that may seem strange is that since both the session cookie and a token are
set through &lt;span class="caps"&gt;HTTP&lt;/span&gt; Headers why all the fuss about tokens? Why not just use the session cookie and be done with it?
Well, there are
various reasons - here&amp;#8217;s a &lt;a class="reference external" href="https://auth0.com/blog/angularjs-authentication-with-cookies-vs-token/"&gt;rather extensive article&lt;/a&gt; explaining some of them. Some of the reasons are that a token can be valid forever
while the session is something ephemeral - beyond authorization information, sessions may keep various other data for a web
application and are expired after some time to save space. Also, since tokens are used for exactly this (authentication) they
are much easier to use and reason about. Finally, as I&amp;#8217;ve already explained, sharing cookies by multiple sites is not something
you&amp;#8217;d like to do. Actually, to make things easier for you just follow this rule:
&lt;strong&gt;If your &lt;span class="caps"&gt;API&lt;/span&gt; will be run on a different domain  than your client (i.e api.example.com and www.example.com)
or your client not run on the web (i.e. is a desktop/mobile app) then you must not use session authentication&lt;/strong&gt;. Use token
authentication as proposed here or whatever else you may want that doesn&amp;#8217;t rely on&amp;nbsp;sessions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cors"&gt;
&lt;h3&gt;&lt;span class="caps"&gt;CORS&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Another thing that must concern the people that will want to use an &lt;span class="caps"&gt;API&lt;/span&gt; is the &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"&gt;&lt;span class="caps"&gt;CORS&lt;/span&gt;&lt;/a&gt; situation.
By default cross-origin requests are not allowed, i.e site B cannot issue Ajax requests to site A.
Each server can be configured to allow cross-origin requests from other servers. This means that
if you have a server api.example.com that is used as a backend and a server www.example.com that will
serve your front-end, you can configure api.example.com to allow requests only from&amp;nbsp;www.example.com.&lt;/p&gt;
&lt;p&gt;By default Django does not allow any cross origin requests and you need to use the &lt;a class="reference external" href="https://github.com/adamchainz/django-cors-headers"&gt;django-cors-headers&lt;/a&gt;
package to properly configure&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Notice that &lt;span class="caps"&gt;CORS&lt;/span&gt; protection is enforced by the Browser. For example if you have build a mobile app
and are consuming an &lt;span class="caps"&gt;API&lt;/span&gt; in api.example.com then &lt;span class="caps"&gt;CORS&lt;/span&gt; protection does not apply to your http&amp;nbsp;client.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="installation-configuration"&gt;
&lt;h2&gt;Installation &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt;&amp;nbsp;configuration&lt;/h2&gt;
&lt;p&gt;The project will use &lt;a class="reference external" href="http://www.django-rest-framework.org"&gt;django-rest-framework&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/iMerica/dj-rest-auth"&gt;dj-rest-auth&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/adamchainz/django-cors-headers"&gt;django-cors-headers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To install django-rest-framework and dj-rest-auth just follow &lt;a class="reference external" href="https://dj-rest-auth.readthedocs.io/en/latest/installation.html"&gt;the instructions here&lt;/a&gt; i.e just add
&lt;tt class="docutils literal"&gt;'rest_framework', 'rest_framework.authtoken'&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;'dj_rest_auth'&lt;/tt&gt; to your &lt;cite&gt;INSTALLED_APPS&lt;/cite&gt; in
&lt;tt class="docutils literal"&gt;settings.py&lt;/tt&gt; and run&amp;nbsp;migrate.&lt;/p&gt;
&lt;p&gt;To install django-cors-headers follow the &lt;a class="reference external" href="https://github.com/adamchainz/django-cors-headers#setup"&gt;the setup instructions&lt;/a&gt;: Add &lt;tt class="docutils literal"&gt;&amp;quot;corsheaders&amp;quot;&lt;/tt&gt; to your &lt;tt class="docutils literal"&gt;INSTALLED_APPS&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;&amp;quot;django.middleware.common.CommonMiddleware&amp;quot;&lt;/tt&gt; to your &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;MIDDLEWARE&lt;/span&gt;&lt;/tt&gt; in &lt;tt class="docutils literal"&gt;settings.py&lt;/tt&gt;. Then you can use the
&lt;tt class="docutils literal"&gt;CORS_ALLOWED_ORIGINS&lt;/tt&gt; setting to configure which origins are allowed to make requests to your project. Let&amp;#8217;s
suppose that you are running your project at 127.0.0.1:8000 and you want to allow requests from a client
running at 127.0.0.1:8001. You can do this by adding the following to your settings.py:
&lt;tt class="docutils literal"&gt;CORS_ALLOWED_ORIGINS = &lt;span class="pre"&gt;['http://127.0.0.1:8001',&lt;/span&gt; &lt;span class="pre"&gt;'http://localhost:8001']&lt;/span&gt;&lt;/tt&gt;. Actually, try running the project
with and without that setting and see how the javascript client&amp;nbsp;behaves.&lt;/p&gt;
&lt;p&gt;Since I won&amp;#8217;t be adding any other apps to this project (no models are actually needed), I&amp;#8217;ve added
two directories &lt;tt class="docutils literal"&gt;static&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;templates&lt;/tt&gt; to put static files and templates there. This is configured
by adding the &lt;tt class="docutils literal"&gt;'&lt;span class="caps"&gt;DIRS&lt;/span&gt;'&lt;/tt&gt; attribte to &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;TEMPLATES&lt;/span&gt;&lt;/tt&gt;, like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;TEMPLATES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;BACKEND&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;django.template.backends.django.DjangoTemplates&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;DIRS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;templates&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and adding the &lt;cite&gt;STATICFILES_DIRS&lt;/cite&gt; setting:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;STATICFILES_DIRS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;static&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The remaining setting are the default as were created by &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;django-admin&lt;/span&gt; startproject&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="urls"&gt;
&lt;h2&gt;Urls&lt;/h2&gt;
&lt;p&gt;I have included the the following urls to &lt;tt class="docutils literal"&gt;urls.py&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;admin/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test_auth/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TestAuthView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test_auth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rest-auth/logout/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LogoutViewEx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rest_logout&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rest-auth/login/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LoginView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rest_login&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HomeTemplateView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;home&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;static&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;STATIC_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;document_root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;STATIC_ROOT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These are: The django-admin, a &lt;tt class="docutils literal"&gt;test_auth&lt;/tt&gt; view (that works only for authenticated users and returns their username),
a view (&lt;tt class="docutils literal"&gt;LogoutViewEx&lt;/tt&gt;) that overrides the rest-auth &lt;span class="caps"&gt;REST&lt;/span&gt; logout-view (I&amp;#8217;ll explain why this is needed in a minute),
the rest-auth &lt;span class="caps"&gt;REST&lt;/span&gt; login-view, the home template view (which is the only view implemented) and finally a mapping
of your static files to the &lt;tt class="docutils literal"&gt;STATIC_URL&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;LoginView&lt;/tt&gt; is the default provided by the dj-rest-auth project. One thing to consider is that
this view will check if the credentials you pass are valid and return a valid token for your user. However,
it will also optionally login the user using sessions (i.e create a new session and return a sessionid cookie). This
is configured by the &lt;tt class="docutils literal"&gt;REST_SESSION_LOGIN&lt;/tt&gt; option which by default is &lt;tt class="docutils literal"&gt;True&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;To test this functionality, try logging in using this login view with a superuser and then visit the django-admin. You
will see that you are already logged in. Now, logout and add (or change) &lt;tt class="docutils literal"&gt;REST_SESSION_LOGIN=False&lt;/tt&gt; to your settings.py.
Login again from the rest view and now if you visit the django-admin you should see that you need to login&amp;nbsp;again.&lt;/p&gt;
&lt;p&gt;Another way to test this is by checking out the response headers of the &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;POST&lt;/span&gt;&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;rest-auth/login/&lt;/span&gt;&lt;/tt&gt; from your
browser&amp;#8217;s development tools. When you are using &lt;tt class="docutils literal"&gt;REST_SESSION_LOGIN=True&lt;/tt&gt; (or you haven&amp;#8217;t defined it since by
default it is true) you&amp;#8217;ll see the following &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Set-Cookie&lt;/span&gt;&lt;/tt&gt; line:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
sessionid=pw8rp7l7yy33lk7geuxbczaleh35w9je; expires=Wed, 08 Sep 2021 08:29:40 GMT; HttpOnly; Max-Age=1209600; Path=/; SameSite=Lax
&lt;/pre&gt;
&lt;p&gt;This cookie won&amp;#8217;t be set if you login again with &lt;tt class="docutils literal"&gt;REST_SESSION_LOGIN=False&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-views"&gt;
&lt;h2&gt;The&amp;nbsp;views&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;ve defined three views in this application - the &lt;tt class="docutils literal"&gt;HomeTemplateView&lt;/tt&gt;, the &lt;tt class="docutils literal"&gt;TestAuthView&lt;/tt&gt;
and the &lt;tt class="docutils literal"&gt;LogoutViewEx&lt;/tt&gt; view that overrides the normal &lt;tt class="docutils literal"&gt;LogoutView&lt;/tt&gt; of &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;django-rest-auth&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="section" id="hometemplateview"&gt;
&lt;h3&gt;HomeTemplateView&lt;/h3&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;HomeTemplateView&lt;/tt&gt; is
a simple &lt;tt class="docutils literal"&gt;TemplateView&lt;/tt&gt; that just
displays an html page and loads the client side code - we&amp;#8217;ll talk about it later in the front-side section.
This is more or less similar (without the django-stuff) with the standalone client  page that can be found on
&lt;tt class="docutils literal"&gt;client/index.html&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="testauthview"&gt;
&lt;h3&gt;TestAuthView&lt;/h3&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;TestAuthView&lt;/tt&gt; is implemented like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestAuthView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;APIView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;authentication_classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;authentication&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TokenAuthentication&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
    &lt;span class="n"&gt;permission_classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;permissions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAuthenticated&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello {0}!&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello {0}! Posted!&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is very simple however I&amp;#8217;d like to make a few comments about the above. First of all you see that
I&amp;#8217;ve defined both a &lt;tt class="docutils literal"&gt;get&lt;/tt&gt; and a &lt;tt class="docutils literal"&gt;post&lt;/tt&gt; method. When you use the token authentication you&amp;#8217;ll see that the
&lt;tt class="docutils literal"&gt;post&lt;/tt&gt; method will work without the need to provide a csrf token as already discussed&amp;nbsp;before.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="authentication-and-permission"&gt;
&lt;h3&gt;Authentication and&amp;nbsp;permission&lt;/h3&gt;
&lt;p&gt;Notice that both &lt;tt class="docutils literal"&gt;authentication_classes&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;permission_classes&lt;/tt&gt; are included in the &lt;tt class="docutils literal"&gt;TestAuthView&lt;/tt&gt;. These options&amp;nbsp;define:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;which method will be used for authenticating access to the &lt;span class="caps"&gt;REST&lt;/span&gt; view i.e finding out if the user
requesting access has logged in and if yes what&amp;#8217;s his username (in our case only &lt;tt class="docutils literal"&gt;TokenAuthentication&lt;/tt&gt; will be&amp;nbsp;used)&lt;/li&gt;
&lt;li&gt;if the user is authorized (has permission) to call this &lt;span class="caps"&gt;REST&lt;/span&gt; view (in our case only authenticated users will be&amp;nbsp;allowed)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The authentication and permission classes can be set globally
in your &lt;tt class="docutils literal"&gt;settings.py&lt;/tt&gt; using &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;REST_FRAMEWORK['DEFAULT_AUTHENTICATION_CLASSES']&lt;/span&gt;&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;REST_FRAMEWORK['DEFAULT_PERMISSION_CLASSES']&lt;/span&gt;&lt;/tt&gt;
or defined per-class like this. If I wanted to have the same authentication and permission classes defined
in my &lt;tt class="docutils literal"&gt;settings.py&lt;/tt&gt; so I wouldn&amp;#8217;t need to set these options per-class I&amp;#8217;d add the following to my &lt;tt class="docutils literal"&gt;settings.py&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;REST_FRAMEWORK&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;DEFAULT_AUTHENTICATION_CLASSES&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;rest_framework.authentication.TokenAuthentication&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;DEFAULT_PERMISSION_CLASSES&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;rest_framework.permissions.IsAuthenticated&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Please keep in mind that you haven&amp;#8217;t defined these in your views or your settings, they will have the
following &lt;a class="reference external" href="http://www.django-rest-framework.org/api-guide/settings/#default_authentication_classes"&gt;default&lt;/a&gt; &lt;a class="reference external" href="http://www.django-rest-framework.org/api-guide/settings/#default_permission_classes"&gt;values&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;REST_FRAMEWORK&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;DEFAULT_AUTHENTICATION_CLASSES&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;rest_framework.authentication.SessionAuthentication&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;rest_framework.authentication.BasicAuthentication&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;DEFAULT_PERMISSION_CLASSES&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;rest_framework.permissions.AllowAny&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above mean that if you don&amp;#8217;t define authentication and permission classes anywhere then the &lt;span class="caps"&gt;REST&lt;/span&gt;
views will use either session authentication (i.e the user has logged in normally using
the Django login views as explained before) or &lt;span class="caps"&gt;HTTP&lt;/span&gt; basic authentication
(the request provides the credentials in the header using traditional &lt;span class="caps"&gt;HTTP&lt;/span&gt; Basic authentication)
and also that all users (logged in or not) will be allowed to call all APIs (this is
probably not something you&amp;nbsp;want).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;Tokens&lt;/h3&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;TokenAuthentication&lt;/tt&gt; that we are using for the &lt;tt class="docutils literal"&gt;TestAuthView&lt;/tt&gt;
means that for every request a valid token must be passed (there&amp;#8217;s no concept of state
in &lt;span class="caps"&gt;HTTP&lt;/span&gt; so you need to pass it whenever you communicate with the&amp;nbsp;server).&lt;/p&gt;
&lt;p&gt;The tokens are normal object instances of &lt;tt class="docutils literal"&gt;rest_framework.authtoken.models.Token&lt;/tt&gt;
and you can take a look at them (or even add one) through the Django admin (auth token - tokens). You can also
even do whatever you normally would do to an object instance, for&amp;nbsp;example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;db4dcc1b9d00d1af74fb3cb41e1f9e673208485b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To authenticate with a token (using &lt;a class="reference external" href="http://www.django-rest-framework.org/api-guide/authentication/#tokenauthentication"&gt;TokenAuthentication&lt;/a&gt;), you must add an extra header to your request with the format
&lt;tt class="docutils literal"&gt;Authorization: Token token&lt;/tt&gt; for example in the previous case &lt;tt class="docutils literal"&gt;root&lt;/tt&gt; would add
&lt;tt class="docutils literal"&gt;Authorization: Token db4dcc1b9d00d1af74fb3cb41e1f9e673208485b&lt;/tt&gt;. To do this you&amp;#8217;ll need something
client-side code which we&amp;#8217;ll see in the next&amp;nbsp;section.&lt;/p&gt;
&lt;p&gt;To debug your authentication with &lt;a class="reference external" href="https://curl.haxx.se"&gt;curl&lt;/a&gt; you can just do something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl http://127.0.0.1:8000/test_auth/ -H &lt;span class="s2"&gt;&amp;quot;Authorization:Token db4dcc1b9d00d1af74fb3cb41e1f9e673208485b&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Try it with a valid and invalid token and without providing a token at all and see the response each&amp;nbsp;time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dj-rest-auth"&gt;
&lt;h3&gt;dj-rest-auth&lt;/h3&gt;
&lt;p&gt;So, django-rest-framework provides the model (Token) and the mechanism (add the extra Authentication header) for
authentication with Tokens. What it does not provide is a simple way to create/remove tokens for users: This
is where the dj-rest-auth project comes to the rescue! Its login and logout &lt;span class="caps"&gt;REST&lt;/span&gt; views will automatically
create (and delete) tokens for the users that are logging&amp;nbsp;in.&lt;/p&gt;
&lt;p&gt;As already described above, the login view will also authenticate the user
using the session when the REST_SESSION_LOGIN is set to True (default) - this means that if a user
logs in using the login &lt;span class="caps"&gt;REST&lt;/span&gt; endpoint he&amp;#8217;ll then
be logged in normally to the site and be able to access non-&lt;span class="caps"&gt;REST&lt;/span&gt; parts of the site (for example the&amp;nbsp;django-admin).&lt;/p&gt;
&lt;p&gt;Also, if the user logs in through the dj-rest-auth &lt;span class="caps"&gt;REST&lt;/span&gt; end point and if you have are using &lt;tt class="docutils literal"&gt;SessionAuthentication&lt;/tt&gt;
to one of your views then he&amp;#8217;ll be able to authenticate to these views &lt;em&gt;without&lt;/em&gt; the need to pass the token (make sure
you understand&amp;nbsp;why).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="logoutviewex"&gt;
&lt;h3&gt;LogoutViewEx&lt;/h3&gt;
&lt;p&gt;Finally, let&amp;#8217;s take a look at the &lt;tt class="docutils literal"&gt;LogoutViewEx&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LogoutViewEx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LogoutView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;authentication_classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;authentication&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TokenAuthentication&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This class only defines the authentication_classes attribute. Is this really needed? Well, it depends on
you project. If you take a look at the source code of
&lt;tt class="docutils literal"&gt;LogoutView&lt;/tt&gt; (&lt;a class="reference external" href="https://github.com/iMerica/dj-rest-auth/blob/master/dj_rest_auth/views.py#L131"&gt;https://github.com/iMerica/dj-rest-auth/blob/master/dj_rest_auth/views.py#L131&lt;/a&gt;)
you&amp;#8217;ll see that it does not define &lt;tt class="docutils literal"&gt;authentication_classes&lt;/tt&gt;. This, as we&amp;#8217;ve already discussed, means that it will
fall-back to whatever you have defined in the settings (or the defaults of&amp;nbsp;django-rest-framework).&lt;/p&gt;
&lt;p&gt;So, if you haven&amp;#8217;t
defined anything in the settings then you&amp;#8217;ll get the by default the
&lt;tt class="docutils literal"&gt;SessionAuthentication&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;BasicAuthentication&lt;/tt&gt; methods (hint: &lt;em&gt;not&lt;/em&gt; the &lt;tt class="docutils literal"&gt;TokenAuthentication&lt;/tt&gt;).
This means that you won&amp;#8217;t be able to
logout when you pass the token (but &lt;em&gt;will&lt;/em&gt; be able to logout from the web-app after you login - why?). So to make everything
crystal and be able to reason better about the behavior I specifically define the &lt;tt class="docutils literal"&gt;LogoutViewEx&lt;/tt&gt; to use
the &lt;tt class="docutils literal"&gt;TokenAuthentication&lt;/tt&gt; to properly log out your user. This of course means that you need to pass
the token to your logout view also or else there won&amp;#8217;t be any way to associate the request with a user to log&amp;nbsp;out.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-client-side-scripts"&gt;
&lt;h2&gt;The client side&amp;nbsp;scripts&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;ve included all client-side code to a &lt;tt class="docutils literal"&gt;home.html&lt;/tt&gt; template that is loaded
from the &lt;tt class="docutils literal"&gt;HomeTemplateView&lt;/tt&gt;. Also, the same code has been included in &lt;tt class="docutils literal"&gt;client/index.html&lt;/tt&gt;. This is
a completely standalone javascript client that you can run in a different http server than your Django server,
for example by running &lt;tt class="docutils literal"&gt;py &lt;span class="pre"&gt;-3&lt;/span&gt; &lt;span class="pre"&gt;-m&lt;/span&gt;&amp;nbsp; http.server 8001&lt;/tt&gt; from the client folder and visiting &lt;a class="reference external" href="http://127.0.0.1:8001"&gt;http://127.0.0.1:8001&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The client-side code has been implemented only with jQuery because I think
this is the library that most people are familiar with - and is really easy to be understood even if you
are not familiar with it. It more or less consists of five sections in&amp;nbsp;html:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A user-is-logged-in section that displays the username and the logout&amp;nbsp;button&lt;/li&gt;
&lt;li&gt;A user-is-not-logged-in section that displays a message and the login&amp;nbsp;button&lt;/li&gt;
&lt;li&gt;A test-auth section that displays a button for calling the &lt;tt class="docutils literal"&gt;TestAuthView&lt;/tt&gt; with &lt;span class="caps"&gt;GET&lt;/span&gt; defined previously and outputs its&amp;nbsp;response&lt;/li&gt;
&lt;li&gt;A test-auth &lt;span class="caps"&gt;POST&lt;/span&gt; section that displays a button for calling the &lt;tt class="docutils literal"&gt;TestAuthView&lt;/tt&gt; with &lt;span class="caps"&gt;POST&lt;/span&gt; defined previously and outputs its&amp;nbsp;response&lt;/li&gt;
&lt;li&gt;The login&amp;nbsp;modal&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&amp;#8217;s the html (using spectre.css for&amp;nbsp;styling):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;container grid-lg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Test&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;columns&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;non-logged-in&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;column col-3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        You have to log-in!
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;column col-3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;btn btn-primary&amp;quot;&lt;/span&gt;  &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;loginButton&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Login&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;columns&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;logged-in&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;column col-3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Welcome &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;span-username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;!
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;column col-3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;btn btn-primary&amp;quot;&lt;/span&gt;  &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;logoutButton&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Logout&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;hr&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;columns&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;column col-3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;btn btn-primary&amp;quot;&lt;/span&gt;  &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;testAuthButton&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Test auth&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;column col-9&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;test-auth-response&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;hr&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;columns&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;column col-3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;btn btn-primary&amp;quot;&lt;/span&gt;  &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;testAuthPostButton&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Test auth (POST)&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;column col-9&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;test-auth-post-response&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;modal&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;login-modal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#close&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;modal-overlay close-modal&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;aria-label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Close&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;modal-container&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;modal-header&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#close&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;btn btn-clear float-right close-modal&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;aria-label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Close&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;modal-title h5&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Please login&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;modal-body&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    {% csrf_token %}
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;form-group&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;form-label&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;input-username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Username&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;form-input&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;input-username&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;form-group&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;form-label&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;input-password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Password&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;form-input&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;password&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;input-password&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;form-group&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;form-checkbox&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;input-local-storage&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;input-local-storage&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;i&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;form-icon&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  Use local storage (remember me)
                        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;label label-error mt-1 d-invisible&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;modal-error&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    Unable to login!
                &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;modal-footer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;btn btn-primary&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;loginOkButton&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Ok&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#close&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;btn close-modal&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Close&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The html is very simple and I don&amp;#8217;t think I need to explain much  - notice that the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;#logged-in&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;#non-logged-in&lt;/span&gt;&lt;/tt&gt;
sections are mutually exclusive (I use &lt;tt class="docutils literal"&gt;$.show()&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;$.hide()&lt;/tt&gt; to show and hide them) but the &lt;tt class="docutils literal"&gt;#test&lt;/tt&gt; section is always displayed
so you&amp;#8217;ll be able to call the test &lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; when you are and are not authenticated. For the modal
to be displayed you need to add an &lt;tt class="docutils literal"&gt;active&lt;/tt&gt; class to its &lt;tt class="docutils literal"&gt;#modal&lt;/tt&gt; container.&lt;/p&gt;
&lt;p&gt;For the javascript, let&amp;#8217;s take a look at some initialization&amp;nbsp;stuff:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;g_urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;login&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{% url &amp;quot;rest_login&amp;quot; %}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;logout&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{% url &amp;quot;rest_logout&amp;quot; %}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;test_auth&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{% url &amp;quot;test_auth&amp;quot; %}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;g_auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;auth&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g_auth&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;g_auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sessionStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;auth&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g_auth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;g_auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g_auth&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;g_auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;initLogin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g_auth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#non-logged-in&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;hide&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#logged-in&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#span-username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g_auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g_auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remember_me&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;auth&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g_auth&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;sessionStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;auth&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g_auth&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#non-logged-in&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#logged-in&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;hide&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#span-username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;auth&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;sessionStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;auth&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#test-auth-response&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#test-auth-post-response&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;First of all, I define a &lt;tt class="docutils literal"&gt;g_urls&lt;/tt&gt; window/global object that will keep the required &lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;URLS&lt;/span&gt; (login/logout and test auth). These
are retrieved from Django using the &lt;tt class="docutils literal"&gt;{% url %}&lt;/tt&gt; template tag and are not hard-coded (in the js only client they are hard-coded of course).
After that, I check to see if the user has authenticated before. Notice that because
this is client-side code, I need to do that every time the page loads or else the &lt;span class="caps"&gt;JS&lt;/span&gt; won&amp;#8217;t be initialized properly! The user login
information is stored to an object named &lt;tt class="docutils literal"&gt;g_auth&lt;/tt&gt; and contains three attributes: &lt;tt class="docutils literal"&gt;username&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;key&lt;/tt&gt; (token) and &lt;tt class="docutils literal"&gt;remember_me&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;To keep the login information I use either a key named &lt;tt class="docutils literal"&gt;auth&lt;/tt&gt; to either the &lt;tt class="docutils literal"&gt;localStorage&lt;/tt&gt; or the &lt;tt class="docutils literal"&gt;sessionStorage&lt;/tt&gt;. The &lt;tt class="docutils literal"&gt;sessionStorage&lt;/tt&gt; is used to save
info for the current browser tab (&lt;em&gt;not&lt;/em&gt; window) while the &lt;tt class="docutils literal"&gt;localStorage&lt;/tt&gt; saves info for ever (until somebody deletes it). Thus,
&lt;tt class="docutils literal"&gt;localStorage&lt;/tt&gt; can be used for implementing a &amp;#8220;remember me&amp;#8221;&amp;nbsp;functionality.&lt;/p&gt;
&lt;p&gt;The final function we define here, &lt;tt class="docutils literal"&gt;initLogin&lt;/tt&gt; (which is called a little later) checks to see if there is login information
and hides/displays the correct things in html. It will also set the local or session storage (depending on remember me&amp;nbsp;value).&lt;/p&gt;
&lt;p&gt;After that, we have some client side code that is inside the &lt;tt class="docutils literal"&gt;$()&lt;/tt&gt; function which will be called after the page has completely&amp;nbsp;loaded:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;initLogin&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#loginButton&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#login-modal&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;active&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.close-modal&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#login-modal&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;removeClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;active&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#testAuthButton&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;g_urls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test_auth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;beforeSend&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g_auth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setRequestHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Authorization&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Token &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;g_auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#test-auth-response&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;span class=&amp;#39;label label-success&amp;#39;&amp;gt;Ok! Response: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#test-auth-response&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;span class=&amp;#39;label label-error&amp;#39;&amp;gt;Fail! Response: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;responseText&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; (status: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;)&amp;lt;/span&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#testAuthPostButton&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Same as with the GET&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="c1"&gt;// continuing below ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first thing happening here is to call the &lt;tt class="docutils literal"&gt;initLogin&lt;/tt&gt; function to properly initialize the page and then we add a couple of
handlers to the click buttons of the &lt;tt class="docutils literal"&gt;#loginButton&lt;/tt&gt; (which just displays the modal by adding the &lt;tt class="docutils literal"&gt;active&lt;/tt&gt; class ),
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;.close-modal&lt;/span&gt;&lt;/tt&gt; class (there are multiple
ways to close the modal thus I use a class which just removes that &lt;tt class="docutils literal"&gt;active&lt;/tt&gt; class) and finally to the &lt;tt class="docutils literal"&gt;#testAuthButton&lt;/tt&gt;
and &lt;tt class="docutils literal"&gt;#testAuthPostButton#&lt;/tt&gt;.
These
button will do a &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;GET&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;POST&lt;/span&gt;&lt;/tt&gt; request to the &lt;tt class="docutils literal"&gt;g_urls.test_auth&lt;/tt&gt; we defined before. The important thing to notice
here is that we add
a &lt;tt class="docutils literal"&gt;beforeSend&lt;/tt&gt; attribute to the &lt;tt class="docutils literal"&gt;$.ajax&lt;/tt&gt; request which, if &lt;tt class="docutils literal"&gt;g_auth&lt;/tt&gt; is defined, adds an &lt;tt class="docutils literal"&gt;Authorization&lt;/tt&gt; header with the token
in the form that django-rest-framework &lt;tt class="docutils literal"&gt;TokenAuthentication&lt;/tt&gt; expects and as we&amp;#8217;ve already discussed&amp;nbsp;above:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;beforeSend&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g_auth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setRequestHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Authorization&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Token &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;g_auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If this ajax call returns without errors (the &lt;tt class="docutils literal"&gt;done&lt;/tt&gt; part of the ajax call)
we just add the &lt;tt class="docutils literal"&gt;data&lt;/tt&gt; to a green label else if there&amp;#8217;s an error (&lt;tt class="docutils literal"&gt;fail&lt;/tt&gt; part)
we add the response text and status to a red label. You can try clicking the buttons and you see that only if you&amp;#8217;ve logged in
you will succeed in this call. Also, notice that both &lt;span class="caps"&gt;GET&lt;/span&gt; and &lt;span class="caps"&gt;POST&lt;/span&gt; requests work normally without the need to also include
a csrf token (I hope you understand why by&amp;nbsp;now).&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s now take a look at the &lt;tt class="docutils literal"&gt;#loginOkbutton&lt;/tt&gt; click handler (inside the&amp;nbsp;modal):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#loginOkButton&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#input-username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#input-password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;remember_me&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#input-local-storage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;checked&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Will try to login with &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#modal-error&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;d-invisible&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;g_urls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DONE: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;g_auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;remember_me&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;remember_me&lt;/span&gt;
            &lt;span class="p"&gt;};&lt;/span&gt;
            &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#login-modal&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;removeClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;active&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;initLogin&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;FAIL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#modal-error&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;removeClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;d-invisible&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#modal-error&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;removeClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;d-invisible&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All three user inputs (&lt;tt class="docutils literal"&gt;username, password, remember_me&lt;/tt&gt;) are read from the form and if both username and
password have been defined an Ajax request will be done to the &lt;tt class="docutils literal"&gt;g_urls.login&lt;/tt&gt; url. We pass
&lt;tt class="docutils literal"&gt;username&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;password&lt;/tt&gt; as the request data. Now, if there&amp;#8217;s an
error (&lt;tt class="docutils literal"&gt;fail&lt;/tt&gt;) I just display a generic message (by removing it&amp;#8217;s &lt;cite&gt;d-invisible&lt;/cite&gt; class) while, if the
request was Ok I retrieve the &lt;tt class="docutils literal"&gt;key&lt;/tt&gt; (token) from the response, initialize the &lt;tt class="docutils literal"&gt;g_auth&lt;/tt&gt; object with the
&lt;tt class="docutils literal"&gt;username&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;key&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;remember_me&lt;/tt&gt; values and call &lt;tt class="docutils literal"&gt;initLogin&lt;/tt&gt; to show the correct divs and save
to the session/local&amp;nbsp;storage.&lt;/p&gt;
&lt;p&gt;Finally, here&amp;#8217;s the code for logout (still inside the &lt;tt class="docutils literal"&gt;$(function () {&lt;/tt&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#logoutButton&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Trying to logout&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;g_urls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;beforeSend&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setRequestHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Authorization&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Token &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;g_auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DONE: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;g_auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;initLogin&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;FAIL: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="p"&gt;});&lt;/span&gt; &lt;span class="c1"&gt;// End of $(function () {&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The code here is very simple - just do a &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;POST&lt;/span&gt;&lt;/tt&gt; to the &lt;tt class="docutils literal"&gt;g_urls.logout&lt;/tt&gt;  and if everything is ok delete the &lt;tt class="docutils literal"&gt;g_auth&lt;/tt&gt; values
and call &lt;tt class="docutils literal"&gt;initLogin()&lt;/tt&gt; to show the correct divs and remove the &lt;tt class="docutils literal"&gt;auth&lt;/tt&gt; key from local/session storage. Notice that when
you &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;POST&lt;/span&gt;&lt;/tt&gt; to the &lt;tt class="docutils literal"&gt;logout&lt;/tt&gt; &lt;span class="caps"&gt;REST&lt;/span&gt; end-point, you need to also add the &lt;tt class="docutils literal"&gt;Authorization&lt;/tt&gt; header with the token or else
(since we&amp;#8217;ve defined only &lt;tt class="docutils literal"&gt;TokenAuthentication&lt;/tt&gt; for the &lt;tt class="docutils literal"&gt;authentication_classes&lt;/tt&gt; for the &lt;tt class="docutils literal"&gt;LogoutViewEx&lt;/tt&gt; class)
there won&amp;#8217;t be any way to correlate the request with the user and log him&amp;nbsp;out!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Using the info presented on this article you should be able to properly login and logout to Django using &lt;span class="caps"&gt;REST&lt;/span&gt; and
also call &lt;span class="caps"&gt;REST&lt;/span&gt; end-points using the &lt;tt class="docutils literal"&gt;TokenAuthentication&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;I recommend using the &lt;tt class="docutils literal"&gt;curl&lt;/tt&gt; utility to try to call the rest
end point with various parameters to see the response. Also, you change the &lt;tt class="docutils literal"&gt;LogoutViewEx&lt;/tt&gt; with the
default django-rest-auth &lt;tt class="docutils literal"&gt;LogoutView&lt;/tt&gt; and then try logging out through the web-app &lt;em&gt;and&lt;/em&gt; through curl and see
what happens when you try to access the test-auth&amp;nbsp;end-point.&lt;/p&gt;
&lt;p&gt;As a final remark, a couple of thing to&amp;nbsp;note:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;You can use the &lt;a class="reference external" href="https://github.com/James1345/django-rest-knox"&gt;django-rest-knox&lt;/a&gt; package to improve the functionality and security of your &lt;span class="caps"&gt;REST&lt;/span&gt; tokens (by allowing multiple tokens per user, storing them hashed in the database and configuring expiration times for the&amp;nbsp;tokens)&lt;/li&gt;
&lt;li&gt;If you are using Apache and mod_wsgi to run you Django project you need to set the &lt;a class="reference external" href="https://modwsgi.readthedocs.io/en/develop/configuration-directives/WSGIPassAuthorization.html"&gt;WSGIPassAuthorization&lt;/a&gt; option to &lt;tt class="docutils literal"&gt;on&lt;/tt&gt; in order to pass the Authorization header to your Django&amp;nbsp;app.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="django"></category><category term="django"></category><category term="dj-rest-auth"></category><category term="rest"></category><category term="django-rest-framework"></category><category term="authentication"></category><category term="python"></category><category term="tokens"></category></entry><entry><title>Changing choices to a ForeignKey using DjangoÂ migrations</title><link href="https://www.spapas.net/2021/07/15/django-choices-to-fk-using-migrations/" rel="alternate"></link><published>2021-07-15T09:50:00+03:00</published><updated>2021-07-15T09:50:00+03:00</updated><author><name>Serafeim Papastefanos</name></author><id>tag:www.spapas.net,2021-07-15:/2021/07/15/django-choices-to-fk-using-migrations/</id><summary type="html">&lt;p class="first last"&gt;How to convert a choices field to a ForeignKey using Django&amp;nbsp;migrations&lt;/p&gt;
</summary><content type="html">&lt;p&gt;One common requirement I&amp;#8217;ve seen in projects is that a model will start with a
choices CharField but in the future this field will need to be converted to a normal
foreign key to another model. This is such a common requirement that I&amp;#8217;ve concluded that
you need to double think before using choices because there&amp;#8217;s a high possibility that in the
lifetime of your project you&amp;#8217;ll also need to convert it to a foreign&amp;nbsp;key.&lt;/p&gt;
&lt;p&gt;For example, let&amp;#8217;s suppose you&amp;#8217;ve got the following&amp;nbsp;model:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;CATEGORY_CHOICES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cat1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Category 1 name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,),&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cat2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Category 2 name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,),&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cat3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Category 3 name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,),&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cat4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Category 4 name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CATEGORY_CHOICES&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You will need to convert it like&amp;nbsp;this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Category&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Category&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PROTECT&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are various reasons that you may be forced to convert the choices field to a ForeignKey, some&amp;nbsp;are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Your site administrators may need to sometime change these choices&amp;nbsp;themselves&lt;/li&gt;
&lt;li&gt;You may want to add some properties to each choice i.e if a choice is active or&amp;nbsp;not&lt;/li&gt;
&lt;li&gt;The choices info is local in your django project. If for some reason you want your data to be used by a different project (for example execute a reporing query directly from the database) you&amp;#8217;ll just get the code for each choice (and not its name) leading you to ugly case statements in your queries to display the name of each choice. Furthermore, if the choices do change you&amp;#8217;ll need to change them in two places (your django project and your reporting&amp;nbsp;queries)&lt;/li&gt;
&lt;li&gt;The choice thing, although is very helpful and quick to implement leads to a non-normalized design. The name of each choice will be a string that would be duplicated to each row that has that particular&amp;nbsp;choice.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In a &lt;a class="reference external" href="https://www.spapas.net/2017/07/04/postgresql-auto-create-category-column/"&gt;previous article&lt;/a&gt; I had provided a recipe on how to
properly normalize a database table containing a choices field like this using &lt;span class="caps"&gt;PL&lt;/span&gt;/pgSQL. This script should work in
this case also but if you have a Django project then you &lt;em&gt;should&lt;/em&gt; use migrations to do the&amp;nbsp;conversion.&lt;/p&gt;
&lt;p&gt;So let&amp;#8217;s see how to convert our category choices field to a Foreign Key using django&amp;nbsp;migrations!&lt;/p&gt;
&lt;p&gt;The proper way to do it is in three distinct&amp;nbsp;steps/migrations:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Create the &lt;tt class="docutils literal"&gt;Category&lt;/tt&gt; model and add a foreign key to it in the &lt;tt class="docutils literal"&gt;Sample&lt;/tt&gt; model. &lt;em&gt;You should not remove the existing choices field&lt;/em&gt;! So you&amp;#8217;ll need to add another field to &lt;tt class="docutils literal"&gt;Sample&lt;/tt&gt; for example named &lt;tt class="docutils literal"&gt;category_fk&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Create a data migration to run a python script that will read the existing &lt;tt class="docutils literal"&gt;Sample&lt;/tt&gt; instances and fill their &lt;tt class="docutils literal"&gt;category_fk&lt;/tt&gt; field based on their &lt;tt class="docutils literal"&gt;category&lt;/tt&gt; field.&lt;/li&gt;
&lt;li&gt;Remove the &lt;tt class="docutils literal"&gt;category&lt;/tt&gt; field from &lt;tt class="docutils literal"&gt;Sample&lt;/tt&gt; model and rename &lt;tt class="docutils literal"&gt;category_fk&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;category&lt;/tt&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let&amp;#8217;s go through the steps one by&amp;nbsp;one:&lt;/p&gt;
&lt;p&gt;First we will change our initial models.py like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Category&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CATEGORY_CHOICES&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;category_fk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Category&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PROTECT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So I&amp;#8217;ve just added the &lt;tt class="docutils literal"&gt;Category&lt;/tt&gt; model and the  &lt;tt class="docutils literal"&gt;category_fk&lt;/tt&gt; field to the &lt;tt class="docutils literal"&gt;Sample&lt;/tt&gt; model. Notice the &lt;tt class="docutils literal"&gt;category&lt;/tt&gt; choices field is still there since I need it to fill my &lt;tt class="docutils literal"&gt;category_fk&lt;/tt&gt;!
Also notice that I&amp;#8217;ve added a &lt;tt class="docutils literal"&gt;null=True&lt;/tt&gt; to the &lt;tt class="docutils literal"&gt;category_fk&lt;/tt&gt; so it will allow the field to be added with a null value to the existing. I will fix that later.
We can create and run an automatic migration&amp;nbsp;now:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
C:\progr\py3\migrations_tutorial&amp;gt;python manage.py makemigrations
Migrations for 'core':
core\migrations\0002_auto_20210715_0836.py
  - Create model Category
  - Add field category_fk to sample

C:\progr\py3\migrations_tutorial&amp;gt;python manage.py migrate
  Operations to perform:
    Apply all migrations: admin, auth, contenttypes, core, sessions
  Running migrations:
    Applying core.0002_auto_20210715_0836... OK
&lt;/pre&gt;
&lt;p&gt;So now all my rows have an empty &lt;tt class="docutils literal"&gt;category_fk&lt;/tt&gt; field.&lt;/p&gt;
&lt;p&gt;For the second step, we will create the data migration that will fill the category_fk field. First of all let&amp;#8217;s create an empty migration (notice my app is called &lt;tt class="docutils literal"&gt;core&lt;/tt&gt;):&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
C:\progr\py3\migrations_tutorial&amp;gt;python manage.py makemigrations --empty core
Migrations for 'core':
  core\migrations\0003_auto_20210715_0844.py
&lt;/pre&gt;
&lt;p&gt;Let&amp;#8217;s take a look at what Django has created for&amp;nbsp;us:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;migrations&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

  &lt;span class="n"&gt;dependencies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;core&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;0002_auto_20210715_0836&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="n"&gt;operations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is an empty migration file, it just says that it will be run after the previous migration we just created. We&amp;#8217;ll need to
add an operation to it that will do the needed work of filling the &lt;tt class="docutils literal"&gt;category_fk&lt;/tt&gt; field.&lt;/p&gt;
&lt;p&gt;This can be done like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;migrations&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fill_category_fk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;schema_editor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;Sample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;core&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Sample&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;Category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;core&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Category&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;sample&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Sample&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;category_fk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_or_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

  &lt;span class="n"&gt;dependencies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;core&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;0002_auto_20210715_0836&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="n"&gt;operations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RunPython&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fill_category_fk&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above should be straight forward. The only thing to notice is that you should use &lt;tt class="docutils literal"&gt;migrations.RunPython&lt;/tt&gt; to declare that
the migration will need to run some python code. Notice that &lt;tt class="docutils literal"&gt;RunPython&lt;/tt&gt; takes a second parameter with another function which
will be run during the backwards migration. In our case we don&amp;#8217;t really need it, since we omit it, it will throw an error if
you try to apply this migration&amp;nbsp;backwards.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;fill_category_fk&lt;/tt&gt; uses the &lt;tt class="docutils literal"&gt;apps.get_model&lt;/tt&gt; function to have access to the models it needs. You should use this instead
of importing the models directly because the current state of the database models may not be the same as the state that the
migration expects. I&amp;#8217;m just using &lt;tt class="docutils literal"&gt;get_or_create&lt;/tt&gt; to insert or retrieve the proper &lt;tt class="docutils literal"&gt;Category&lt;/tt&gt; instance (remember that
&lt;tt class="docutils literal"&gt;get_or_create&lt;/tt&gt; returns an (instance, created) tuple so we need to use the first&amp;nbsp;element).&lt;/p&gt;
&lt;p&gt;Now we can try running the&amp;nbsp;migration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;\&lt;span class="n"&gt;progr&lt;/span&gt;\&lt;span class="n"&gt;py3&lt;/span&gt;\&lt;span class="n"&gt;migrations_tutorial&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;manage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;migrate&lt;/span&gt;
&lt;span class="n"&gt;Operations&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;Apply&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt; &lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contenttypes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sessions&lt;/span&gt;
&lt;span class="n"&gt;Running&lt;/span&gt; &lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;Applying&lt;/span&gt; &lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mo"&gt;0003&lt;/span&gt;&lt;span class="n"&gt;_auto_20210715_0844&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;OK&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If any errors happened you will see the stack trace here and you will need to fix them. Don&amp;#8217;t worry, the state of your database
will not be changed until the migration&amp;nbsp;finishes.&lt;/p&gt;
&lt;p&gt;Now our database has both the (old) &lt;tt class="docutils literal"&gt;category&lt;/tt&gt; and the (new) &lt;tt class="docutils literal"&gt;category_fk&lt;/tt&gt; fields. Each will have the same&amp;nbsp;value!&lt;/p&gt;
&lt;p&gt;Now we need to remove the old &lt;tt class="docutils literal"&gt;category&lt;/tt&gt; field and rename the existing &lt;tt class="docutils literal"&gt;category_fk&lt;/tt&gt;. Let&amp;#8217;s do&amp;nbsp;it!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Category&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PROTECT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And run the&amp;nbsp;migration:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
C:\progr\py3\migrations_tutorial&amp;gt;python manage.py makemigrations
Migrations for 'core':
  core\migrations\0004_auto_20210715_0909.py
    - Remove field category_fk from sample
    - Alter field category on sample
&lt;/pre&gt;
&lt;p&gt;Uh oh! This does not seem to do what I want. Let&amp;#8217;s take a peek at the generated migration&amp;nbsp;file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

  &lt;span class="n"&gt;dependencies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;core&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;0003_auto_20210715_0844&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="n"&gt;operations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RemoveField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="n"&gt;model_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sample&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;category_fk&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AlterField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="n"&gt;model_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sample&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;category&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deletion&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PROTECT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;core.Category&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will remove the &lt;tt class="docutils literal"&gt;category_fk&lt;/tt&gt; field we just filled from our model and then try to convert the old &lt;tt class="docutils literal"&gt;category&lt;/tt&gt; field
to a foreign key! If you try to run the migration you&amp;#8217;ll get an exception because the existing &lt;tt class="docutils literal"&gt;category&lt;/tt&gt; field cannot be
converted to a&amp;nbsp;ForeignKey!&lt;/p&gt;
&lt;p&gt;It seems that Django migrations isn&amp;#8217;t so smart after all&amp;#8230; To resolve that we could just create two separate migrations:
One to remove the old &lt;tt class="docutils literal"&gt;category&lt;/tt&gt; field and the other to rename the &lt;tt class="docutils literal"&gt;category_fk&lt;/tt&gt; field to &lt;tt class="docutils literal"&gt;category&lt;/tt&gt;. Django would
know then that we have renamed the &lt;tt class="docutils literal"&gt;category_fk&lt;/tt&gt; field. This method works fine but if you are using &lt;tt class="docutils literal"&gt;category&lt;/tt&gt; in your
admin (or forms) django will complain with errors like&amp;nbsp;this:&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&amp;lt;class &lt;span class="pre"&gt;'core.admin.SampleAdmin'&amp;gt;:&lt;/span&gt; (admin.E108) The value of 'list_display[1]' refers to 'category', which is not a callable, an attribute of 'SampleAdmin', or an attribute or method on 'core.Sample'.&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;So you&amp;#8217;ll need to rename to fix this before running the migration (and if you actually fix it you may just bite the bullet and use category_fk to avoid re-renaming it back to&amp;nbsp;category).&lt;/p&gt;
&lt;p&gt;This is rather a pain so I&amp;#8217;ll give you another way: Edit the created migration file to do exactly what you need, i.e remove the existing
&lt;tt class="docutils literal"&gt;category&lt;/tt&gt; field and rename &lt;tt class="docutils literal"&gt;category_fk&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;category&lt;/tt&gt;. Here&amp;#8217;s the migration&amp;nbsp;file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

  &lt;span class="n"&gt;dependencies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;core&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;0003_auto_20210715_0844&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="n"&gt;operations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RemoveField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="n"&gt;model_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sample&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;category&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RenameField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="n"&gt;model_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sample&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;old_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;category_fk&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;new_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;category&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So in this migration we first remove the existing &lt;tt class="docutils literal"&gt;category&lt;/tt&gt; field and then we rename the &lt;tt class="docutils literal"&gt;category_fk&lt;/tt&gt; field to &lt;tt class="docutils literal"&gt;category&lt;/tt&gt;. Let&amp;#8217;s try to run&amp;nbsp;it:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
C:\progr\py3\migrations_tutorial&amp;gt;python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, core, sessions
Running migrations:
  Applying core.0004_auto_20210715_0909... OK
&lt;/pre&gt;
&lt;p&gt;Success!&lt;/p&gt;
</content><category term="django"></category><category term="django"></category><category term="migrations"></category><category term="foreignkey"></category></entry><entry><title>Saving in DarkÂ Souls</title><link href="https://www.spapas.net/2021/06/15/dark-souls-saves/" rel="alternate"></link><published>2021-06-15T14:20:00+03:00</published><updated>2021-06-15T14:20:00+03:00</updated><author><name>Serafeim Papastefanos</name></author><id>tag:www.spapas.net,2021-06-15:/2021/06/15/dark-souls-saves/</id><summary type="html">&lt;p class="first last"&gt;How to properly save your game in the Dark Souls&amp;nbsp;trilogy&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The Dark Souls Trilogy (1-2-3) from FromSoftware is one of the modern gaming classics. The games should
be experienced by everybody because of their excellent gameplay, combat mechanics, atmosphere and
character development. The defining characteristic of the Dark Souls Trilogy and what scares most gamers
is their over the top&amp;nbsp;difficulty.&lt;/p&gt;
&lt;p&gt;This great difficulty is increased even more because of the saving mechanism of these games: There&amp;#8217;s a
single save game in the game, if you die you&amp;#8217;ll return to a previous checkpoint (called bonfire). These
checkpoint are sparcely located within the gaming world and they are not always near boss fights, so
if you die in a boss fight you may need to kill enemies for sometime before you reach the boss again to
retry. Also, everything is permanent so if you
screw up somehow (i.e you kill an important &lt;span class="caps"&gt;NPC&lt;/span&gt;) there&amp;#8217;s no way to &amp;#8220;restore&amp;#8221; your game; you&amp;#8217;ll lose him
(and his items if he&amp;#8217;s a merchant) for the rest of your current&amp;nbsp;game!&lt;/p&gt;
&lt;p&gt;If the above seems too difficult for you to even try, fear not! There a particular way to have &amp;#8220;real&amp;#8221; saves in all three
Dark Souls games, even if it is a little cumbersome. It will be much less cumbersome than having to restart
the game because you killed an important &lt;span class="caps"&gt;NPC&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="disclaimer"&gt;
&lt;h2&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;Before describing the technique I&amp;#8217;d like to provide some disclaimer&amp;nbsp;points:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The Dark Souls Trilogy should be experienced as-is. You shouldn&amp;#8217;t use this method because you&amp;#8217;ll make the games easier and not as difficult as it was intented by their publisher. Use it only as a last resort when you are going to abandon the&amp;nbsp;game.&lt;/li&gt;
&lt;li&gt;Most other Dark Souls players will mock you and hate you for using these&amp;nbsp;techniques.&lt;/li&gt;
&lt;li&gt;You may break your save if you do something wrong so I won&amp;#8217;t be held responsible for losing your&amp;nbsp;progress.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="how-dark-souls-saves-your-game"&gt;
&lt;h2&gt;How Dark Souls saves your&amp;nbsp;game&lt;/h2&gt;
&lt;p&gt;All three Dark Souls games have a particular directory in your hard disk where they place their save game. There&amp;#8217;s a single file with your save game that has an extension endingg in&amp;nbsp;.sl2.&lt;/p&gt;
&lt;p&gt;From my &lt;span class="caps"&gt;PC&lt;/span&gt;, the folders and names of each of these games are the&amp;nbsp;following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Dark Souls Remastered: Folder &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;C:\Users\username\Documents\&lt;span class="caps"&gt;NBGI&lt;/span&gt;\&lt;span class="caps"&gt;DARK&lt;/span&gt;&lt;/span&gt; &lt;span class="caps"&gt;SOULS&lt;/span&gt; &lt;span class="caps"&gt;REMASTERED&lt;/span&gt;\1638&lt;/tt&gt;, filename: &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;DRAKS0005&lt;/span&gt;.sl2&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Dark Souls 2: Scholar of the First Sin: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;C:\Users\username\AppData\Roaming\DarkSoulsII\0110000100000666\&lt;/span&gt;&lt;/tt&gt;, filename: &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;DS2SOFS0000&lt;/span&gt;.sl2&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Dark Souls 3: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;C:\Users\username\AppData\Roaming\DarkSoulsIII\0110000100000666\&lt;/span&gt;&lt;/tt&gt;, filename: &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;DS3000&lt;/span&gt;.sl2&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Notice that the username will be your user&amp;#8217;s username while the numbers you see will probably be&amp;nbsp;different.&lt;/p&gt;
&lt;p&gt;Now, when some particular action occurs (i.e when you kill an enemy) the game will overwrite the file in the folder with a new one
with the changes. You will see a flame in the top right of your screen when this happens. Notice that this happens on particular moments,
for example if you are just moving without encountering enemies your game won&amp;#8217;t be saved (so if for example you make a difficult jump
the game won&amp;#8217;t be saved right after the jump). Also, Dark Souls will save your game when you quit (so if you do a difficult jump, quit the game
and restart you will be after the&amp;nbsp;jump).&lt;/p&gt;
&lt;p&gt;The above description enables you to actually have proper saves: Quit the game (not completely, just display the title screen),
backup the save file in a different location, start the game.
If you die, quit the game (again just display the title screen), copy over from the backup to the save location and start the game again.
Notice that you should always quit the
game before restoring from a save file because Dark Souls reads the saves only then.
If you copy over a backup save while playing the game the
backup will be just overwritten with the new save&amp;nbsp;data.&lt;/p&gt;
&lt;p&gt;However you can backup your game without actually quitting: When you&amp;#8217;ve reach a point you feel it needs saving, just alt+tab outside of your game
copy over the save to a backup location (you can even give it a proper name) and continue playing. When you want to load that save you&amp;#8217;ll need to
quit, restore the backup and start the game again. Notice that when you do this the game will show you a warning that you &amp;#8220;did not properly quit
the game&amp;#8221;. From what I can understand, when you quit the game Dark Souls writes some flag to your save game. If you shut down your &lt;span class="caps"&gt;PC&lt;/span&gt; while
playing (or copy over the save game) then Dark Souls won&amp;#8217;t write that flag to your save game. However from my experience in all three Dark Souls
games this warning doesn&amp;#8217;t mean anything, the game will continue normally without any&amp;nbsp;problems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="making-it-simpler"&gt;
&lt;h2&gt;Making it&amp;nbsp;simpler&lt;/h2&gt;
&lt;p&gt;Copying over the save game in a different location is cumbersome and makes it easy to do mistakes (i.e copy instead of restoring your backup
save, copy over the current save to your backup). To make this process easier I will give you here a simple autohotkey script that will do
this for you using F7 to backup your save and F8 to restore it (don&amp;#8217;t forget that you can only restore when you have quit the game and see the
title&amp;nbsp;screen).&lt;/p&gt;
&lt;p&gt;To use this script you need the excellent &lt;a class="reference external" href="https://www.autohotkey.com/"&gt;autohotkey&lt;/a&gt; utility. Download and install it and then execute the script by double clicking it (it needs to have an .ahk&amp;nbsp;extension):&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
#SingleInstance Force
#MaxHotkeysPerInterval 99999
SendMode Input  ; Recommended for new scripts due to its superior speed and reliability.
SetWorkingDir %A_ScriptDir%  ; Ensures a consistent starting directory.


SAVE_FOLDER_DS := &amp;quot;C:\Users\serafeim\AppData\Roaming\DarkSoulsII\0110000100000666\&amp;quot;
SAVE_FILENAME_DS := &amp;quot;DS2SOFS0000.sl2&amp;quot;
BACKUP_FOLDER_DS := &amp;quot;C:\Users\serafeim\Documents\ds2\&amp;quot;


GetFolderMax(f)
{
  MAX := 0
  Loop, Files, %f%\*.*
  {
    NUM_EXT := 1 * A_LoopFileExt

    if (NUM_EXT&amp;gt; MAX)
    {
      MAX := NUM_EXT
    }
  }

  return MAX
}

F7::
{
  ;MsgBox % &amp;quot;F7&amp;quot;
  ;MsgBox % &amp;quot;Will copy &amp;quot; . SAVE_FILENAME_DS . &amp;quot; to &amp;quot; . BACKUP_FOLDER_DS

  MAX_P1 := GetFolderMax(BACKUP_FOLDER_DS) + 1
  ;MsgBox % &amp;quot;Max + 1 is &amp;quot; . MAX_P1

  SOURCE := SAVE_FOLDER_DS . SAVE_FILENAME_DS
  DEST := BACKUP_FOLDER_DS . SAVE_FILENAME_DS . &amp;quot;.&amp;quot; . MAX_P1

  ;MsgBox % &amp;quot;Will copy &amp;quot; . SOURCE . &amp;quot; to &amp;quot; . DEST
  FileCopy, %SOURCE%, %DEST%
  return
}

F8::
{
  ;MsgBox % &amp;quot;F8&amp;quot;
  MAX := GetFolderMax(BACKUP_FOLDER_DS)
  MAX_FILE := BACKUP_FOLDER_DS . SAVE_FILENAME_DS . &amp;quot;.&amp;quot; . MAX
  ;MsgBox % &amp;quot;Maxfile is &amp;quot; . MAX_FILE

  SOURCE := MAX_FILE
  DEST := SAVE_FOLDER_DS . SAVE_FILENAME_DS

  ;MsgBox % &amp;quot;Will copy &amp;quot; . SOURCE . &amp;quot; to &amp;quot; . DEST
  FileCopy, %SOURCE%, %DEST%, 1
  return
}
&lt;/pre&gt;
&lt;p&gt;The script is very easy to understand but I&amp;#8217;ll explain it a bit here: First of all you need to define the
&lt;tt class="docutils literal"&gt;SAVE_FOLDER_DS, SAVE_FILENAME_DS&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;BACKUP_FOLDER_DS&lt;/tt&gt; variables. The first two are the folder and
filename of your game (in my example I&amp;#8217;m using it for &lt;span class="caps"&gt;DS2&lt;/span&gt;). The &lt;tt class="docutils literal"&gt;BACKUP_FOLDER_DS&lt;/tt&gt; is where you want your
backups to be placed. This script will backup your save file in that folder when you press F7. To keep better
backups it will append an increasing number in the end of your filename so when you press F7 you will see
that it will create a file named &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;DS2SOFS0000&lt;/span&gt;.sl2.0&lt;/tt&gt;, then &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;DS2SOFS0000&lt;/span&gt;.sl2.1&lt;/tt&gt; etc in the &lt;tt class="docutils literal"&gt;BACKUP_FOLDER_DS&lt;/tt&gt;.
When you press F8 it will get the file with the biggest number in the end, strip that number and copy it over your
Dark Souls save&amp;nbsp;file.&lt;/p&gt;
&lt;p&gt;As you can see there&amp;#8217;s a &lt;tt class="docutils literal"&gt;GetFolderMax&lt;/tt&gt; function that retrieves the max number from your backup folder. Then,
F7 and F8 will use that function to either copy over your Dark Souls save file in the backup with an increased
number or retrieve the latest one and restore it in your save&amp;nbsp;folder.&lt;/p&gt;
&lt;p&gt;The script works independently of the game so if you configure it and press F7 you should see that the backup file
will be created. Also if you delete (or rename) your Dark Souls save file and press F8 you should see that it will
be restore by the&amp;nbsp;backup.&lt;/p&gt;
&lt;p&gt;So using the above script, my play workflow is like this: Start Dark Souls, kill an enemy, press F7, kill another
enemy, press F7 (depending on how difficult the enemies are of course). Die from an enemy,
quit the game, press F8, continue my&amp;nbsp;game.&lt;/p&gt;
&lt;p&gt;One thing to notice is that in Windows 10 it seems that the hotkeys are not captured from autohotkey when the game
runs in full screen. When I run the games in a window it works fine. Some people say that if you run autohotkey
as administrator it will capture the key-presses but it didn&amp;#8217;t work fine for&amp;nbsp;me.&lt;/p&gt;
&lt;/div&gt;
</content><category term="gaming"></category><category term="dark-souls"></category><category term="dark-souls-2"></category><category term="dark-souls-3"></category><category term="autohotkey"></category></entry><entry><title>Using matplotlib to generate graphs inÂ Django</title><link href="https://www.spapas.net/2021/02/08/django-matplotlib/" rel="alternate"></link><published>2021-02-08T14:55:00+02:00</published><updated>2021-02-08T14:55:00+02:00</updated><author><name>Serafeim Papastefanos</name></author><id>tag:www.spapas.net,2021-02-08:/2021/02/08/django-matplotlib/</id><summary type="html">&lt;p class="first last"&gt;How to use the matplotlib library to generate server-side graphs with&amp;nbsp;Django&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Nowadays the most common way to generate graphs in your Django apps (or web apps in general) is to
pass the data as json to the page and use a javascript lib. The big advantage these javascript libs
offer is interactivity: You can hover over points to see their values making studying the graph much&amp;nbsp;easier.&lt;/p&gt;
&lt;p&gt;Yet, there are times where you need some simple (or not so simple) graphs and don&amp;#8217;t care about
offering interactivity through javascript nor you want to mess with javascript at all. For these cases
you can generate the graphs server-side using django and the &lt;a class="reference external" href="https://matplotlib.org/"&gt;matplotlib&lt;/a&gt; plot&amp;nbsp;library.&lt;/p&gt;
&lt;p&gt;matplotlib is a very popular library in the scientific cycles. It can be used to create more or less
any kind of graph and has unlimited capabilities! I won&amp;#8217;t go into much detail about matplotlib here
because the subject is huge but I recommend you to take a look at the &lt;a class="reference external" href="https://matplotlib.org/tutorials/index.html"&gt;comprehensive tutorials&lt;/a&gt; on its&amp;nbsp;homepage.&lt;/p&gt;
&lt;p&gt;To install matplotlib on unix you need to do a &lt;tt class="docutils literal"&gt;pip install matplotlib&lt;/tt&gt; while, for windows,
you can download the proper ready-made binaries from the &lt;a class="reference external" href="https://www.lfd.uci.edu/~gohlke/pythonlibs/"&gt;Unofficial Windows Binaries for Python Extension Packages&lt;/a&gt;
site that offers pre-compiled versions of almost all python packages! Just make sure to download the correct version
for your python version and architecture (32bit or 64bit). After you&amp;#8217;ve downloaded the file you can install it
for your project using something like &lt;tt class="docutils literal"&gt;pip install &lt;span class="pre"&gt;matplotlib-3.3.4-cp38-cp38-win32&lt;/span&gt;&lt;/tt&gt; from inside your virtual&amp;nbsp;environment.&lt;/p&gt;
&lt;p&gt;Before actually creating a graph I recommend playing a bit with matplotlib to understand the basic concepts. Start a django shell
and do the&amp;nbsp;following:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; import matplotlib.pyplot as plt
&amp;gt;&amp;gt;&amp;gt; fig, ax = plt.subplots()
&amp;gt;&amp;gt;&amp;gt; ax.plot([1, 2, 3, 4], [1, 4, 2, 3])
[&amp;lt;matplotlib.lines.Line2D object at 0x0FBF5F58&amp;gt;]
&amp;gt;&amp;gt;&amp;gt; fig.show()
&lt;/pre&gt;
&lt;p&gt;The above should open a window and display the graph. This works fine on Window 10 with python 3.8 and matplotlib 3.3.4 but I
can&amp;#8217;t guarantee other versions. If however &lt;tt class="docutils literal"&gt;fig.show()&lt;/tt&gt; shows an error or does not display the graph, you can just do something&amp;nbsp;like:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; fig.savefig('test')
&lt;/pre&gt;
&lt;p&gt;that will output the figure in a file named &lt;tt class="docutils literal"&gt;test.png&lt;/tt&gt; which you can the view. Please notice that the above are with the default
options; there are various ways that matplotlib can be&amp;nbsp;configured.&lt;/p&gt;
&lt;p&gt;In any case, after you&amp;#8217;ve played a bit with the shell and generate a nice figure (take a look at the &lt;a class="reference external" href="https://matplotlib.org/3.1.1/gallery/index.html"&gt;matplotlib examples&lt;/a&gt; for
inspiration) you are ready to integrate matplotlib with&amp;nbsp;Django!&lt;/p&gt;
&lt;p&gt;I can think of two ways which you can integrate matplotlib with&amp;nbsp;Django:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Use a special view that would render the graph and just return a &lt;span class="caps"&gt;PNG&lt;/span&gt; object. Use a normal &lt;tt class="docutils literal"&gt;&amp;lt;img&amp;gt;&lt;/tt&gt; element pointing to that view in your&amp;nbsp;template.&lt;/li&gt;
&lt;li&gt;Put the graph in the context of a normal django view encoded as a base64 object and use a special &lt;tt class="docutils literal"&gt;&amp;lt;img&amp;gt;&lt;/tt&gt; with an &lt;tt class="docutils literal"&gt;src&lt;/tt&gt; attribute of &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;data:image/png;base64,{{&lt;/span&gt; graph }}&lt;/tt&gt; to actually embed the image in the&amp;nbsp;template!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I prefer the second approach because it&amp;#8217;s much more flexible since you don&amp;#8217;t need to create a different Django view for each graph you
want to generate. For this reason I will explain this approach right now and give you some hints if you need to follow the dedicated
graph view&amp;nbsp;approach.&lt;/p&gt;
&lt;p&gt;Our view&amp;nbsp;should:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Generate the&amp;nbsp;graph&lt;/li&gt;
&lt;li&gt;Save it in a BytesIO&amp;nbsp;object&lt;/li&gt;
&lt;li&gt;Convert that BytesIO to&amp;nbsp;base64&lt;/li&gt;
&lt;li&gt;Put the string value of the base64 encoded graph to the&amp;nbsp;template&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then the template will just output that base64 value using the special img we mentioned&amp;nbsp;above.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s a snippet of a view that does exactly&amp;nbsp;this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import io, base64
from django.db.models.functions import TruncDay
from matplotlib.ticker import LinearLocator

class SampleListView(ListView):
  model = Sample

  def get_context_data(self, **kwargs):

    by_days = get_queryset().annotate(day=TruncDay('created_on')).values('day').annotate(c=Count('id')).order_by('day')
    days = [x['day'] for x in by_days]
    counts = [x['c'] for x in by_days]

    fig, ax = plt.subplots(figsize=(10,4))
    ax.plot(days, counts, '--bo')

    fig.autofmt_xdate()
    ax.fmt_xdata = mdates.DateFormatter('%Y-%m-%d')
    ax.set_title('By date')
    ax.set_ylabel(&amp;quot;Count&amp;quot;)
    ax.set_xlabel(&amp;quot;Date&amp;quot;)
    ax.grid(linestyle=&amp;quot;--&amp;quot;, linewidth=0.5, color='.25', zorder=-10)
    ax.yaxis.set_minor_locator(LinearLocator(25))

    flike = io.BytesIO()
    fig.savefig(flike)
    b64 = base64.b64encode(flike.getvalue()).decode()
    context['chart'] = b64
    return context
&lt;/pre&gt;
&lt;p&gt;Please notice that after importing &lt;tt class="docutils literal"&gt;matplotlib&lt;/tt&gt; I&amp;#8217;m using the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;matplotlib.use('Agg')&lt;/span&gt;&lt;/tt&gt; command to use
the &lt;tt class="docutils literal"&gt;Agg&lt;/tt&gt; backend. You can &lt;a class="reference external" href="https://matplotlib.org/faq/usage_faq.html#what-is-a-backend"&gt;learn more about backends here&lt;/a&gt;, but it should be sufficient for now to
know that using the &lt;tt class="docutils literal"&gt;Agg&lt;/tt&gt; you&amp;#8217;ll be able to save your graphs in&amp;nbsp;png.&lt;/p&gt;
&lt;p&gt;The above code uses some Django &lt;span class="caps"&gt;ORM&lt;/span&gt; trickery to group values by their created_on day value and then
assings the days and counts to two arrays (&lt;tt class="docutils literal"&gt;days&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;counts&lt;/tt&gt;). It then creates a new empty graph
with a specific size using &lt;tt class="docutils literal"&gt;fig, ax = &lt;span class="pre"&gt;plt.subplots(figsize=(10,4))&lt;/span&gt;&lt;/tt&gt; and plots the data with some
fancy styles with &lt;tt class="docutils literal"&gt;ax.plot(days, counts, &lt;span class="pre"&gt;'--bo')&lt;/span&gt;&lt;/tt&gt;. After that it sets various options in the graph
like the labels, grid&amp;nbsp;etc.&lt;/p&gt;
&lt;p&gt;The save and convert to base64 part follows: A new file like object is created using &lt;tt class="docutils literal"&gt;io.BytesIO()&lt;/tt&gt; and
the figure is saved there (&lt;tt class="docutils literal"&gt;fig.savefig(flike)&lt;/tt&gt;). Then it is converted to a base64 string using the
&lt;tt class="docutils literal"&gt;b64 = &lt;span class="pre"&gt;base64.b64encode(flike.getvalue()).decode()&lt;/span&gt;&lt;/tt&gt;. Finally it is just passed to the context of
the template as &lt;tt class="docutils literal"&gt;chart&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Now, inside the template I&amp;#8217;ve got the following&amp;nbsp;line:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;lt;img src='data:image/png;base64,{{ chart }}'&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This will include the data of the chart inline and display it as a png image. If you&amp;#8217;ve followed along
you should be able to see the graph when you load that&amp;nbsp;view!&lt;/p&gt;
&lt;p&gt;If instead of including the graphs in your normal django template views you want to use a dedicated
graph-generating view, you can follow my
&lt;a class="reference external" href="https://www.spapas.net/2014/09/15/django-non-html-responses/"&gt;Django non-&lt;span class="caps"&gt;HTML&lt;/span&gt; responses tutorial&lt;/a&gt;. You could then
modify the &lt;tt class="docutils literal"&gt;render_to_response&lt;/tt&gt; method of your view like&amp;nbsp;this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
def render_to_response(self, generator, **response_kwargs):
    response = HttpResponse(content_type='image/png')

    fig, ax = plt.subplots(figsize=(10,4))
    # fill the report here

    fig.savefig(response)
    return response
&lt;/pre&gt;
&lt;p&gt;Since &lt;tt class="docutils literal"&gt;response&lt;/tt&gt; is a file-like object you can save your graph directly&amp;nbsp;there!&lt;/p&gt;
</content><category term="django"></category><category term="django"></category><category term="matplotlib"></category><category term="python"></category></entry><entry><title>Using hashids to hide ids of objects inÂ Django</title><link href="https://www.spapas.net/2021/01/07/django-hashids/" rel="alternate"></link><published>2021-01-07T12:20:00+02:00</published><updated>2021-01-07T12:20:00+02:00</updated><author><name>Serafeim Papastefanos</name></author><id>tag:www.spapas.net,2021-01-07:/2021/01/07/django-hashids/</id><summary type="html">&lt;p class="first last"&gt;How to hide the ids (primary keys) of your objects in Django using the hashids&amp;nbsp;library&lt;/p&gt;
</summary><content type="html">&lt;p&gt;A common pattern in Django urls is to have the following setup for &lt;span class="caps"&gt;CRUD&lt;/span&gt; operations of your objects. Let&amp;#8217;s suppose we
have a &lt;tt class="docutils literal"&gt;Ship&lt;/tt&gt; object. It&amp;#8217;s &lt;span class="caps"&gt;CRUD&lt;/span&gt; urls would be something&amp;nbsp;like:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;/ships/create/&lt;/tt&gt; To add a new&amp;nbsp;object&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;/ships/list/&lt;/tt&gt; To display a list of your&amp;nbsp;objects&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;/ships/detail/id/&lt;/tt&gt; To display the particular object with that id (primary&amp;nbsp;key)&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;/ships/update/id/&lt;/tt&gt; To update/edit the particular object with that id (primary&amp;nbsp;key)&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;/ships/delete/id/&lt;/tt&gt; To delete the particular object with that id (primary&amp;nbsp;key)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is very easy to implement using class based views. For example for the detail view add the following to your&amp;nbsp;views.py:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
class ShipDetailView(DetailView):
    model = models.Ship
&lt;/pre&gt;
&lt;p&gt;and then in your urls.py add the&amp;nbsp;line:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
urlpatterns = [
  # ...
  path(
      &amp;quot;detail/&amp;lt;int:pk&amp;gt;/&amp;quot;,
      login_required(views.ShipDetailView.as_view()),
      name=&amp;quot;ship_detail&amp;quot;,
  ),
&lt;/pre&gt;
&lt;p&gt;This path means that it expects an integer (&lt;cite&gt;int&lt;/cite&gt;) which will be used as the primary key of the ship (&lt;cite&gt;pk&lt;/cite&gt;).&lt;/p&gt;
&lt;p&gt;Now, a common requirement if you are using integers as primary keys is to not display them to the public. So you
shouldn&amp;#8217;t allow the users to write something like &lt;tt class="docutils literal"&gt;/ships/detail/43&lt;/tt&gt; to see the details of ship 43. Even if you
have add proper authorization (each user only sees the ids he has access to) you are opening a window for abuse. Also
you don&amp;#8217;t want the users to be able to estimate how many objects there are in your database (if a user creates a
new ship he&amp;#8217;ll get the latest id and know approximately how many ships are in your&amp;nbsp;database).&lt;/p&gt;
&lt;p&gt;One simple requirement is to use some encryption mechanism to encode the ids to some string and display that string
to the public urls. When you receive the string you&amp;#8217;ll then decode it to get the&amp;nbsp;id.&lt;/p&gt;
&lt;p&gt;Thankfully, not only there&amp;#8217;s a particular library that makes this whole encode/decode procedure very easy but Django
has functionality to make trivial to integrate this functionality to an existing project with only miniman&amp;nbsp;changes!&lt;/p&gt;
&lt;p&gt;The library I propose for this is called &lt;a class="reference external" href="https://github.com/davidaurelio/hashids-python"&gt;hashids-python&lt;/a&gt;. This is the python branch of the &lt;a class="reference external" href="https://hashids.org/"&gt;hashids&lt;/a&gt; library that works
for many languages. If you take a look at the documentation you&amp;#8217;ll see that it can be used like&amp;nbsp;this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
from hashids import Hashids
hashids = Hashids()
hashid = hashids.encode(123) # 'Mj3'
ints = hashids.decode('xoz') # (456,)
&lt;/pre&gt;
&lt;p&gt;This library offers two useful utilities: Define a random salt so that the generated hashids will be unique for your app
and add a minimum hash length so that the real length of the id will be obfuscated. I&amp;#8217;ve found out that a length of 8 characters
will be more than enough to encode all possible ids up to 99&amp;nbsp;billion:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
hashids = Hashids(min_length=8)
len(hashids.encode(99_999_999_999)) # 8
&lt;/pre&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;This is more than enough since by default django will use an integer to store the primary keys which is around 4 billion (you actually&amp;nbsp;can&lt;/dt&gt;
&lt;dd&gt;use 7 characters to encode up to 5 billion but I prefer even&amp;nbsp;numbers.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Finally, you can use a different alphabet, for example to use all greek&amp;nbsp;characters:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
hashids = Hashids(alphabet='ÎÎÎÎÎÎÎÎÎÎÎÎÎÎÎÎ Î¡Î£Î¤Î¥Î¦Î§Î¨Î©')
hashids.encode(123) # 'Î£ÎÎ¦'
&lt;/pre&gt;
&lt;p&gt;This isn&amp;#8217;t recommended though for our case because not all characters are&amp;nbsp;url-safe.&lt;/p&gt;
&lt;p&gt;To integrate the hashids with Django we are going to use a &lt;a class="reference external" href="https://docs.djangoproject.com/en/3.1/topics/http/urls/#registering-custom-path-converters"&gt;custom path converter&lt;/a&gt;. The custom path converter
is similar to the &lt;tt class="docutils literal"&gt;int&lt;/tt&gt; portion of the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;quot;detail/&amp;lt;int:pk&amp;gt;/&amp;quot;&lt;/span&gt;&lt;/tt&gt; of the url i.e it will retrieve something and convert it
to a python object. To implement your custom path converter just add a file named utils.py in one of your applications with
the following&amp;nbsp;conents:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
from hashids import Hashids
from django.conf import settings

hashids = Hashids(settings.HASHIDS_SALT, min_length=8)


def h_encode(id):
    return hashids.encode(id)


def h_decode(h):
    z = hashids.decode(h)
    if z:
        return z[0]


class HashIdConverter:
    regex = '[a-zA-Z0-9]{8,}'

    def to_python(self, value):
        return h_decode(value)

    def to_url(self, value):
        return h_encode(value)
&lt;/pre&gt;
&lt;p&gt;The above will generate a &lt;tt class="docutils literal"&gt;hashids&lt;/tt&gt; global object with a min length of 8 as discussed above and retrieving
a custom salt from your settings (just add &lt;tt class="docutils literal"&gt;HASHIDS_SALT=some_random_string&lt;/tt&gt; to your project settings). The
&lt;tt class="docutils literal"&gt;HashIdConverter&lt;/tt&gt; defines a regex that will match the default aplhabet that hasid uses and two methods to convert
from url to python and vice versa. Notice that &lt;tt class="docutils literal"&gt;hashids.decode&lt;/tt&gt; returns an array so we&amp;#8217;ll retrieve the first number&amp;nbsp;only.&lt;/p&gt;
&lt;p&gt;To use that custom path converter you will need to add the following lines to your urls.py to register your
&lt;tt class="docutils literal"&gt;HashIdConverter&lt;/tt&gt; as &lt;tt class="docutils literal"&gt;hashid&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
from core.utils import HashIdConverter

register_converter(HashIdConverter, &amp;quot;hashid&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;and then use it in your urls.py like&amp;nbsp;this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
urlpatterns = [
  # ...
  path(
      &amp;quot;detail/&amp;lt;hashid:pk&amp;gt;/&amp;quot;,
      login_required(views.ShipDetailView.as_view()),
      name=&amp;quot;ship_detail&amp;quot;,
  ),
&lt;/pre&gt;
&lt;p&gt;That&amp;#8217;s it! Your CBVs do not need any other changes! The &lt;tt class="docutils literal"&gt;hashid&lt;/tt&gt; will match the hashid in the url and convert it to
the model&amp;#8217;s pk using the to_python method we defined&amp;nbsp;above!&lt;/p&gt;
&lt;p&gt;Of course you should also add the opposite direction (i.e convert from the primary key to the hashid). To do that we&amp;#8217;ll
add a &lt;tt class="docutils literal"&gt;get_absolute_url&lt;/tt&gt; method to our Ship model, like&amp;nbsp;this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
class Ship(models.Model):
  def get_hashid(self):
      return h_encode(self.id)

  def get_absolute_url(self):
      return reverse(&amp;quot;ship_detail&amp;quot;, args=[self.id])
&lt;/pre&gt;
&lt;p&gt;Notice that you just call the &lt;tt class="docutils literal"&gt;reverse&lt;/tt&gt; function passing &lt;tt class="docutils literal"&gt;self.id&lt;/tt&gt;; everything else will be done
automatically from the &lt;tt class="docutils literal"&gt;hashid&lt;/tt&gt; custom path generator &lt;tt class="docutils literal"&gt;to_url&lt;/tt&gt; method. I&amp;#8217;ve also added a &lt;tt class="docutils literal"&gt;get_hashid&lt;/tt&gt;
method to my model to have quick access to the id in case I need&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Now you don&amp;#8217;t have any excuses to not hide your database ids from the&amp;nbsp;public!&lt;/p&gt;
</content><category term="django"></category><category term="django"></category><category term="hashids"></category><category term="python"></category></entry><entry><title>Adding a timeline of your wagtailÂ Posts</title><link href="https://www.spapas.net/2020/09/18/wagtail-add-posts-timeline/" rel="alternate"></link><published>2020-09-18T16:20:00+03:00</published><updated>2020-09-18T16:20:00+03:00</updated><author><name>Serafeim Papastefanos</name></author><id>tag:www.spapas.net,2020-09-18:/2020/09/18/wagtail-add-posts-timeline/</id><summary type="html">&lt;p class="first last"&gt;How to add a timeline wagtail&amp;nbsp;Posts&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="intro"&gt;
&lt;h2&gt;Intro&lt;/h2&gt;
&lt;p&gt;In this small post I&amp;#8217;ll present a small tutorial on how to add a timelne of your &lt;a class="reference external" href="https://wagtail.io/"&gt;Wagtail&lt;/a&gt;
posts using the &lt;a class="reference external" href="http://horizontal-timeline.ycodetech.co.uk/"&gt;Horizontal Timeline&lt;/a&gt; jquery&amp;nbsp;plugin.&lt;/p&gt;
&lt;p&gt;This will be a step by step tutorial to help you understand the concepts. As a base
we&amp;#8217;ll use the &lt;cite&gt;bakerydemo&lt;/cite&gt; wagtail demo. After you&amp;#8217;ve properly followed the instructions
you&amp;#8217;ll see that this demo site has a &amp;#8220;Blog&amp;#8221; that contains articles about breads. Following
we&amp;#8217;ll add a timeline of these articles grouped by their publish&amp;nbsp;month.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="decisions-decisions"&gt;
&lt;h2&gt;Decisions,&amp;nbsp;decisions&lt;/h2&gt;
&lt;p&gt;For this demo we&amp;#8217;ll include &lt;em&gt;all&lt;/em&gt; the &amp;#8220;blog&amp;#8221; pages in the timeline. However we may
wanted to select which pages we want to include in the timeline. This could be done
either by adding an extra field in our blog pages (class &lt;cite&gt;blog.models.BlogPage&lt;/cite&gt;) like
&lt;cite&gt;include_in_timeline&lt;/cite&gt; or by using the Wagtail &lt;a class="reference external" href="https://docs.wagtail.io/en/latest/reference/contrib/modeladmin/"&gt;ModelAdmin&lt;/a&gt; functionality. For the ModelAdmin
we&amp;#8217;d create an extra Django model (i.e &lt;cite&gt;BlogTimeLineEntry&lt;/cite&gt;) that would contain a link
to the original page. We could enchance this field with extra fields that we may
want to display in the timeline, for example a smaller description. Something like&amp;nbsp;this:&lt;/p&gt;
&lt;!-- code

class TimeLineEntry(models.Model):
        description = RichTextField()
        page = models.ForeignKey("blog.BlogPage", on_delete=models.PROTECT)
        panels = [ FieldPanel("description"), PageChooserPanel("page")]

        def pub_date(self):
                return self.page.date_published

        pub_date.admin_order_field = "page__date_published" --&gt;
&lt;p&gt;The other decision is where to actually output the timeline. For the demo we&amp;#8217;ll just put it
in the &lt;cite&gt;BlogIndexPage&lt;/cite&gt; page. If we wanted to add the timeline in a number of different
page types then we&amp;#8217;d need to add a template tag that would include it. But since it will be
available only to a single page type we&amp;#8217;ll just need to override the &lt;cite&gt;get_context&lt;/cite&gt; method and
the template of that particular&amp;nbsp;type.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="overriding-the-get-context"&gt;
&lt;h2&gt;Overriding the&amp;nbsp;get_context&lt;/h2&gt;
&lt;p&gt;As we described above, we want to group the timeline entries based on their publish month. For
this, we&amp;#8217;ll use the following code in the &lt;tt class="docutils literal"&gt;BlogIndexPage.get_context&lt;/tt&gt; method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BlogIndexPage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;posts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BlogPage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;descendant_of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;live&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;-date_published&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;entries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;posts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;dentries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date_published&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%m/%Y&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;month_entries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dentries&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
        &lt;span class="n"&gt;month_entries&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;dentries&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;month_entries&lt;/span&gt;

    &lt;span class="n"&gt;lentries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;date_small&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;date_large&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date_published&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%B %Y&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;entries&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dentries&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;entries&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date_published&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lentries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So what&amp;#8217;s the purpose of the above? First of all we use &lt;cite&gt;super&lt;/cite&gt; to retrieve the context that
any parent classes may have setup. After that we add a &lt;cite&gt;posts&lt;/cite&gt; attribute to the context
that is a queryset of all the published children of the current page (which is the &lt;cite&gt;BlogIndexPage&lt;/cite&gt;),
sorted by their published&amp;nbsp;date.&lt;/p&gt;
&lt;p&gt;In the &lt;cite&gt;for&lt;/cite&gt; loop that follows, do some dict trickery to &amp;#8220;gather&amp;#8221; all entries for a particlular month/year
in a list under that particular key in the &lt;cite&gt;dentries&lt;/cite&gt; dict.&lt;/p&gt;
&lt;p&gt;Finally, we create the &lt;cite&gt;lentries&lt;/cite&gt; list which will be a list of the&amp;nbsp;form:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;date_small&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;09/2020&amp;quot;&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;date_large&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;September 2020&amp;quot;&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;entries: [BlogPage, BlogPage, BlogPage...]&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This struct will help us in the next step when we implement the timeline&amp;nbsp;template.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fixing-the-template"&gt;
&lt;h2&gt;Fixing the&amp;nbsp;template&lt;/h2&gt;
&lt;p&gt;To use the horizontal timeline we need to add a couple of css/js dependencies to our template. For this,
we&amp;#8217;ll first go to the bakerydemotemplatesbase.html file and add the following snippet near the end of the file just before
&lt;tt class="docutils literal"&gt;&amp;lt;/body&amp;gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
{% block extra_script %}
{% endblock %}
&lt;/pre&gt;
&lt;p&gt;The above is required to give us a placeholder for adding some needed js dependencies and&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;After that we&amp;#8217;ll go to the &lt;tt class="docutils literal"&gt;bakerydemo\templates\blog\blog_index_page.html&lt;/tt&gt; file and add the following just before
&lt;tt class="docutils literal"&gt;{% block content %}&lt;/tt&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
{% block head-extra %}
        &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;//cdn.jsdelivr.net/gh/ycodetech/horizontal-timeline-2.0&amp;#64;2/css/horizontal_timeline.2.0.min.css&amp;quot;&amp;gt;
        &amp;lt;style&amp;gt;

                .timeline .selected {
                        font-size: 24px;
                        font-weight: bold;
                }

                #timeline ol {
                        list-style: none;
                }

                .horizontal-timeline .events-content li {
                        background: #f2f2f2;
                        font-size: .8em;
                }

                #timeline img {
                        width: 200px;
                }
        &amp;lt;/style&amp;gt;

{% endblock head-extra %}
&lt;/pre&gt;
&lt;p&gt;And the following at the end of the&amp;nbsp;file&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
{% block extra_script %}

        &amp;lt;script src=&amp;quot;//cdn.jsdelivr.net/gh/ycodetech/horizontal-timeline-2.0&amp;#64;2/JavaScript/horizontal_timeline.2.0.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

        &amp;lt;script&amp;gt;

        $(function() {
                $('#timeline').horizontalTimeline({
                dateIntervals: {
                        &amp;quot;desktop&amp;quot;: 200,
                        &amp;quot;tablet&amp;quot;: 150,
                        &amp;quot;mobile&amp;quot;: 120,
                        &amp;quot;minimal&amp;quot;: true
                }
                });
        })

        &amp;lt;/script&amp;gt;
{% endblock %}
&lt;/pre&gt;
&lt;p&gt;Notice that the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;head-extra&lt;/span&gt;&lt;/tt&gt; block is already there in the base.html file so we don&amp;#8217;t need to add it again. It just has some
styling changes for the timeline to be displayed nice. Also the &lt;tt class="docutils literal"&gt;&amp;lt;script&amp;gt;&lt;/tt&gt; tags we added just include the needed dependency
and initialize the timeline&amp;nbsp;component.&lt;/p&gt;
&lt;p&gt;Of course we haven&amp;#8217;t yet added the actual timeline! To do that, we&amp;#8217;ll  need to add a file named &lt;tt class="docutils literal"&gt;timeline_partial.html&lt;/tt&gt; under the
&lt;tt class="docutils literal"&gt;blog/templates/blog&lt;/tt&gt; folder (same folder that &lt;tt class="docutils literal"&gt;blog_index_page.html&lt;/tt&gt; is) with the&amp;nbsp;following:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
{% load wagtailcore_tags wagtailimages_tags %}
&amp;lt;div class=&amp;quot;horizontal-timeline&amp;quot; id=&amp;quot;timeline&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;events-content&amp;quot;&amp;gt;
        &amp;lt;ol&amp;gt;

          {% for month in timeline %}
                &amp;lt;li class=&amp;quot;{% if forloop.last %}selected{% endif %}&amp;quot; data-horizontal-timeline='{&amp;quot;date&amp;quot;: &amp;quot;{{ month.date_small }}&amp;quot;}'&amp;gt;
                  &amp;lt;h3&amp;gt;{{ month.date_large }}&amp;lt;/h3&amp;gt;

                  {% for te in month.entries %}
                        &amp;lt;div class='row'&amp;gt;

                                &amp;lt;div class='col-md-6'&amp;gt;
                                  &amp;lt;h4&amp;gt;&amp;lt;a href='{% pageurl te %}'&amp;gt;{{ te.title }}&amp;lt;/a&amp;gt;&amp;lt;/h4&amp;gt;
                                  &amp;lt;span&amp;gt;{{ te.introduction }}&amp;lt;/span&amp;gt;
                                &amp;lt;/div&amp;gt;
                                &amp;lt;div class='col-md-6'&amp;gt;
                                  {% with img=te.image %}
                                        {% image img width-200 as img_thumb %}
                                        &amp;lt;img class=&amp;quot;&amp;quot; src=&amp;quot;{{ img_thumb.url }}&amp;quot; alt=&amp;quot;{{ img.title }}&amp;quot;&amp;gt;
                                  {% endwith %}
                                &amp;lt;/div&amp;gt;

                        &amp;lt;/div&amp;gt;
                        &amp;lt;div class=&amp;quot;clear bottommargin-sm&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
                  {% endfor %}
                &amp;lt;/li&amp;gt;
          {% endfor %}

        &amp;lt;/ol&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The above will generate a &lt;tt class="docutils literal"&gt;&amp;lt;li &lt;span class="pre"&gt;data-horizontal-timeline='{&amp;quot;date&amp;quot;:&lt;/span&gt; &lt;span class="pre"&gt;&amp;quot;01/2020&amp;quot;}&amp;gt;&lt;/span&gt;&lt;/tt&gt; list element for all months and
inside that it will add an &lt;tt class="docutils literal"&gt;&amp;lt;h3&amp;gt;&lt;/tt&gt; with the full name of the month and a bunch of bootstrap rows, one for the
entries of that particular month (including its title, description and  their image at the side). It should be easy enough to&amp;nbsp;follow.&lt;/p&gt;
&lt;p&gt;Finally, we need to incldue the above partial template. So add the line &lt;tt class="docutils literal"&gt;{% include &amp;quot;blog/timeline_partial.html&amp;quot; %}&lt;/tt&gt;
immediately above the &lt;tt class="docutils literal"&gt;&amp;lt;div &lt;span class="pre"&gt;class=&amp;quot;row&lt;/span&gt; &lt;span class="pre"&gt;row-eq-height&lt;/span&gt; &lt;span class="pre"&gt;blog-list&amp;quot;&amp;gt;&lt;/span&gt;&lt;/tt&gt; line in the file &lt;tt class="docutils literal"&gt;blog_index_page.html&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;ve followed the instructions you should be able to see something like&amp;nbsp;this:&lt;/p&gt;
&lt;img alt="The timeline" src="/images/tl-demo.gif" style="width: 640px;" /&gt;
&lt;/div&gt;
</content><category term="wagtail"></category><category term="django"></category><category term="wagtail"></category></entry><entry><title>Getting alerts from OS Mon in your ElixirÂ application</title><link href="https://www.spapas.net/2020/05/15/elixir-osmon-alerts/" rel="alternate"></link><published>2020-05-15T14:20:00+03:00</published><updated>2020-05-15T14:20:00+03:00</updated><author><name>Serafeim Papastefanos</name></author><id>tag:www.spapas.net,2020-05-15:/2020/05/15/elixir-osmon-alerts/</id><summary type="html">&lt;p class="first last"&gt;How to receive alerts from the Erlang osmon (&lt;span class="caps"&gt;OS&lt;/span&gt; Monitoring) application in your elixir/phoenix&amp;nbsp;application&lt;/p&gt;
</summary><content type="html">&lt;p&gt;When I upgraded my &lt;a class="reference external" href="https://github.com/spapas/phxcrd/"&gt;Phoenix template application&lt;/a&gt; to Phoenix 1.5.1 I also enabled the new
&lt;a class="reference external" href="https://github.com/phoenixframework/phoenix_live_dashboard"&gt;Phoenix LiveDashboard&lt;/a&gt; and its &amp;#8220;&lt;span class="caps"&gt;OS&lt;/span&gt; Data&amp;#8221; tab. To enable that &lt;span class="caps"&gt;OS&lt;/span&gt; Data tab you have to
enable the &lt;tt class="docutils literal"&gt;:os_mon&lt;/tt&gt; erlang application by adding it (along with &lt;tt class="docutils literal"&gt;:logger&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;:runtime_tools&lt;/tt&gt;) to
your &lt;tt class="docutils literal"&gt;extra_applications&lt;/tt&gt; setting &lt;a class="reference external" href="https://hexdocs.pm/phoenix_live_dashboard/os_mon.html#enabling-os_mon"&gt;as described here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When I enabled the &lt;tt class="docutils literal"&gt;os_mon&lt;/tt&gt; application I immediately saw a warning in my logs that one of disks is almost full (which is
a fact). I knew that I wanted to understand how these warnings are generated and if I could handle them with
some custom code to send an email for&amp;nbsp;example.&lt;/p&gt;
&lt;p&gt;This journey lead me to an interesting erlang rabbit hole which I&amp;#8217;ll describe in this small&amp;nbsp;post.&lt;/p&gt;
&lt;div class="section" id="the-os-mon-erlang-application"&gt;
&lt;h2&gt;The os_mon erlang&amp;nbsp;application&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://erlang.org/doc/man/os_mon_app.html"&gt;os_mon&lt;/a&gt; is an erlang application that, when started will run 4 processes for monitoring
&lt;span class="caps"&gt;CPU&lt;/span&gt; load, disk, memory and some &lt;span class="caps"&gt;OS&lt;/span&gt; settings. These don&amp;#8217;t work for all operating systems
but memory and disk which are the most interesting to me do work on both unix and&amp;nbsp;Windows.&lt;/p&gt;
&lt;p&gt;The disk and memory monitoring processes are called &lt;tt class="docutils literal"&gt;memsup&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;disksup&lt;/tt&gt; and run a periodic
configurable check that checks if the  memory or disk space usage is above a (configurable)
threshold. If the usage is over the threashold then an error will be reported to the
&lt;a class="reference external" href="http://erlang.org/doc/man/alarm_handler.html"&gt;&lt;span class="caps"&gt;SASL&lt;/span&gt; alarm handler&lt;/a&gt; (&lt;span class="caps"&gt;SASL&lt;/span&gt; is erlang&amp;#8217;s System Architecture Support&amp;nbsp;Libraries).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-alarm-handler-situation"&gt;
&lt;h2&gt;The alarm handler&amp;nbsp;situation&lt;/h2&gt;
&lt;p&gt;The &lt;span class="caps"&gt;SASL&lt;/span&gt; alarm handler is a process that implements the &lt;a class="reference external" href="http://erlang.org/doc/man/gen_event.html"&gt;gen_event&lt;/a&gt; behavior. It must
be noted that this behavior is &lt;a class="reference external" href="https://pattern-match.com/blog/2018/08/31/what-is-wrong-with-gen-event-an-update/"&gt;rather controversial&lt;/a&gt; and should not be used
for your own event handling (you can use your own gen server solution or gen stage).
A &lt;tt class="docutils literal"&gt;gen_event&lt;/tt&gt; process is an event manager. This event manager keeps a list of
event handlers; when an event happens the event manager will notify each of the
event handlers. Each event handler is just a module so when an event occurs all
event handlers will be run in the same process one after the other (that&amp;#8217;s the
actual reason of why gen_event is not very&amp;nbsp;loved).&lt;/p&gt;
&lt;p&gt;The &lt;span class="caps"&gt;SASL&lt;/span&gt; alarm handler (the gen_event event manager)
is implemented in a module named &lt;tt class="docutils literal"&gt;:alarm_handler&lt;/tt&gt;. A rather
unfortunate decision is that the default simple alarm handler
(the gen_event event handler) is &lt;em&gt;also&lt;/em&gt; implemented
in the same module so in the following you&amp;#8217;ll see &lt;tt class="docutils literal"&gt;:alarm_handler&lt;/tt&gt; twice!&lt;/p&gt;
&lt;p&gt;The default simple alarm handler can be exchanged with your own custom implementation or
you can even add additional alarm handlers so they&amp;#8217;ll be called one after the&amp;nbsp;other.&lt;/p&gt;
&lt;p&gt;To add another custom event handler for alarms, you&amp;#8217;ll use the &lt;a class="reference external" href="http://erlang.org/doc/man/gen_event.html#add_handler-3"&gt;add_handler&lt;/a&gt; method of gen_event. To change it
with your own, you&amp;#8217;ll use the &lt;a class="reference external" href="http://erlang.org/doc/man/gen_event.html#swap_handler-3"&gt;swap_handler&lt;/a&gt; of gen_event. When the default simple alarm handler
is swapped it will return a list of the existing alarms in the system which will the be passed to
the new alarm&amp;nbsp;handler.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-simple-alarm-handler-implementation"&gt;
&lt;h2&gt;A simple alarm handler&amp;nbsp;implementation&lt;/h2&gt;
&lt;p&gt;As noted in the docs, an alarm handler implementation must handle the following two&amp;nbsp;events:&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;{:set_alarm, {alarm_id, alarm_description}}&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;{:clear_alarm, alarm_id}&lt;/tt&gt;. The first one will be called from the event manager when a new alarm
is created and the send one when the cause of the alarm not longer&amp;nbsp;exists.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s see a simple implementation of an alarm event&amp;nbsp;handler:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kd"&gt;defmodule&lt;/span&gt; &lt;span class="nc"&gt;Phxcrd.AlarmHandler&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nc"&gt;Bamboo.Email&lt;/span&gt;
  &lt;span class="kn"&gt;require&lt;/span&gt; &lt;span class="nc"&gt;Logger&lt;/span&gt;

  &lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="n"&gt;_args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:alarm_handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alarms&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nc"&gt;Logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;Custom alarm handler init!&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;alarm_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alarm_description&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;alarms&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;handle_alarm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alarm_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alarm_description&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;handle_event&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;:set_alarm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;alarm_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alarm_description&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nc"&gt;Logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warn&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;Got an alarm &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Atom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alarm_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;alarm_description&lt;/span&gt;
    &lt;span class="n"&gt;handle_alarm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alarm_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alarm_description&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;handle_event&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;:clear_alarm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alarm_id&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nc"&gt;Logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;Clearing the alarm  &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class="nc"&gt;Atom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alarm_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;handle_alarm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alarm_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alarm_description&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nc"&gt;Logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;Handling alarm &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class="nc"&gt;Atom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alarm_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;new_email&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="ss"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;foo@foo.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bar@bar.gr&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;New alarm!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;html_body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;strong&amp;gt;Alert:&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class="nc"&gt;Atom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alarm_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;alarm_description&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;&amp;lt;/strong&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;text_body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Alert:&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class="nc"&gt;Atom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alarm_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;alarm_description&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Phxcrd.Mailer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deliver_later&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nc"&gt;Logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;End handling alarm &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Atom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alarm_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This implementation also has an &lt;tt class="docutils literal"&gt;init&lt;/tt&gt; function that is called when the handler
is first started. Notice that it receives a list of the existing alarms; for each
one of them I&amp;#8217;ll calle the handle_alarm function. This is needed to handle any
existing alarms when the application is starting. The &lt;tt class="docutils literal"&gt;:set_alarm&lt;/tt&gt; handler also
calls &lt;tt class="docutils literal"&gt;handle_alarm&lt;/tt&gt; passing the &lt;tt class="docutils literal"&gt;alarm_id&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;alarm_description&lt;/tt&gt; it&amp;nbsp;received.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;clear_alarm&lt;/tt&gt; doesn&amp;#8217;t do anything (it would be useful if this module used state to
keep a list of the current alarms). Finally, the &lt;tt class="docutils literal"&gt;handle_alarm&lt;/tt&gt; will just send an
email using &lt;a class="reference external" href="https://github.com/fewlinesco/bamboo_smtp"&gt;bamboo_smtp&lt;/a&gt;. Notice that I use deliver_later() to send the mail&amp;nbsp;asynchronously.&lt;/p&gt;
&lt;p&gt;As you can see this is a very simple example. You can do more things here but I think that
getting the Alarm email should be enough for most&amp;nbsp;situations!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="integrating-the-alarm-handler-into-your-elixir-app"&gt;
&lt;h2&gt;Integrating the alarm handler into your elixir&amp;nbsp;app&lt;/h2&gt;
&lt;p&gt;To use the above mentioned custom alarm event handler I&amp;#8217;ve added the following line to
the start of my  &lt;tt class="docutils literal"&gt;Application.start&lt;/tt&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ss"&gt;:gen_event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;swap_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:alarm_handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:alarm_handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:swap&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Phxcrd.AlarmHandler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Please notice that the &lt;tt class="docutils literal"&gt;:alarm_handler&lt;/tt&gt; atom is encountered twice: The first is the event manager
module (for which we want to swich the event handler) while the second is the event handler module
(which is the one we want to&amp;nbsp;replace).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="os-mon-configuration"&gt;
&lt;h2&gt;os_mon&amp;nbsp;configuration&lt;/h2&gt;
&lt;p&gt;The are a number of options you can configure for &lt;cite&gt;os_mon&lt;/cite&gt;. You can find them all at the manual page.
For example, just add the following to your &lt;tt class="docutils literal"&gt;config.exs&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="ss"&gt;:os_mon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;disk_space_check_interval&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;memory_check_interval&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;disk_almost_full_threshold&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;start_cpu_sup&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will set the interval for disk space check to 1 minute, for memory check to 5 minutes, the
disk usage threshold to 90% and will not start the cpu_sup process to get &lt;span class="caps"&gt;CPU&lt;/span&gt;&amp;nbsp;info.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="testing-with-the-terminal"&gt;
&lt;h2&gt;Testing with the&amp;nbsp;terminal&lt;/h2&gt;
&lt;p&gt;If no alerts are active in your system, you can test your custom event handler using something like this
from an &lt;tt class="docutils literal"&gt;iex &lt;span class="pre"&gt;-S&lt;/span&gt; mix&lt;/tt&gt; terminal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ss"&gt;:alarm_handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_alarm&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;:koko&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ZZZZZZZZZ&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;# or&lt;/span&gt;
&lt;span class="ss"&gt;:alarm_handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear_alarm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:koko&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Also you can see some of the current data or configuration&amp;nbsp;options:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:disksup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_disk_data&lt;/span&gt;
&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;C:\\&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;234195964&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;E:\\&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;822396924&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;

&lt;span class="c1"&gt;# or&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:disksup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_check_interval&lt;/span&gt;
&lt;span class="mi"&gt;60000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Please notice that the check interval is in seconds when you set it, in ms when you retrieve&amp;nbsp;it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The above should help you if you also want to better understand alert_handler, os_mon and
how to configure it to run your own custom alert handlers. Of course in a production server
you should have proper monitoring tools for the health of your server but since os_mon is more
or less free thanks to erlang, why not add another safety&amp;nbsp;valve?&lt;/p&gt;
&lt;p&gt;If you want to take a look at an application that has everything configured, take a
look at my &lt;a class="reference external" href="https://github.com/spapas/phxcrd/"&gt;Phoenix template application&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="elixir"></category><category term="elixir"></category><category term="osmon"></category><category term="phoenix"></category><category term="erlang"></category><category term="os-monitoring"></category></entry><entry><title>Adding a latest-changes list to your WagtailÂ site</title><link href="https://www.spapas.net/2020/03/27/wagtail-add-latest-changes/" rel="alternate"></link><published>2020-03-27T14:20:00+02:00</published><updated>2020-03-27T14:20:00+02:00</updated><author><name>Serafeim Papastefanos</name></author><id>tag:www.spapas.net,2020-03-27:/2020/03/27/wagtail-add-latest-changes/</id><summary type="html">&lt;p class="first last"&gt;How to add a list of the latest changes to your wagtail&amp;nbsp;site&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I think that a very important tool for a new production &lt;a class="reference external" href="https://wagtail.io"&gt;Wagtail&lt;/a&gt; site is to have a list
where you&amp;#8217;ll be able to take a look at the latest changes. Most editors are not
experienced enough when using a new tool so it&amp;#8217;s easy to make bad quality edits. A
user could take a look at their changes and guide them if something&amp;#8217;s not up to good&amp;nbsp;standards.&lt;/p&gt;
&lt;p&gt;In this article I&amp;#8217;ll present a simple way to add a latest-changes list in your Wagtail site.
This is working excellent with Wagtail 2.9, I haven&amp;#8217;t tested it with other wagtail versions
so your milage may vary. In the meantime, I&amp;#8217;ll also introduce a bunch of concepts of Wagtail
I find&amp;nbsp;interesting.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 08/05/2020&lt;/strong&gt; Please notice that this article was originally written for Wagtail 2.8
projects. However, Wagtail 2.8 didn&amp;#8217;t have an official &lt;span class="caps"&gt;API&lt;/span&gt; for adding reports thus I had to
check the source code for some things. Those things since were not part of any &lt;span class="caps"&gt;API&lt;/span&gt; have
been changed and are not working in Wagtail&amp;nbsp;2.9.&lt;/p&gt;
&lt;p&gt;Thus I&amp;#8217;ve updated
the project to use the proper APIs and work with Wagtail 2.9 (and hopefully the next versions).
If you want to see what&amp;#8217;s changed between the two versions you can take a look at
&lt;a class="reference external" href="https://github.com/spapas/wagtail-latest-changes/commit/d751cd7978fc99c3b2f10e84c2f9b72c555f0930"&gt;this commit&lt;/a&gt; from the companion project. You may also want to take a look at the
&lt;a class="reference external" href="https://docs.wagtail.io/en/stable/advanced_topics/adding_reports.html"&gt;adding reports&lt;/a&gt; tutorial on the Wagtail&amp;nbsp;docs.&lt;/p&gt;
&lt;div class="section" id="a-starter-project"&gt;
&lt;h2&gt;A starter&amp;nbsp;project&lt;/h2&gt;
&lt;p&gt;Let&amp;#8217;s create a simple wagtail-starter project (this is for windows you should be able to easily follow the same steps in Unix like&amp;nbsp;systems):&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
C:\progr\py3&amp;gt;mkdir wagtail-starter
C:\progr\py3&amp;gt;cd wagtail-starter
C:\progr\py3\wagtail-starter&amp;gt;py -3 -m venv venv
C:\progr\py3\wagtail-starter&amp;gt;venv\Scripts\activate
(venv) C:\progr\py3\wagtail-starter&amp;gt;pip install wagtail
(venv) C:\progr\py3\wagtail-starter&amp;gt;wagtail.exe start wagtail_starter
(venv) C:\progr\py3\wagtail-starter&amp;gt;cd wagtail_starter
(venv) C:\progr\py3\wagtail-starter\wagtail_starter&amp;gt;python manage.py migrate
(venv) C:\progr\py3\wagtail-starter\wagtail_starter&amp;gt;python manage.py createsuperuser
(venv) C:\progr\py3\wagtail-starter\wagtail_starter&amp;gt;python manage.py runserver
&lt;/pre&gt;
&lt;p&gt;When you&amp;#8217;ve finished all the above you should be able to go to &lt;a class="reference external" href="http://127.0.0.1/"&gt;http://127.0.0.1/&lt;/a&gt; and see your homepage and then
visit &lt;a class="reference external" href="http://127.0.0.1/admin/"&gt;http://127.0.0.1/admin/&lt;/a&gt; and login with your superuser. What we&amp;#8217;d like to do is add a &amp;#8220;Latest changes&amp;#8221;
link in the &amp;#8220;Reports&amp;#8221; admin section like&amp;nbsp;this:&lt;/p&gt;
&lt;img alt="New menu" src="/images/latest-changes-template.png" style="width: 580px;" /&gt;
&lt;/div&gt;
&lt;div class="section" id="implementing-the-latest-changes-menu"&gt;
&lt;h2&gt;Implementing the latest-changes&amp;nbsp;menu&lt;/h2&gt;
&lt;div class="section" id="start-with-a-new-app"&gt;
&lt;h3&gt;Start with a new&amp;nbsp;app&lt;/h3&gt;
&lt;p&gt;To start the menu implementation I recommend putting everything related to it in a separate django application
so you can easily re-use it to multiple sites. For this, let&amp;#8217;s create a new django app&amp;nbsp;using:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
(venv) C:\progr\py3\wagtail-starter\wagtail_starter&amp;gt;python manage.py startapp latest_changes
&lt;/pre&gt;
&lt;p&gt;And add &lt;tt class="docutils literal"&gt;'latest_changes'&lt;/tt&gt; to the list of our &lt;tt class="docutils literal"&gt;INSTALLED_APPS&lt;/tt&gt; at the file &lt;tt class="docutils literal"&gt;wagtail_starter\settings\base.py&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="add-the-view"&gt;
&lt;h3&gt;Add the&amp;nbsp;view&lt;/h3&gt;
&lt;p&gt;Let&amp;#8217;s add the code for the view that will display the latest changes page. Modify the latest_changes/views.py file like&amp;nbsp;this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
from django.shortcuts import render
from wagtail.admin.views.reports import PageReportView
from wagtail.core.models import UserPagePermissionsProxy
from wagtail.core.models import Page


class LatestChangesView(PageReportView):
    template_name = &amp;quot;reports/latest_changes.html&amp;quot;
    title = &amp;quot;Latest changes&amp;quot;
    header_icon = &amp;quot;date&amp;quot;

    def get_queryset(self):
        self.queryset = Page.objects.order_by(&amp;quot;-last_published_at&amp;quot;)
        return super().get_queryset()

    def dispatch(self, request, *args, **kwargs):
        if not UserPagePermissionsProxy(request.user).can_remove_locks():
            return permission_denied(request)
        return super().dispatch(request, *args, **kwargs)
&lt;/pre&gt;
&lt;p&gt;As you can see the above code adds a very small view that overrides &lt;tt class="docutils literal"&gt;PageReportView&lt;/tt&gt; which is used
also by the locked pages view so most things are already implemented by that view. The only thing we do
here is to override the &lt;tt class="docutils literal"&gt;get_queryset&lt;/tt&gt; method to denote which pages we want to display and
the &lt;tt class="docutils literal"&gt;dispatch&lt;/tt&gt; to add some permission checks. Here we check that a user &lt;tt class="docutils literal"&gt;can_remove_locks&lt;/tt&gt; but we
could do other checks if needed. Finally, notice that we have overriden the template name which we&amp;#8217;ll
define in a&amp;nbsp;minute.&lt;/p&gt;
&lt;p&gt;Beyond &lt;tt class="docutils literal"&gt;PageReportView&lt;/tt&gt; that should be used for generating &lt;tt class="docutils literal"&gt;Page&lt;/tt&gt; reports, you can override
&lt;tt class="docutils literal"&gt;ReportView&lt;/tt&gt; which can be used to implement generic&amp;nbsp;reports.&lt;/p&gt;
&lt;p&gt;To properly add that view in our urls.py we can use a wagtail hook named &lt;tt class="docutils literal"&gt;register_admin_py&lt;/tt&gt;. Wagtail hooks
are a great way to excend the wagtail admin; to use them, you have to generate a file name &lt;tt class="docutils literal"&gt;wagtail_hooks.py&lt;/tt&gt;
in one of your apps. This file will be auto-impoted by wagtail when your app is&amp;nbsp;started.&lt;/p&gt;
&lt;p&gt;Thus, in our case we&amp;#8217;ll add a &lt;tt class="docutils literal"&gt;wagtail_hooks.py&lt;/tt&gt; file in the &lt;tt class="docutils literal"&gt;latest_changes&lt;/tt&gt; app with the following&amp;nbsp;code:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
from django.http import HttpResponse
from django.conf.urls import url
from wagtail.core import hooks
from .views import LatestChangesView

&amp;#64;hooks.register('register_admin_urls')
def urlconf_time():
  return [
    url(r'^latest_changes/$', LatestChangesView.as_view(), name='latest_changes'),
  ]
&lt;/pre&gt;
&lt;p&gt;The above just hooks up the &lt;tt class="docutils literal"&gt;LatestChangesView&lt;/tt&gt; we defined before to the &lt;tt class="docutils literal"&gt;/admin/latest_changes/&lt;/tt&gt; url.&lt;/p&gt;
&lt;p&gt;If everything&amp;#8217;s ok till now you should be able to visit: &lt;a class="reference external" href="http://127.0.0.1:8000/admin/latest_changes/"&gt;http://127.0.0.1:8000/admin/latest_changes/&lt;/a&gt; and
get an error for a missing template - remember that we haven&amp;#8217;t yet defined &lt;tt class="docutils literal"&gt;utils/reports/latest_changes.html&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="add-the-template"&gt;
&lt;h3&gt;Add the&amp;nbsp;template&lt;/h3&gt;
&lt;p&gt;To add the template we&amp;#8217;ll need to create a folder named &lt;tt class="docutils literal"&gt;templates&lt;/tt&gt; under our &lt;tt class="docutils literal"&gt;latest_changes&lt;/tt&gt; app and then
add a &lt;tt class="docutils literal"&gt;reports&lt;/tt&gt; folder to it. Finally in that folder add a &lt;tt class="docutils literal"&gt;latest_changes.html&lt;/tt&gt;. So the full path of
the &lt;tt class="docutils literal"&gt;latest_changes.html&lt;/tt&gt; should be: &lt;tt class="docutils literal"&gt;wagtail_starter\latest_changes\templates\reports\latest_changes.html&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
{% extends 'wagtailadmin/reports/base_page_report.html' %}
{% load i18n %}
{% block listing %}
    {% include &amp;quot;reports/_list_latest.html&amp;quot; %}
{% endblock %}

{% block no_results %}
    &amp;lt;p&amp;gt;{% trans &amp;quot;No changes found.&amp;quot; %}&amp;lt;/p&amp;gt;
{% endblock %}
&lt;/pre&gt;
&lt;p&gt;I&amp;#8217;ve selected the &lt;tt class="docutils literal"&gt;reports&lt;/tt&gt; subfolder just to be compatible with what wagtail does, you can just put &lt;tt class="docutils literal"&gt;latest_changes.html&lt;/tt&gt;  directly
under &lt;tt class="docutils literal"&gt;templates&lt;/tt&gt;; don&amp;#8217;t forget to update the &lt;tt class="docutils literal"&gt;LatestChangesView&lt;/tt&gt; defined before though! This template extends the
&lt;tt class="docutils literal"&gt;base_page_report.html&lt;/tt&gt; template that Wagtail provides for page reports. It also includes a
snippet named &lt;tt class="docutils literal"&gt;reports/_list_latest.html&amp;quot; thus you also need to add a ``_list_latest.html&lt;/tt&gt; file in the same folder with the
following&amp;nbsp;contents:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
{% extends &amp;quot;wagtailadmin/pages/listing/_list_explore.html&amp;quot; %}

{% load i18n wagtailadmin_tags %}

{% block post_parent_page_headers %}
&amp;lt;tr&amp;gt;
&amp;lt;th&amp;gt;Title&amp;lt;/th&amp;gt;
&amp;lt;th&amp;gt;Last update&amp;lt;/th&amp;gt;
&amp;lt;th&amp;gt;Kind&amp;lt;/th&amp;gt;
&amp;lt;th&amp;gt;Status&amp;lt;/th&amp;gt;
&amp;lt;th&amp;gt;Owner / last publish / last edit&amp;lt;/th&amp;gt;
&amp;lt;/tr&amp;gt;
{% endblock %}

{% block page_navigation %}
    &amp;lt;td&amp;gt;
        {{ page.owner }} / {{ page.live_revision.user }} / {{ page.get_latest_revision.user }}
    &amp;lt;/td&amp;gt;
{% endblock %}
&lt;/pre&gt;
&lt;p&gt;Please notice that my &lt;tt class="docutils literal"&gt;_list_latest.html&lt;/tt&gt; snippet extends the Wagtail provided &lt;tt class="docutils literal"&gt;_list_explore.html&lt;/tt&gt; template and
overrides some things that can be overriden from that file. If you want to do more changes you&amp;#8217;ll need to copy over
everything and change things as you wish instead of&amp;nbsp;extending.&lt;/p&gt;
&lt;p&gt;Also, keep in mind that because you added a &lt;tt class="docutils literal"&gt;templates&lt;/tt&gt; folder you&amp;#8217;ll need to restart your django development&amp;nbsp;server.&lt;/p&gt;
&lt;p&gt;Finally, if everything is ok until now you should be able to visit &lt;a class="reference external" href="http://127.0.0.1:8000/admin/latest_changes/"&gt;http://127.0.0.1:8000/admin/latest_changes/&lt;/a&gt; and see
your view! It will say &amp;#8220;No changes found&amp;#8221; if you&amp;#8217;ve followed the steps here; just go to Pages - Home from the wagtail
menu and edit that page (just save it). Now visit &lt;a class="reference external" href="http://127.0.0.1:8000/admin/latest_changes/"&gt;http://127.0.0.1:8000/admin/latest_changes/&lt;/a&gt; again and behold! Your
own latest changes&amp;nbsp;view:&lt;/p&gt;
&lt;img alt="The view" src="/images/last_changes_view.png" style="width: 780px;" /&gt;
&lt;/div&gt;
&lt;div class="section" id="displaying-our-menu-item"&gt;
&lt;h3&gt;Displaying our menu&amp;nbsp;item&lt;/h3&gt;
&lt;p&gt;The last piece of the puzzle missing is to actually display a menu item under the Reports menu of wagtail admin. For this
we are going to use our friends, the wagtail hooks. So, change the wagtail_hooks.py file like this (I&amp;#8217;m also including
the code from adding the&amp;nbsp;url):&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
from django.http import HttpResponse
from django.conf.urls import url
from django.urls import reverse
from wagtail.admin.menu import MenuItem
from wagtail.core import hooks
from wagtail.core.models import UserPagePermissionsProxy
from .views import LatestChangesView

&amp;#64;hooks.register('register_admin_urls')
def urlconf_time():
    return [
      url(r'^latest_changes/$', LatestChangesView.as_view(), name='latest_changes'),
    ]


class LatestChangesPagesMenuItem(MenuItem):
    def is_shown(self, request):
        return UserPagePermissionsProxy(request.user).can_remove_locks()


&amp;#64;hooks.register(&amp;quot;register_reports_menu_item&amp;quot;)
def register_latest_changes_menu_item():
    return LatestChangesPagesMenuItem(
        &amp;quot;Latest changes&amp;quot;, reverse(&amp;quot;latest_changes&amp;quot;), classnames=&amp;quot;icon icon-date&amp;quot;, order=100,
    )
&lt;/pre&gt;
&lt;p&gt;The above code uses the &lt;tt class="docutils literal"&gt;register_reports_menu_item&lt;/tt&gt; which is a hook that can be used to add a child
specifically to the Reports menu item. Notice that it uses the &lt;tt class="docutils literal"&gt;LatestChangesPagesMenuItem&lt;/tt&gt; which
is a class that inherits from &lt;tt class="docutils literal"&gt;MenuItem&lt;/tt&gt;; the only thing that is overriden there is the &lt;tt class="docutils literal"&gt;is_shown&lt;/tt&gt;
method so it will have the same permissions as the &lt;tt class="docutils literal"&gt;LatestChangesView&lt;/tt&gt; we defined above so user
that will see the menu item will also have permissions to display the view. Here&amp;#8217;s the final menu&amp;nbsp;item:&lt;/p&gt;
&lt;img alt="The menu item" src="/images/latest_changes_menu.png" style="width: 380px;" /&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;We&amp;#8217;ve seen the steps required to add a latest pages view to your wagtail admin site. I have to admit that
it is a little work however the nice thing is that this is all self-included in a single application. You can
just get tha application and copy over it to your wagtail site; after you add that application to INSTALLED_APPS
you should get the whole functionality without any more modifications to your project. To help you more
with this I&amp;#8217;ve included the whole code of this project in the &lt;a class="reference external" href="https://github.com/spapas/wagtail-latest-changes"&gt;https://github.com/spapas/wagtail-latest-changes&lt;/a&gt;&amp;nbsp;repository.&lt;/p&gt;
&lt;p&gt;You can either clone this repository to see the functionality or just copy over the &lt;tt class="docutils literal"&gt;latest_changes&lt;/tt&gt; folder to
your wagtail project to include the functionality directly (don&amp;#8217;t forget to fix the &lt;tt class="docutils literal"&gt;INSTALLED_APPS&lt;/tt&gt; setting)!
It should work with all Wagtail 2.9 and later&amp;nbsp;projects.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="wagtail"></category><category term="django"></category><category term="wagtail"></category></entry><entry><title>Quick and easy layout of django forms using django-crispy-forms andÂ django-widget-tweaks</title><link href="https://www.spapas.net/2020/03/18/django-crispy-form-quick-easy-layout/" rel="alternate"></link><published>2020-03-18T11:20:00+02:00</published><updated>2020-03-18T11:20:00+02:00</updated><author><name>Serafeim Papastefanos</name></author><id>tag:www.spapas.net,2020-03-18:/2020/03/18/django-crispy-form-quick-easy-layout/</id><summary type="html">&lt;p class="first last"&gt;How to easily layout your django-crispy-forms&amp;nbsp;forms&lt;/p&gt;
</summary><content type="html">&lt;p&gt;One of the first problems you have when you want to create a traditional &lt;span class="caps"&gt;HTML&lt;/span&gt; django site (i.e
not an &lt;span class="caps"&gt;SPA&lt;/span&gt; one) is how to properly and beautifully layout your forms. In this small article I&amp;#8217;ll
talk about two very useful django packages that will help you have great layouts in your forms:
&lt;a class="reference external" href="https://github.com/django-crispy-forms/django-crispy-forms"&gt;django-crispy-forms&lt;/a&gt;  and &lt;a class="reference external" href="https://github.com/jazzband/django-widget-tweaks"&gt;django-widget-tweaks&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="django-crispy-forms"&gt;
&lt;h2&gt;django-crispy-forms&lt;/h2&gt;
&lt;p&gt;The django-crispy-forms django package is a great way to properly format your forms. If you don&amp;#8217;t
already use it I totally recommend to check it out; it&amp;#8217;s very useful and you&amp;#8217;ll definitely love it
if you are a heavy django forms user. It helps you properly layout your forms either implicitly or&amp;nbsp;explicitly.&lt;/p&gt;
&lt;p&gt;For explicitly laying out your forms you should add a &lt;tt class="docutils literal"&gt;FormHelper&lt;/tt&gt; to your django form class and
use the &lt;tt class="docutils literal"&gt;{% crispy %}&lt;/tt&gt; template tag. You can use this to explicitly define your form layout with
as much detail as you want since you have full control. I won&amp;#8217;t go into more details about this since it&amp;#8217;s
&lt;a class="reference external" href="https://django-crispy-forms.readthedocs.io/en/latest/crispy_tag_forms.html#crispy-tag-with-forms"&gt;explained thoroughly in the docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For implicitly laying out your forms, you will just use the &lt;tt class="docutils literal"&gt;|crispy&lt;/tt&gt; template filter. This gets a
normal django form (without any modifications) and converts it to a crispy form based on the &lt;a class="reference external" href="https://django-crispy-forms.readthedocs.io/en/latest/install.html#template-packs"&gt;template pack&lt;/a&gt;
you are using. This works great for many situations however sometimes you&amp;#8217;ll need to have more control
over this without going to the extra effort to add a complete layout to each of your forms using
the &lt;tt class="docutils literal"&gt;FormHelper&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;So how do you resolve this? Enter the &lt;tt class="docutils literal"&gt;|as_crispy_field&lt;/tt&gt; template filter. To use that filter you&amp;#8217;ll need
to add the &lt;tt class="docutils literal"&gt;{% load crispy_forms_tags %}&lt;/tt&gt; lines to your template and then you can pass any one of your
form&amp;#8217;s fields to it so it will be properly &amp;#8220;crispified&amp;#8221;! Let&amp;#8217;s see a quick example of adding the fields of
a form in a &lt;tt class="docutils literal"&gt;&amp;lt;div &lt;span class="pre"&gt;class='col-md-6'&amp;gt;&lt;/span&gt;&lt;/tt&gt; so they will be in two columns (using&amp;nbsp;bootstrap):&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;lt;form class='form' method=&amp;quot;POST&amp;quot;&amp;gt;
    &amp;lt;div class='row'&amp;gt;
        {% for field in form %}
            &amp;lt;div class='col-md-6'&amp;gt;
              {{ field|as_crispy_field }}
            &amp;lt;/div&amp;gt;
        {% endfor %}
        {% csrf_token %}
    &amp;lt;/div&amp;gt;
    &amp;lt;input class='btn btn-primary' type='submit'&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/pre&gt;
&lt;p&gt;So the above code enumerates all form fields and uses the &lt;tt class="docutils literal"&gt;|as_crispy_field&lt;/tt&gt; to properly add the
crispified information to it. If you want to re-use the above two column layout in multiple forms and
be more dry you can create a template snippet and &lt;tt class="docutils literal"&gt;{% include %}&lt;/tt&gt; it in the part of your code you
want the form to be&amp;nbsp;rendered.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-widget-tweaks"&gt;
&lt;h2&gt;django-widget-tweaks&lt;/h2&gt;
&lt;p&gt;Using the &lt;tt class="docutils literal"&gt;as_crispy_field&lt;/tt&gt; is excellent however sometimes you may need even more control
of your for fields, for example add an extra class (like &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;form-control-lg&lt;/span&gt;&lt;/tt&gt;) to your form controls.
The answer to this is the django-widget-tweaks package: It enables you to easily modify form
fields by adding classes, attributes etc to them from within your django&amp;nbsp;templates.&lt;/p&gt;
&lt;p&gt;To use it you need to add a &lt;tt class="docutils literal"&gt;{% load widget_tweaks %}&lt;/tt&gt; to your templates. Then you&amp;#8217;ll be
able to use the &lt;tt class="docutils literal"&gt;|add_class&lt;/tt&gt; form field to add a class to your form field. For example the
previous example can be modified like this to have smaller&amp;nbsp;controls:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;lt;form class='form' method=&amp;quot;POST&amp;quot;&amp;gt;
    &amp;lt;div class='row'&amp;gt;
        {% for field in form %}
            &amp;lt;div class='col-md-6'&amp;gt;
              {{ field|add_class:&amp;quot;form-control-sm&amp;quot;|as_crispy_field }}
            &amp;lt;/div&amp;gt;
        {% endfor %}
        {% csrf_token %}
    &amp;lt;/div&amp;gt;
    &amp;lt;input class='btn btn-primary' type='submit'&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Please notice that I use both &lt;tt class="docutils literal"&gt;add_class&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;as_crispy_fields&lt;/tt&gt; together; notice the
order, the &lt;tt class="docutils literal"&gt;add_class&lt;/tt&gt; needs to be &lt;em&gt;before&lt;/em&gt; the &lt;tt class="docutils literal"&gt;as_crispy_field&lt;/tt&gt; or you&amp;#8217;ll get an error. This
way the django form field will have the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;form-control-sm&lt;/span&gt;&lt;/tt&gt; class &lt;em&gt;and&lt;/em&gt; then be rendered as a
crispy&amp;nbsp;field.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s now suppose that you need to more control over your fields. For example you need to add a class
only to your select fields or even only to a particular field (depending on its name). To do that
you can use the &lt;tt class="docutils literal"&gt;name&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;field.widget.input_type&lt;/tt&gt; attributes of each for field. So, to make
select fields smaller and with a &lt;tt class="docutils literal"&gt;warning&lt;/tt&gt; background and fields that have a name of &lt;tt class="docutils literal"&gt;name&lt;/tt&gt;
or &lt;tt class="docutils literal"&gt;year&lt;/tt&gt; larger you can use something like&amp;nbsp;this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;lt;form class='form' method=&amp;quot;POST&amp;quot;&amp;gt;
    &amp;lt;div class='row'&amp;gt;
        {% for field in form %}
          {% if field.name == 'name' or field.name == 'year' %}
              {{ field|add_class:&amp;quot;form-control-lg&amp;quot;|as_crispy_field }}
          {% elif field.field.widget.input_type == 'select' %}
              {{ field|add_class:&amp;quot;form-control-sm&amp;quot;|add_class:&amp;quot;bg-warning&amp;quot;|as_crispy_field }}
          {% else %}
              {{ field|as_crispy_field }}
          {% endif %}
        {% endfor %}
        {% csrf_token %}
    &amp;lt;/div&amp;gt;
    &amp;lt;input class='btn btn-primary' type='submit'&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Using the above techniques you should be able to quickly layout and format your form fields with
much control! If you need something more I recommend going the &lt;tt class="docutils literal"&gt;FormLayout&lt;/tt&gt; route I mentioned
in the&amp;nbsp;beginning.&lt;/p&gt;
&lt;/div&gt;
</content><category term="django"></category><category term="django"></category><category term="forms"></category><category term="django-crispy-forms"></category><category term="django-widget-tweaks"></category></entry><entry><title>Declarative Ecto queryÂ sorting</title><link href="https://www.spapas.net/2019/10/17/declarative-ecto-query-sorting/" rel="alternate"></link><published>2019-10-17T12:20:00+03:00</published><updated>2019-10-17T12:20:00+03:00</updated><author><name>Serafeim Papastefanos</name></author><id>tag:www.spapas.net,2019-10-17:/2019/10/17/declarative-ecto-query-sorting/</id><summary type="html">&lt;p class="first last"&gt;Being able to declare your Ecto query sorting even on fields spanning&amp;nbsp;joins&lt;/p&gt;
</summary><content type="html">&lt;p&gt;In a &lt;a class="reference external" href="https://spapas.github.io/2019/07/25/declarative-ecto-query-filters/"&gt;previous article&lt;/a&gt; I presented a method for declaring dynamic filters for your ecto queries.
Continuing this article, I&amp;#8217;ll present here a way to allow dynamic sorting for your queries using
fields that may even span&amp;nbsp;relations.&lt;/p&gt;
&lt;div class="section" id="what-will-it-do"&gt;
&lt;h2&gt;What will it&amp;nbsp;do&lt;/h2&gt;
&lt;p&gt;The solution is a couple of function that can be put inside the &lt;tt class="docutils literal"&gt;QueryFilterEx&lt;/tt&gt; I mentioned
in the &lt;a class="reference external" href="https://spapas.github.io/2019/07/25/declarative-ecto-query-filters/"&gt;previous article&lt;/a&gt;. Please make sure that you&amp;#8217;ve completely read and understand this
article before continuing&amp;nbsp;here.&lt;/p&gt;
&lt;p&gt;To use the dynamic sorting function you&amp;#8217;ll need to declare the fields that would allow sorting using
a simple array of strings. The sort fields should then be added as links to your phoenix page which
will then pass an &lt;tt class="docutils literal"&gt;order_by=field_name&lt;/tt&gt; query parameter to your&amp;nbsp;controller.&lt;/p&gt;
&lt;p&gt;The module has a very simple &lt;span class="caps"&gt;API&lt;/span&gt; consisting of a single&amp;nbsp;function:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;sort_by_params(query, params, allowed_sort_fields)&lt;/tt&gt;: Pass it the query, the &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;GET&lt;/span&gt;&lt;/tt&gt; request parameters you got from your form and the declared sort fields array to return you a sorted&amp;nbsp;query&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can find a sample of the technique presented in this article in my &lt;span class="caps"&gt;PHXCRD&lt;/span&gt; repository:
&lt;a class="reference external" href="https://github.com/spapas/phxcrd"&gt;https://github.com/spapas/phxcrd&lt;/a&gt;  for example in the &lt;tt class="docutils literal"&gt;user_controller&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;authority_controller&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="preparing-the-query"&gt;
&lt;h2&gt;Preparing the&amp;nbsp;query&lt;/h2&gt;
&lt;p&gt;In order to use dynamic sorting you&amp;#8217;ll need to properly &amp;#8220;prepare&amp;#8221; your Ecto query by &lt;em&gt;naming all your relations&lt;/em&gt;
as I&amp;#8217;ve already explained in the &lt;a class="reference external" href="https://spapas.github.io/2019/07/25/declarative-ecto-query-filters/"&gt;previous article&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="declaring-the-sort-fields"&gt;
&lt;h2&gt;Declaring the sort&amp;nbsp;fields&lt;/h2&gt;
&lt;p&gt;To declare the sort fields you&amp;#8217;ll just add an array of fields you&amp;#8217;ll want to allow sorting on. Each field
should have the form &lt;tt class="docutils literal"&gt;binding_name__field_name&lt;/tt&gt; where &lt;tt class="docutils literal"&gt;binding_name&lt;/tt&gt; is the name of the table
you&amp;#8217;ve declared in your
query and &lt;tt class="docutils literal"&gt;field_name&lt;/tt&gt; is the name of the field that the query will be sorted by. This is the way
that the sort
fields will also be declared in the phoenix html page. Django users will definitely remember the
&lt;tt class="docutils literal"&gt;model__field&lt;/tt&gt; convention.&lt;/p&gt;
&lt;p&gt;Declaring the sort fields here and using them again in the html page may seem reduntant, however
it is absolute necessary to declare a priori which fields are allowed because the sort http params
will be received
as strings and to be used in queries these strings will be converted to atoms. The number of atoms is
finite (there&amp;#8217;s an absolute limit of allowed atoms in an erlang program; if that limit is surpassed
your program will crash) so you can&amp;#8217;t allow the user to pass whatever he wants (so if the &lt;tt class="docutils literal"&gt;order_by&lt;/tt&gt;
parameter does not contain one of the fields you declare here then no strings will be converted to&amp;nbsp;atoms).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="integrating-with-a-controller"&gt;
&lt;h2&gt;Integrating with a&amp;nbsp;controller&lt;/h2&gt;
&lt;p&gt;As an example let&amp;#8217;s see how the dynamic sort fields will be integrated with the phxcrd user_controller.
The query I&amp;#8217;d like to filter on is the following (see that everything I&amp;#8217;ll need is named using &lt;tt class="docutils literal"&gt;:as&lt;/tt&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;as&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;left_join&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nc"&gt;Authority&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;as&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:authority&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authority_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;left_join&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nc"&gt;UserPermission&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;left_join&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nc"&gt;Permission&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;as&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:permission&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;permission_id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;preload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;authority&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;permissions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To declare the sort fields I like to create a module attribute ending with &lt;tt class="docutils literal"&gt;sort_fields&lt;/tt&gt;, something like
&lt;tt class="docutils literal"&gt;&amp;#64;user_sort_fields&lt;/tt&gt; for example. Here&amp;#8217;s the sort fields I&amp;#8217;m going to use for&amp;nbsp;user_controller:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;@user_sort_fields&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;user__username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;user__name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;user__last_login&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So it will only allow the &lt;tt class="docutils literal"&gt;user.username&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;user.name&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;user.last_login&lt;/tt&gt; fields for sorting.
I could easily sort by &lt;tt class="docutils literal"&gt;authority.name&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;permission.name&lt;/tt&gt; in a similar&amp;nbsp;fashion.&lt;/p&gt;
&lt;p&gt;Finally, here&amp;#8217;s the full code of the index&amp;nbsp;controller:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;changeset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;QueryFilterEx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_changeset_from_params&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;@user_filters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;as&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;left_join&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nc"&gt;Authority&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;as&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:authority&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authority_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

      &lt;span class="ss"&gt;left_join&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nc"&gt;UserPermission&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;left_join&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nc"&gt;Permission&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;as&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:permission&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;permission_id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;preload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;authority&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;permissions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;QueryFilterEx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;@user_filters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;QueryFilterEx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort_by_params&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;@user_sort_fields&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;index.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that this is exactly the
same as the controller I discussed in the dynamic filters article with the addition of the
&lt;tt class="docutils literal"&gt;QueryFilterEx.sort_by_params(params, &amp;#64;user_sort_fields)&lt;/tt&gt; pipe to do the&amp;nbsp;sorting.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-template"&gt;
&lt;h2&gt;The&amp;nbsp;template&lt;/h2&gt;
&lt;p&gt;The template for the user index action is also the same with a couple of minor changes: Instead of
using a static header for the table title I will use a link that will change the sorting&amp;nbsp;order:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;thead&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= link gettext(&amp;quot;Username&amp;quot;), to: create_order_url(@conn, &amp;quot;user__username&amp;quot;) %&amp;gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= link gettext(&amp;quot;Name&amp;quot;), to: create_order_url(@conn, &amp;quot;user__name&amp;quot;) %&amp;gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;First name&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Last name&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Email&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Am / Am phxcrd&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Kind&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= link gettext(&amp;quot;Last login&amp;quot;), to: create_order_url(@conn, &amp;quot;user__last_login&amp;quot;) %&amp;gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Is enabled&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;thead&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that I just used the &lt;tt class="docutils literal"&gt;create_order_url&lt;/tt&gt; function passing it the &lt;tt class="docutils literal"&gt;&amp;#64;conn&lt;/tt&gt; and the
sort field. This &lt;tt class="docutils literal"&gt;create_order_url&lt;/tt&gt; function is implemented in a module I include in
all my views and will properly add an &lt;tt class="docutils literal"&gt;order_by=field&lt;/tt&gt; in the url (it will also add
an &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;order_by=-field&lt;/span&gt;&lt;/tt&gt; if the same header is clicked twice). I will explain it more
in the following&amp;nbsp;sections.&lt;/p&gt;
&lt;p&gt;Finally, please notice that if you use pagination and sorting you need to properly handle the &lt;tt class="docutils literal"&gt;order_by&lt;/tt&gt;
query parameter when creating the next-previous page links. Actually, there are three things
competing on their url parameter dominance; I&amp;#8217;d like to talk about that in the next&amp;nbsp;interlude.&lt;/p&gt;
&lt;div class="section" id="interlude-http-get-parameter-priority"&gt;
&lt;h3&gt;Interlude: &lt;span class="caps"&gt;HTTP&lt;/span&gt; &lt;span class="caps"&gt;GET&lt;/span&gt; parameter&amp;nbsp;priority&lt;/h3&gt;
&lt;p&gt;Now, in an index page you will probably have three things all of which will want to put parameters
to your urls to be&amp;nbsp;activated:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Query filtering; this will put a &lt;tt class="docutils literal"&gt;filter&lt;/tt&gt; query parameter to filter your query. Notice that because of how phoenix works (it allows maps in the query parameters) the filter can be a single query parameter but contain multiple filters (i.e the filter will be something like &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;%{&amp;quot;key1&amp;quot;&lt;/span&gt; =&amp;gt; &amp;quot;value1&amp;quot;, &amp;quot;key2&amp;quot; =&amp;gt; &amp;quot;value2&amp;quot;}&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Order by: This will put an &lt;tt class="docutils literal"&gt;order_by&lt;/tt&gt; query parameter to denote the field that the query will be&amp;nbsp;sorted&lt;/li&gt;
&lt;li&gt;Pagination: This will put an &lt;tt class="docutils literal"&gt;page&lt;/tt&gt; query parameter to denote the current&amp;nbsp;page&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I like to give them a priority in the order I&amp;#8217;ve listed them; when one of them is changed, it will
&lt;em&gt;clear&lt;/em&gt; the ones following it. So if the query filters are changed both the pagination and the order by
fields will be cleared, if the order by field is changed then only the pagination field will be cleared
but if the pagination field is changed both the query filters and the order by fields will be kept&amp;nbsp;there.&lt;/p&gt;
&lt;p&gt;I think that&amp;#8217;s the best way to do it from an &lt;span class="caps"&gt;UX&lt;/span&gt; point of view; try to think about it and you&amp;#8217;ll probably&amp;nbsp;agree.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="how-does-this-work"&gt;
&lt;h2&gt;How does this&amp;nbsp;work?&lt;/h2&gt;
&lt;p&gt;In this section I&amp;#8217;ll try to explain exactly how the dynamic sort fields&amp;nbsp;work.&lt;/p&gt;
&lt;p&gt;So I&amp;#8217;ll split this explanation in two parts: Explain &lt;tt class="docutils literal"&gt;create_order_url&lt;/tt&gt;
and then explain &lt;tt class="docutils literal"&gt;sort_by_params&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="section" id="create-order-url"&gt;
&lt;h3&gt;&lt;tt class="docutils literal"&gt;create_order_url&lt;/tt&gt;&lt;/h3&gt;
&lt;p&gt;This function receives three parameters: The current &lt;tt class="docutils literal"&gt;&amp;#64;conn&lt;/tt&gt;, the name of a &lt;tt class="docutils literal"&gt;field&lt;/tt&gt; to
sort by and an optional list of query parameters that need to be kept while creating the
order by links. I&amp;#8217;ve put this function in a &lt;tt class="docutils literal"&gt;ViewHelpers&lt;/tt&gt; module that I am including to
all my views (by adding an &lt;tt class="docutils literal"&gt;import PhxcrdWeb.ViewHelpers&lt;/tt&gt; line to the &lt;tt class="docutils literal"&gt;PhxcrdWeb&lt;/tt&gt; module).&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s take a look at the&amp;nbsp;code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;create_order_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;allowed_keys&lt;/span&gt; &lt;span class="p"&gt;\\&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;filter&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nc"&gt;Phoenix.Controller&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;get_order_params&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;allowed_keys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field_name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This doesn&amp;#8217;t do much, it just uses the phoenix&amp;#8217;s &lt;tt class="docutils literal"&gt;current_url&lt;/tt&gt; that generates a new
url to the current page, passing it a dictionary
of http get parameters that should be appended to the url that
are created through &lt;tt class="docutils literal"&gt;get_order_params&lt;/tt&gt;. Notice that there&amp;#8217;s an
&lt;tt class="docutils literal"&gt;allowed_keys&lt;/tt&gt; parameter that contains the query parameters that we need to keep after
the sorting (see the previous interlude).
By default I pass the &lt;tt class="docutils literal"&gt;filter&lt;/tt&gt; query parameter so if theres a filter (check
my previous article) it will keep it when sorting (but any pagination will be cleared;
if I sort by a new field I want to go to the first page there&amp;#8217;s no reason for me to keep
seeing the page I was on before changing the order&amp;nbsp;by).&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;get_order_params&lt;/tt&gt; receives the query parameters of the current connection (as a map),
the allowed keys I mentioned before and the actual name of the field to sort on. This method is a
little more&amp;nbsp;complex:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;defp&lt;/span&gt; &lt;span class="n"&gt;get_order_params&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;allowed_keys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;params&lt;/span&gt;
  &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;take&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;allowed_keys&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;order_by&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_atom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="ss"&gt;:order_by&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;order_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="ni"&gt;&amp;amp;1&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;order_key&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;order_key&lt;/span&gt;
      &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;order_key&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;order_key&lt;/span&gt;
      &lt;span class="bp"&gt;_&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;order_key&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It only keeps the parameters in the &lt;tt class="docutils literal"&gt;allowed_keys&lt;/tt&gt; list and the current &lt;tt class="docutils literal"&gt;order_by&lt;/tt&gt; parameter
(if there&amp;#8217;s one)  discarding everything else. It will then convert the keys of the map to atoms and
put them in a new map. Finally, it will update the &lt;tt class="docutils literal"&gt;order_by&lt;/tt&gt; field (if exists) either by
switching the &lt;tt class="docutils literal"&gt;-&lt;/tt&gt; in front of the field to declare asc/desc sorting or adding it for the field
that was clicked. Actually the logic of that &lt;tt class="docutils literal"&gt;Map.update&lt;/tt&gt; is the&amp;nbsp;following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;If there&amp;#8217;s no &lt;tt class="docutils literal"&gt;:order_by&lt;/tt&gt; key then add it and assign the passed &lt;tt class="docutils literal"&gt;order_key&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;If the current value of &lt;tt class="docutils literal"&gt;:order_by&lt;/tt&gt; is equal to &lt;tt class="docutils literal"&gt;order_key&lt;/tt&gt; with or without a &lt;tt class="docutils literal"&gt;-&lt;/tt&gt; then toggle the &lt;tt class="docutils literal"&gt;-&lt;/tt&gt; (this happens when you click on a field that is already used for&amp;nbsp;sorting)&lt;/li&gt;
&lt;li&gt;If the current value of &lt;tt class="docutils literal"&gt;:order_by&lt;/tt&gt; is anything else (i.e not the same as the &lt;tt class="docutils literal"&gt;order_key&lt;/tt&gt;) then just change &lt;tt class="docutils literal"&gt;:order_by&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-orderKey&lt;/span&gt;&lt;/tt&gt; (this happens when there&amp;#8217;s sorting but you click on a different field, not the one used for the&amp;nbsp;sorting)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Notice that this juggling between map, list of keywords and then map again (using &lt;tt class="docutils literal"&gt;Enum.map&lt;/tt&gt; and then
&lt;tt class="docutils literal"&gt;Map.new&lt;/tt&gt; etc) is needed because
the query parameters are in a map with strings as keys form (&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;%{&amp;quot;key&amp;quot;&lt;/span&gt; =&amp;gt; &amp;quot;value&amp;quot;}&lt;/tt&gt;) while
the &lt;tt class="docutils literal"&gt;current_url&lt;/tt&gt; function needs the query params in a map with atoms as keys form
(&lt;tt class="docutils literal"&gt;%{key: &amp;quot;value&amp;quot;}&lt;/tt&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sort-by-params"&gt;
&lt;h3&gt;&lt;tt class="docutils literal"&gt;sort_by_params&lt;/tt&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;sort_by_params&lt;/tt&gt; method gets three parameters: The &lt;tt class="docutils literal"&gt;query&lt;/tt&gt; that will be sorted,
the existing http parameters map (so as to retrieve the &lt;tt class="docutils literal"&gt;order_by&lt;/tt&gt; value)
and the declared list of allowed sorting fields. Let&amp;#8217;s take a look at&amp;nbsp;it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;sort_by_params&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;qs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;order_by&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;allowed&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="ss"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;do_sort_by_params&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;qs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:asc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;allowed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;sort_by_params&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;qs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;order_by&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;allowed&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="ss"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;do_sort_by_params&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;qs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:desc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;allowed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;sort_by_params&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;qs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;_&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="ss"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;qs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This multi-legged function will only do something if there&amp;#8217;s an &lt;tt class="docutils literal"&gt;order_by&lt;/tt&gt; parameter in the http
parameters (else it will just return the query as is) and will call &lt;tt class="docutils literal"&gt;do_sort_by_params&lt;/tt&gt; passing
it the received query,
either &lt;tt class="docutils literal"&gt;:asc&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;:desc&lt;/tt&gt; (depending if there&amp;#8217;s a &lt;tt class="docutils literal"&gt;-&lt;/tt&gt; in front of the value) and the
received allowed fields&amp;nbsp;list.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;do_sort_by_params&lt;/tt&gt; makes sure that the passed parameter is in the allowed list
and if yes
it creates the atoms of the binding and field name (using &lt;tt class="docutils literal"&gt;String.to_atom&lt;/tt&gt;) and
does the actual sorting to the passed&amp;nbsp;query:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;defp&lt;/span&gt; &lt;span class="n"&gt;do_sort_by_params&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;qs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;allowed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;allowed&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_atom&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;qs&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;([{&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)}])&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="n"&gt;qs&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The line &lt;tt class="docutils literal"&gt;qs |&amp;gt; &lt;span class="pre"&gt;order_by([{^binding,&lt;/span&gt; &lt;span class="pre"&gt;t}],&lt;/span&gt; &lt;span class="pre"&gt;[{^ord,&lt;/span&gt; field(t, &lt;span class="pre"&gt;^name)}])&lt;/span&gt;&lt;/tt&gt; may seem a little
complex but it has been thoroughly explained in the previous&amp;nbsp;article.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;By using the methods described here you can easily add a dynamic sorting to your queries
through fields that may span relations just by creating a bunch of http &lt;span class="caps"&gt;GET&lt;/span&gt; links
and passing them an &lt;tt class="docutils literal"&gt;order_by&lt;/tt&gt; query&amp;nbsp;parameter.&lt;/p&gt;
&lt;/div&gt;
</content><category term="elixir"></category><category term="elixir"></category><category term="phoenix"></category><category term="ecto"></category><category term="queries"></category><category term="declarative"></category></entry><entry><title>How to properly handle an HTMLÂ form</title><link href="https://www.spapas.net/2019/10/03/html-form-submit-php/" rel="alternate"></link><published>2019-10-03T14:20:00+03:00</published><updated>2019-10-03T14:20:00+03:00</updated><author><name>Serafeim Papastefanos</name></author><id>tag:www.spapas.net,2019-10-03:/2019/10/03/html-form-submit-php/</id><summary type="html">&lt;p class="first last"&gt;An introductory tutorial on how to properly handle a form. &lt;span class="caps"&gt;PHP&lt;/span&gt; is used for pedagogical&amp;nbsp;reasons.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;One of the simplest things somebody would like to do in a web application is to display a form to the user and then handle the data the application
received from the form. This is a very common task however there are many loose ends and things that a new developer can do wrong. Recently, I tried
to explain this to somebody however I couldn&amp;#8217;t find a tutorial containing all the information I think it is important. So I decided to write it&amp;nbsp;here.&lt;/p&gt;
&lt;p&gt;To make it very easy to test it and understand it I decided to use &lt;span class="caps"&gt;PHP&lt;/span&gt; to handle the form submission. I must confess that I don&amp;#8217;t like &lt;span class="caps"&gt;PHP&lt;/span&gt; and I never
use it in production apps (unless I need to support an existing one). However, for such simple tasks and examples &lt;span class="caps"&gt;PHP&lt;/span&gt; is probably the easiest thing for
a new developer to understand: Just create a &lt;tt class="docutils literal"&gt;.php&lt;/tt&gt; file and put it in a folder in your apache &lt;tt class="docutils literal"&gt;htdocs&lt;/tt&gt;; there now you can test the&amp;nbsp;behavior!&lt;/p&gt;
&lt;p&gt;This tutorial will be as comprehensive as possible and will try to explain all things that I feel that need explaining. However I won&amp;#8217;t go into details
about &lt;span class="caps"&gt;HTML&lt;/span&gt; or &lt;span class="caps"&gt;PHP&lt;/span&gt; syntax; you&amp;#8217;ll need to know some things about them to understand what&amp;#8217;s going on here; after all the important thing is to understand
the big picture so you can re-implement them in your case (or understand why your web framework does what it&amp;nbsp;does).&lt;/p&gt;
&lt;div class="section" id="a-quick-http-primer"&gt;
&lt;h2&gt;A quick &lt;span class="caps"&gt;HTTP&lt;/span&gt;&amp;nbsp;primer&lt;/h2&gt;
&lt;p&gt;So, what happens during a form display and submission? To properly understand that you need to know what an &lt;span class="caps"&gt;HTTP&lt;/span&gt; request is. An &lt;span class="caps"&gt;HTTP&lt;/span&gt; request is the way
the browser &amp;#8220;requests&amp;#8221; a &lt;span class="caps"&gt;URL&lt;/span&gt; from a web server. This is thoroughly explained in the &lt;span class="caps"&gt;HTTP&lt;/span&gt; protocol however, for our purposes here it should suffice to say
that an &lt;span class="caps"&gt;HTTP&lt;/span&gt; request is a text message that is send from the browser/&lt;span class="caps"&gt;HTTP&lt;/span&gt; Client to the &lt;span class="caps"&gt;HTTP&lt;/span&gt;/web server. This message should have the following&amp;nbsp;format:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
METHOD PATH HTTP/VERSION
Header 1: Value 1
Header 2: Value 2

Request data
&lt;/pre&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;METHOD&lt;/span&gt;&lt;/tt&gt; can be one of various methods supported in the &lt;span class="caps"&gt;HTTP&lt;/span&gt; protocol like &lt;cite&gt;&lt;span class="caps"&gt;GET&lt;/span&gt;, &lt;span class="caps"&gt;POST&lt;/span&gt;, &lt;span class="caps"&gt;PUT&lt;/span&gt;, &lt;span class="caps"&gt;OPTIONS&lt;/span&gt;&lt;/cite&gt; etc however the most popular and the ones we&amp;#8217;ll talk about here
are &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;GET&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;POST&lt;/span&gt;&lt;/tt&gt;. The &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;PATH&lt;/span&gt;&lt;/tt&gt; is the actual url of the &amp;#8220;page&amp;#8221; you want to view without the server part. So if you are visiting &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;http://www.example.com/path/to/page.html&lt;/span&gt;&lt;/tt&gt;
the path parameter will have a value of &lt;tt class="docutils literal"&gt;/path/to/page.html&lt;/tt&gt;. The &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt;/&lt;span class="caps"&gt;VERSION&lt;/span&gt;&lt;/tt&gt; will contain the version of &lt;span class="caps"&gt;HTTP&lt;/span&gt; the client uses; usually it is something like
&lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt;/1.1&lt;/tt&gt;. Finally, after that first line there&amp;#8217;s a bunch of optional headers with various extra information the client wants to pass to the
server (for example what encoding it supports, what&amp;#8217;s the host it connects to&amp;nbsp;etc).&lt;/p&gt;
&lt;p&gt;Additionally, in case
of a &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;POST&lt;/span&gt;&lt;/tt&gt; request the headers are followed by a blank line which in turn is followed by a chunk of &amp;#8220;data&amp;#8221; that the client passes to the&amp;nbsp;server.&lt;/p&gt;
&lt;p&gt;The server will then response back with a text message similar to this (&lt;span class="caps"&gt;HTTP&lt;/span&gt;&amp;nbsp;Response):&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
HTTP/VERSION STATUS
Header 1: Value 1
Header 2: Value 2

Response data
&lt;/pre&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt;/&lt;span class="caps"&gt;VERSION&lt;/span&gt;&lt;/tt&gt; will also be something like &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt;/1.1&lt;/tt&gt; while the &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;STATUS&lt;/span&gt;&lt;/tt&gt; will be the status of the response. This status
is a 3-digit numeric value followed by a textual description of the
status. There are &lt;a class="reference external" href="https://httpstatuses.com/"&gt;various statuses that you can receive&lt;/a&gt;, however the statuses can be grouped by the number they start with like&amp;nbsp;this:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;1xx: Information; rarely&amp;nbsp;used&lt;/li&gt;
&lt;li&gt;2xx: Success; status 200 is the most common&amp;nbsp;one&lt;/li&gt;
&lt;li&gt;3xx: Redirection (browser must visit another page); either permanent or&amp;nbsp;temporary&lt;/li&gt;
&lt;li&gt;4xx: Client error; 404 is page not found (also access denied errors will be&amp;nbsp;40x)&lt;/li&gt;
&lt;li&gt;5xx: Server error; something fishy happened to the server while&amp;nbsp;responding&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this article we&amp;#8217;ll mainly talk about 2xx and 3xx: A &lt;tt class="docutils literal"&gt;200 &lt;span class="caps"&gt;OK&lt;/span&gt;&lt;/tt&gt; answer is the most common one, it means that the &lt;span class="caps"&gt;HTTP&lt;/span&gt; request was
completed successfully. A &lt;tt class="docutils literal"&gt;302 &lt;span class="caps"&gt;FOUND&lt;/span&gt;&lt;/tt&gt; request means that the browser should display a &amp;#8220;different&amp;#8221; path; that path will be provided in
a &lt;tt class="docutils literal"&gt;Location: path&lt;/tt&gt; header. When the browser receives a redirect it will do another &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;GET&lt;/span&gt;&lt;/tt&gt; request to retrieve the redirect to&amp;nbsp;page.&lt;/p&gt;
&lt;p&gt;Notice that the Headers and Data parts of the server reply may also be optional like for the client however they usually exist
(especially with a 200 response; without the data the client won&amp;#8217;t have anything to&amp;nbsp;display).&lt;/p&gt;
&lt;p&gt;So when a browser &amp;#8220;requests&amp;#8221; a page it will send an &lt;span class="caps"&gt;HTTP&lt;/span&gt; &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;GET&lt;/span&gt;&lt;/tt&gt; to the path. This happens all the time when we visit(click) links or entering
urls to our browser. However, when we submit an &lt;span class="caps"&gt;HTML&lt;/span&gt; form the situation is a little more&amp;nbsp;complex.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="form-methods"&gt;
&lt;h2&gt;Form&amp;nbsp;methods&lt;/h2&gt;
&lt;p&gt;An html form is a &lt;tt class="docutils literal"&gt;&amp;lt;form&amp;gt;&lt;/tt&gt; tag that contains a bunch of &lt;tt class="docutils literal"&gt;&amp;lt;input&amp;gt;&lt;/tt&gt; elements each one of which should have &lt;em&gt;at least&lt;/em&gt; a name property.
One of the inputs will usually be is a submit&amp;nbsp;button.&lt;/p&gt;
&lt;p&gt;Also, the form tag has two important&amp;nbsp;attributes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;action&lt;/tt&gt;: Defines the url where the post will be submitted to; it can be omitted to submit the form to the current&amp;nbsp;path&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;method&lt;/tt&gt;: Will be either &lt;span class="caps"&gt;GET&lt;/span&gt; or &lt;span class="caps"&gt;POST&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thus, a sample form is something&amp;nbsp;like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;GET&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;form.php&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;text&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;input1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;text&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;input2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;submit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So what are the differences between a &lt;tt class="docutils literal"&gt;&amp;lt;form &lt;span class="pre"&gt;method='&lt;span class="caps"&gt;GET&lt;/span&gt;'&amp;gt;&lt;/span&gt;&lt;/tt&gt; and a &lt;tt class="docutils literal"&gt;&amp;lt;form &lt;span class="pre"&gt;method='&lt;span class="caps"&gt;POST&lt;/span&gt;'&amp;gt;&lt;/span&gt;&lt;/tt&gt;?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Submitting an &lt;span class="caps"&gt;HTML&lt;/span&gt; form will translate to either an &lt;span class="caps"&gt;HTTP&lt;/span&gt; &lt;span class="caps"&gt;GET&lt;/span&gt; request or an &lt;span class="caps"&gt;HTTP&lt;/span&gt; &lt;span class="caps"&gt;POST&lt;/span&gt; request to the server depending on the method&amp;nbsp;attribute&lt;/li&gt;
&lt;li&gt;The data of a &lt;span class="caps"&gt;GET&lt;/span&gt; form will be encoded in the &lt;span class="caps"&gt;PATH&lt;/span&gt; of the &lt;span class="caps"&gt;HTTP&lt;/span&gt; request while the data of the &lt;span class="caps"&gt;POST&lt;/span&gt; form will be in the corresponding data part of the &lt;span class="caps"&gt;HTTP&lt;/span&gt;&amp;nbsp;Request&lt;/li&gt;
&lt;li&gt;A form that is submitted with &lt;span class="caps"&gt;GET&lt;/span&gt; should be idempotent i.e it should &lt;em&gt;not&lt;/em&gt; modify anything in the server; a form that is submitted with &lt;span class="caps"&gt;POST&lt;/span&gt; should modify something the&amp;nbsp;server&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, the form we defined previously (that has a &lt;span class="caps"&gt;GET&lt;/span&gt; method) will issue the following &lt;span class="caps"&gt;HTTP&lt;/span&gt; request (if we fill the values value1 and value2 to the&amp;nbsp;inputs):&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
GET /form.php?input1=value1&amp;amp;input2=value2 HTTP/1.1
&lt;/pre&gt;
&lt;p&gt;One the other hand if the form had a &lt;span class="caps"&gt;POST&lt;/span&gt; method the &lt;span class="caps"&gt;HTTP&lt;/span&gt; request would be like&amp;nbsp;this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
POST /form.php HTTP/1.1

input1=value1&amp;amp;input2=value2
&lt;/pre&gt;
&lt;p&gt;Notice that in the first case the data is in the &lt;span class="caps"&gt;PATH&lt;/span&gt; in the 1st line of the request while in the second case it is passed in the data section.
Also, in both cases the encoded data of the form is similar to &lt;tt class="docutils literal"&gt;input1=value1&amp;amp;input2=value2&lt;/tt&gt;: it is a list of &lt;tt class="docutils literal"&gt;key=value&lt;/tt&gt; pairs seperated
with &lt;tt class="docutils literal"&gt;&amp;amp;&lt;/tt&gt; where the &lt;tt class="docutils literal"&gt;name&lt;/tt&gt; attribute of each &lt;tt class="docutils literal"&gt;input&lt;/tt&gt; is used as the&amp;nbsp;key.&lt;/p&gt;
&lt;p&gt;Concerning the idempotency of the action; this is not something that the &lt;span class="caps"&gt;HTTP&lt;/span&gt; protocol can enforce but it relies on the developer to implement it.
When a form will not change anything to the server then it should be implemented as a method=&lt;span class="caps"&gt;GET&lt;/span&gt;. For example when you have a form with a search
box that just returns some results. On the other hand, when a form does change things for example when you create a new item in an application
then it should be implemented as a method=&lt;span class="caps"&gt;POST&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The browser has a different behavior after a &lt;span class="caps"&gt;GET&lt;/span&gt; vs after a &lt;span class="caps"&gt;POST&lt;/span&gt; because it expects that when you do a &lt;span class="caps"&gt;GET&lt;/span&gt; request then it won&amp;#8217;t matter if that
request is repeated many times. One the other hand, the browser will try to prevent you from submitting a request many times (because something is
changed in the server so the user must do it intentionally by for example pressing a button to submit the&amp;nbsp;form).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="proper-form-handling"&gt;
&lt;h2&gt;Proper form&amp;nbsp;handling&lt;/h2&gt;
&lt;p&gt;So, following the previous section we can now explain how to handle a form&amp;nbsp;properly:&lt;/p&gt;
&lt;p&gt;For a &lt;span class="caps"&gt;GET&lt;/span&gt; form we don&amp;#8217;t have to do anything fancy; we just retrieve the parameter values and we display the data these parameters correspond to
just like if we displayed any other&amp;nbsp;page.&lt;/p&gt;
&lt;p&gt;For a &lt;span class="caps"&gt;POST&lt;/span&gt; form however we need to be extra careful as to avoid re-duplication of data and have a good user experience: When a &lt;span class="caps"&gt;POST&lt;/span&gt; form is
submitted we need first to make sure that the submitted parameters are valid (for example there are no missing required fields). If the form is not
valid then we will return a status 200 &lt;span class="caps"&gt;OK&lt;/span&gt; explaining to the user what went wrong; we usually return the same page containing the initial form with
the fields that had errors&amp;nbsp;marked.&lt;/p&gt;
&lt;p&gt;On the other hand, if the form &lt;em&gt;was valid&lt;/em&gt; we need to do the actual action that the form corresponds to; for example insert something to the database.
After this is finished we should return a &lt;em&gt;redirect&lt;/em&gt; (302) to either a different or even the same page. This will result to the browsing doing a
&lt;span class="caps"&gt;GET&lt;/span&gt; request to the page we redirect to so there would be no danger of the user refreshing the page and resubmitting the form. We should &lt;em&gt;not&lt;/em&gt;
return a 200 &lt;span class="caps"&gt;OK&lt;/span&gt; after a &lt;span class="caps"&gt;POST&lt;/span&gt; request because then the user would be able to press F5 to duplicate the previous &lt;span class="caps"&gt;POST&lt;/span&gt; request (and re-insert the&amp;nbsp;data).&lt;/p&gt;
&lt;p&gt;One extra thing that we need to consider is how should we inform the user that his action was successful after the form submission and
redirection? As we said, we can&amp;#8217;t return a 200 &lt;span class="caps"&gt;OK&lt;/span&gt; message so we can&amp;#8217;t really &amp;#8220;create&amp;#8221; the response, we instead need to redirect to another page.
A common practice for this is to use a &amp;#8220;flash&amp;#8221; message; this is offered by many web frameworks through specific functions
but can be easily implemented. I&amp;#8217;ll explain how in the next&amp;nbsp;section.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="implementing-flash-messages"&gt;
&lt;h2&gt;Implementing flash&amp;nbsp;messages&lt;/h2&gt;
&lt;p&gt;Before talking about the flash message I&amp;#8217;d like to quickly explain what&amp;#8217;s a cookie and a browser session in &lt;span class="caps"&gt;HTTP&lt;/span&gt;, because
the flash message builds upon these&amp;nbsp;concepts:&lt;/p&gt;
&lt;p&gt;A cookie is a way for the server to tell the client to store some information to be re-used later. What happens is that
the server returns an &lt;span class="caps"&gt;HTTP&lt;/span&gt; header line similar to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Set-Cookie:&lt;/span&gt; &lt;span class="pre"&gt;cookie-name=cookie-value&lt;/span&gt;&lt;/tt&gt;. When the client receives that
header line it will pass an &lt;span class="caps"&gt;HTTP&lt;/span&gt; header line similar to &lt;tt class="docutils literal"&gt;Cookie:&amp;nbsp; &lt;span class="pre"&gt;cookie-name=cookie-value&lt;/span&gt;&lt;/tt&gt; to all future requests
so the server will know which value it had send to the client (there are various options for expiring cookies etc but they
are not important here). This may seem like a primitive solution however because &lt;span class="caps"&gt;HTTP&lt;/span&gt; is a stateless protocol
that&amp;#8217;s the only way for the server to store information about a client. If you disable cookies completely in a browser
then there won&amp;#8217;t be a way for the server to remember you, for example you won&amp;#8217;t be able to login&amp;nbsp;anywhere!&lt;/p&gt;
&lt;p&gt;A session is a better way to store info about the client that builds upon the cookies. What happens is that when a client visits
a site for the first time (so it has no cookies for that particular site) the server will send back a cookie named &lt;tt class="docutils literal"&gt;session_id&lt;/tt&gt; (or something like
that) containing a very big random number. The server will save this session id number in a persistent storage (for example in a
database or a text file) and will correlate that number with information for that particular client. When the client sends back that
&lt;tt class="docutils literal"&gt;session_id&lt;/tt&gt; cookie the server will fetch the correlated info for that particular client from the persistent storage (and may
update them etc). This way the server can store whatever info it wants about a particular client. The server usually keeps a
a dictionary (map) of key-values for each&amp;nbsp;session.&lt;/p&gt;
&lt;p&gt;Now, a flash message is some information (message) that should be displayed to the user &lt;em&gt;once&lt;/em&gt;. For example a message like
&amp;#8220;Your form has been&amp;nbsp;submitted!&amp;#8221;.&lt;/p&gt;
&lt;p&gt;A simple way to implement this is to add a &lt;tt class="docutils literal"&gt;message&lt;/tt&gt;
attribute to the session when you want to display the flash message. The next page that is displayed (irrelevantly if there&amp;#8217;s a redirect involved)
will check to see if there&amp;#8217;s a &lt;tt class="docutils literal"&gt;message&lt;/tt&gt; attribute to the session; if yes it will display the actual message and remove the &lt;tt class="docutils literal"&gt;message&lt;/tt&gt; attribute
from the session (so it won&amp;#8217;t be displayed&amp;nbsp;again).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="implementing-the-form-submission"&gt;
&lt;h2&gt;Implementing the form&amp;nbsp;submission&lt;/h2&gt;
&lt;p&gt;Following the above guidelines I&amp;#8217;ll present here a typical, production-ready form submission for &lt;span class="caps"&gt;PHP&lt;/span&gt;. Some choices I&amp;#8217;ve&amp;nbsp;made:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I am going to implement a &lt;span class="caps"&gt;POST&lt;/span&gt; form since a &lt;span class="caps"&gt;GET&lt;/span&gt; form doesn&amp;#8217;t need any special&amp;nbsp;handling&lt;/li&gt;
&lt;li&gt;The form handler will be the same &lt;span class="caps"&gt;PHP&lt;/span&gt; page as the one displaying the form. This is a usual thing to do, you check the &lt;span class="caps"&gt;HTTP&lt;/span&gt; method and either display the form as-is (if it is &lt;span class="caps"&gt;GET&lt;/span&gt;) or handle the submission (if it is &lt;span class="caps"&gt;POST&lt;/span&gt;)&lt;/li&gt;
&lt;li&gt;When the form is submitted successfully redirect to the same page and display a flash&amp;nbsp;message&lt;/li&gt;
&lt;li&gt;Check for valid input and display the error&amp;nbsp;message&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So without further ado here&amp;#8217;s the complete php code that will submit your form; store it in a file named &lt;tt class="docutils literal"&gt;test.php&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;!DOCTYPE HTML&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;  &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;  &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;  &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;ie=edge&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;  &amp;lt;title&amp;gt;TEST FORM&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;  &amp;lt;link href=&amp;quot;https://unpkg.com/tailwindcss@^1.0/dist/tailwind.min.css&amp;quot; rel=&amp;quot;stylesheet&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;&amp;lt;body class=&amp;quot;bg-gray-100&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;  &amp;lt;div class=&amp;quot;px-8 py-8 w-1/2 m-auto&amp;quot;&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class="nb"&gt;session_start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_SESSION&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;div class=&amp;quot;rounded bg-green-300 px-2 py-2&amp;quot;&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$_SESSION&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;/div&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nb"&gt;unset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_SESSION&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nv"&gt;$nameErr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$wsErr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$comment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$formValid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_SERVER&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;REQUEST_METHOD&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$nameErr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Name is required&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$formValid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;comment&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$comment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$comment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;comment&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$formValid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nv"&gt;$_SESSION&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Success! You have submitted the values: &amp;lt;b&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; / &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$comment&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;/b&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nb"&gt;header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Location: ./test.php&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="k"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nv"&gt;$wsErr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Error while trying to submit the form!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;

&lt;span class="x"&gt;    &amp;lt;h1 class=&amp;quot;text-4xl font-bold text-indigo-500&amp;quot;&amp;gt;Test a PHP form!&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;    &amp;lt;form class=&amp;#39;border border-blue-800 rounded p-2&amp;#39; method=&amp;quot;POST&amp;quot;&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;      &lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$wsErr&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;div class=&amp;#39;text-red-600 py-3&amp;#39;&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$wsErr&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;/div&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;

&lt;span class="x"&gt;      &amp;lt;div class=&amp;quot;p-1&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;lt;label for=&amp;quot;name&amp;quot;&amp;gt;Name:&amp;lt;/label&amp;gt; &amp;lt;input class=&amp;quot;border border-blue-800 rounded&amp;quot; id=&amp;quot;name&amp;quot; type=&amp;quot;text&amp;quot; name=&amp;quot;name&amp;quot; value=&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;lt;span class=&amp;quot;text-red-600&amp;quot;&amp;gt;* &lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$nameErr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;      &amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;      &amp;lt;div class=&amp;quot;p-1&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;lt;label for=&amp;quot;comment&amp;quot;&amp;gt;Comment:&amp;lt;/label&amp;gt; &amp;lt;textarea class=&amp;quot;border border-blue-800 rounded&amp;quot; id=&amp;quot;comment&amp;quot; name=&amp;quot;comment&amp;quot; rows=&amp;quot;5&amp;quot; cols=&amp;quot;40&amp;quot;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$comment&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;/textarea&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;      &amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;      &amp;lt;input class=&amp;quot;rounded px-2 my-4 py-2 bg-blue-800 text-gray-100&amp;quot; type=&amp;quot;submit&amp;quot; name=&amp;quot;submit&amp;quot; value=&amp;quot;Save&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;  &amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So how is that working? As we can see there&amp;#8217;s the php code first and the html is following (with some sprinkles of php). The &lt;span class="caps"&gt;HTML&lt;/span&gt; code is rather simple: It will
display a &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;POST&lt;/span&gt;&lt;/tt&gt; form with two inputs named &lt;tt class="docutils literal"&gt;name&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;comment&lt;/tt&gt;. Notice that we pass the &lt;tt class="docutils literal"&gt;$name&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;$comment&lt;/tt&gt; php variables as their values.
It also has a submit button and will display the &lt;tt class="docutils literal"&gt;$wsErr&lt;/tt&gt; variable if it is not null (which means that there was an error while submitting the data). The &lt;span class="caps"&gt;PHP&lt;/span&gt;
code now first starts the session (i.e it passes the &lt;tt class="docutils literal"&gt;session_id&lt;/tt&gt; cookie to the client if such a cookie does not exist) checks to see if there&amp;#8217;s a
&lt;tt class="docutils literal"&gt;message&lt;/tt&gt; attribute to the session. If such a message exists it will display it in a rounded green panel and remove that from the session (so it won&amp;#8217;t be displayed
again next&amp;nbsp;time):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;session_start();&lt;/span&gt;
&lt;span class="x"&gt;if ($_SESSION[&amp;#39;message&amp;#39;] ?? &amp;#39;&amp;#39;) {&lt;/span&gt;
&lt;span class="x"&gt;  echo &amp;#39;&amp;lt;div class=&amp;quot;rounded bg-green-300 px-2 py-2&amp;quot;&amp;gt;&amp;#39;.$_SESSION[&amp;#39;message&amp;#39;].&amp;#39;&amp;lt;/div&amp;gt;&amp;#39;;&lt;/span&gt;
&lt;span class="x"&gt;  unset($_SESSION[&amp;#39;message&amp;#39;]);&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After that there are some variable initializations and we check if the &lt;span class="caps"&gt;HTTP&lt;/span&gt; request is &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;POST&lt;/span&gt;&lt;/tt&gt; (if the request is &lt;span class="caps"&gt;GET&lt;/span&gt; we&amp;#8217;ll just disply the &lt;span class="caps"&gt;HTML&lt;/span&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;if ($_SERVER[&amp;quot;REQUEST_METHOD&amp;quot;] == &amp;quot;POST&amp;quot;) {&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For each of the inputs we check if they are empty or not and assign their values to the corresponding php variable. If the name is empty then we&amp;#8217;ll
set &lt;tt class="docutils literal"&gt;$formValid = false;&lt;/tt&gt; and add an error message since this field is required. Then, if &lt;tt class="docutils literal"&gt;$formValid&lt;/tt&gt; is not false we can do the actual action
(for example write to the database). I&amp;#8217;ve simulated that using a coin-toss with rand (so there&amp;#8217;s a 50% possibility that the action will fail). If
the action &amp;#8220;failed&amp;#8221; then nothing happened in the database so we should return the same page with the &lt;tt class="docutils literal"&gt;wsErr&lt;/tt&gt; variable containing the&amp;nbsp;error.&lt;/p&gt;
&lt;p&gt;However if the action is successful that means that the data has been inserted to the database so we&amp;#8217;ll need to set the flash message and do
the redirect (the name of the page containing the form is &lt;tt class="docutils literal"&gt;/test.php&lt;/tt&gt; so we&amp;#8217;ll redirect to&amp;nbsp;it):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$_SESSION[&amp;#39;message&amp;#39;] = &amp;quot;Success! You have submitted the values: &amp;lt;b&amp;gt;&amp;quot; . $name . &amp;quot; / &amp;quot; . $comment . &amp;quot;&amp;lt;/b&amp;gt;&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;header(&amp;#39;Location: ./test.php&amp;#39;);&lt;/span&gt;
&lt;span class="x"&gt;exit();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The two commands above (&lt;tt class="docutils literal"&gt;header&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;exit&lt;/tt&gt;) will do the actual redirect in php. Since the session contains the &lt;tt class="docutils literal"&gt;message&lt;/tt&gt; it will
be displayed after the redirect has&amp;nbsp;finished!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So following the above tutorial, here&amp;#8217;s what you should absolutely do to submit an &lt;span class="caps"&gt;HTML&lt;/span&gt;&amp;nbsp;form:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Use &lt;span class="caps"&gt;HTTP&lt;/span&gt; &lt;span class="caps"&gt;POST&lt;/span&gt; if the form is going to change data on the server; use &lt;span class="caps"&gt;HTTP&lt;/span&gt; &lt;span class="caps"&gt;GET&lt;/span&gt; otherwise (mainly for search/filter&amp;nbsp;forms)&lt;/li&gt;
&lt;li&gt;When using &lt;span class="caps"&gt;POST&lt;/span&gt;: Redirect when the form is valid and the action on the server has finished successfully; never return a 200 &lt;span class="caps"&gt;OK&lt;/span&gt; status when you&amp;#8217;ve changed things in the server&amp;nbsp;(database)&lt;/li&gt;
&lt;li&gt;Use flash messages to pass information to the user after a&amp;nbsp;redirect&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="html"></category><category term="html"></category><category term="form"></category><category term="php"></category></entry><entry><title>Declarative Ecto queryÂ filters</title><link href="https://www.spapas.net/2019/07/25/declarative-ecto-query-filters/" rel="alternate"></link><published>2019-07-25T14:20:00+03:00</published><updated>2019-07-25T14:20:00+03:00</updated><author><name>Serafeim Papastefanos</name></author><id>tag:www.spapas.net,2019-07-25:/2019/07/25/declarative-ecto-query-filters/</id><summary type="html">&lt;p class="first last"&gt;Being able to declare your Ecto query filter even on fields spanning&amp;nbsp;joins&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Continuing my Elixir &lt;a class="reference external" href="https://spapas.github.io/2019/06/04/phoenix-form-select2-ajax/"&gt;journey&lt;/a&gt; I&amp;#8217;d like to discuss here a method to implement one of my
&lt;a class="reference external" href="https://spapas.github.io/2017/10/11/essential-django-packages/"&gt;favorite Django features&lt;/a&gt;: Declarative query filters. This functionality is not a core Django
feature but it is offered
through the excellent &lt;a class="reference external" href="https://github.com/carltongibson/django-filter/:"&gt;django-filter&lt;/a&gt; package: Using this, you can create a &lt;tt class="docutils literal"&gt;Filter&lt;/tt&gt; class which defines
which fields are to be used for filtering the queryset and how each field will be queried (i.e using
things like exact, like, year of date&amp;nbsp;etc).&lt;/p&gt;
&lt;p&gt;This is a functionality I am greatly missing in Elixir/phoenix
so I&amp;#8217;ve tried implementing it on my own. Of course, django-filter has various other capabilities that
result from the implicit generation of things that Django offers like automatically creating the html
for the declared fields, automatically declare the fields based on their types etc but such things are
not supported by phoenix in any case so I won&amp;#8217;t be trying in them&amp;nbsp;here.&lt;/p&gt;
&lt;p&gt;During my research I&amp;#8217;ve seen a bunch of blog posts or packages about this thing however they didn&amp;#8217;t
properly support joins (i.e you could only filter on fields on a specific schema) or needed too much
work to filter on joins (i.e define different filters for each part of the join). In the solution
I&amp;#8217;ll present here you&amp;#8217;ll just define a filter for the specific query you need to filter no matter how
many joins it has (just like in&amp;nbsp;django-filters).&lt;/p&gt;
&lt;div class="section" id="what-will-it-do"&gt;
&lt;h2&gt;What will it&amp;nbsp;do&lt;/h2&gt;
&lt;p&gt;The solution is more or less a self contained Elixir module named &lt;tt class="docutils literal"&gt;QueryFilterEx&lt;/tt&gt; that can be used
to declaratively filter your queries.
To use that you&amp;#8217;ll need to declare your filters using
a simple array of maps. The filters should then be added in your form using a different input
for each filter; then your queryset will be filtered with all the values you&amp;#8217;ve added to the
inputs using &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;AND&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The module has a very simple &lt;span class="caps"&gt;API&lt;/span&gt; consisting of three&amp;nbsp;functions:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;get_changeset_from_params(params, filters)&lt;/tt&gt;: Pass it the &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;GET&lt;/span&gt;&lt;/tt&gt; request parameters you got from your form and the declared filters array to return you a proper changeset (which you can then use to build your form in your&amp;nbsp;html)&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;make_filter_changeset(filters, params)&lt;/tt&gt;: This function actually generates the changeset using the filters and a &lt;tt class="docutils literal"&gt;Map&lt;/tt&gt; of &lt;tt class="docutils literal"&gt;filter_name: value&lt;/tt&gt; pairs (it is actually used by &lt;tt class="docutils literal"&gt;get_changeset_from_params&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;filter(query, changeset, filters)&lt;/tt&gt;: Filter the &lt;tt class="docutils literal"&gt;query&lt;/tt&gt; using the previously created &lt;tt class="docutils literal"&gt;changeset&lt;/tt&gt; and the declared filters&amp;nbsp;array&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can find a sample of the technique presented in this article in my &lt;span class="caps"&gt;PHXCRD&lt;/span&gt; repository:
&lt;a class="reference external" href="https://github.com/spapas/phxcrd"&gt;https://github.com/spapas/phxcrd&lt;/a&gt;  for example in the &lt;tt class="docutils literal"&gt;user_controller&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;authority_controller&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="preparing-the-query"&gt;
&lt;h2&gt;Preparing the&amp;nbsp;query&lt;/h2&gt;
&lt;p&gt;In order to use the &lt;tt class="docutils literal"&gt;QueryFilterEx&lt;/tt&gt; module you&amp;#8217;ll need to properly &amp;#8220;prepare&amp;#8221; your Ecto query. By preparing
I don&amp;#8217;t mean a big deal just the fact that you&amp;#8217;ll need to &lt;em&gt;name all your relations&lt;/em&gt;  (or at least name all
the relations you&amp;#8217;re going to use for filtering). This is very simple to do, for example for the following&amp;nbsp;query:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nc"&gt;Authority&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;join&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ak&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nc"&gt;AuthorityKind&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authority_kind_id&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="ss"&gt;preload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;authority_kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ak&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;you can name the relations by adding two &lt;tt class="docutils literal"&gt;as:&lt;/tt&gt; atoms like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nc"&gt;Authority&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;as&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:authority&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;join&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ak&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nc"&gt;AuthorityKind&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;as&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:authority_kind&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authority_kind_id&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="ss"&gt;preload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;authority_kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ak&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So after each &lt;cite&gt;join:&lt;/cite&gt; you&amp;#8217;ll add a name for your joined relation (and also add a name for your initial
relation). Please notice that you can use any name you want for these (not related to the schema&amp;nbsp;names).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="declaring-the-filters"&gt;
&lt;h2&gt;Declaring the&amp;nbsp;filters&lt;/h2&gt;
&lt;p&gt;To declare the filters you&amp;#8217;ll just add an array of simple Elixir maps. Each map must have the following&amp;nbsp;fields:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;:name&lt;/tt&gt; This is the name of the specific filter; it is mainly used in conjunction with the queryset and the form fields to set initial values&amp;nbsp;etc&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;:type&lt;/tt&gt; This is the type of the specific filter; it should be a proper Ecto type like &lt;tt class="docutils literal"&gt;:string&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;:date&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;:integer&lt;/tt&gt; etc. This is needed to properly cast the values and catch&amp;nbsp;errors&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;:binding&lt;/tt&gt; This is the name of the relation this filter concerns which you defined in your query using &lt;tt class="docutils literal"&gt;:as&lt;/tt&gt; (discussed in previous&amp;nbsp;section)&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;:field_name&lt;/tt&gt; This is the actual name of the field you want to filter&amp;nbsp;on&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;:method&lt;/tt&gt; How to filter on this field; I&amp;#8217;ve defined a couple of methods I needed but you can implement anything you&amp;nbsp;want&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The methods I&amp;#8217;ve implemented are the&amp;nbsp;following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;:eq&lt;/tt&gt; Equality&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;:ilike&lt;/tt&gt; Field value starts with the input - ignore&amp;nbsp;case&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;:icontains&lt;/tt&gt; Field value contains the input - ignore&amp;nbsp;case&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;:year&lt;/tt&gt; Field is a date or datetime an its year is the same as the&amp;nbsp;value&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;:date&lt;/tt&gt; Field is a datetime and its date part is equal to the&amp;nbsp;value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Anything else will just be compared using &lt;tt class="docutils literal"&gt;=&lt;/tt&gt; (same as &lt;tt class="docutils literal"&gt;:eq&lt;/tt&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="integrating-it-with-a-controller"&gt;
&lt;h2&gt;Integrating it with a&amp;nbsp;controller&lt;/h2&gt;
&lt;p&gt;As an example let&amp;#8217;s see how &lt;tt class="docutils literal"&gt;QueryFilterEx&lt;/tt&gt; is integrated it with the phxcrd user_controller.
The query I&amp;#8217;d like to filter on is the following (see that everything I&amp;#8217;ll need is named using &lt;tt class="docutils literal"&gt;:as&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;as&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;left_join&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nc"&gt;Authority&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;as&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:authority&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authority_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;left_join&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nc"&gt;UserPermission&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;left_join&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nc"&gt;Permission&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;as&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:permission&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;permission_id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;preload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;authority&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;permissions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To declare the filters I like to create a module attribute ending with &lt;tt class="docutils literal"&gt;filters&lt;/tt&gt;, something like
&lt;tt class="docutils literal"&gt;&amp;#64;user_filters&lt;/tt&gt; for example. Here&amp;#8217;s the filters I&amp;#8217;m going to use for&amp;nbsp;user_controller:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;@user_filters&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="ss"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;field_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:ilike&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="ss"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:authority_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:authority&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;field_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:icontains&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="ss"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:permission_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:permission&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;field_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:ilike&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="ss"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:last_login_date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;field_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:last_login&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:date&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So it will check if the &lt;tt class="docutils literal"&gt;user.username&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;permission.name&lt;/tt&gt; start with the passed value,
&lt;tt class="docutils literal"&gt;authority.name&lt;/tt&gt; contains the passed value and if the &lt;tt class="docutils literal"&gt;user.login_date&lt;/tt&gt; (which is a datetime)
is the same as the passed date&amp;nbsp;value.&lt;/p&gt;
&lt;p&gt;Finally, here&amp;#8217;s the full code of the index&amp;nbsp;controller:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;changeset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;QueryFilterEx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_changeset_from_params&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;@user_filters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;as&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;left_join&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nc"&gt;Authority&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;as&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:authority&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authority_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

      &lt;span class="ss"&gt;left_join&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nc"&gt;UserPermission&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;left_join&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nc"&gt;Permission&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;as&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:permission&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;permission_id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;preload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;authority&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;permissions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;QueryFilterEx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;@user_filters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;index.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is very simple, it just uses the &lt;tt class="docutils literal"&gt;get_changeset_from_params&lt;/tt&gt; method I discussed before to
generate the changeset and then uses it to filter the query. Also please notice that it passes
the changeset to the template to be properly rendered in the filter&amp;nbsp;form.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-template"&gt;
&lt;h2&gt;The&amp;nbsp;template&lt;/h2&gt;
&lt;p&gt;The template for the user index action is the&amp;nbsp;following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= form_for @changeset, AdminRoutes.user_path(@conn, :index), [method: :get, class: &amp;quot;filter-form&amp;quot;, as: :filter],  fn f -&amp;gt; %&amp;gt;
  &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= label f, :username, gettext &amp;quot;Username&amp;quot; %&amp;gt;
  &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= text_input f, :username  %&amp;gt;

  &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= label f, :authority_name, gettext &amp;quot;Authority name&amp;quot; %&amp;gt;
  &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= text_input f, :authority_name  %&amp;gt;

  &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= label f, :permission_name, gettext &amp;quot;Permission name&amp;quot; %&amp;gt;
  &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= text_input f, :permission_name  %&amp;gt;

  &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= label f, :last_login_date, gettext &amp;quot;Last login date&amp;quot; %&amp;gt;
  &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= text_input f, :last_login_date  %&amp;gt;
  &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= error_tag f, :last_login_date %&amp;gt;

  &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= submit gettext(&amp;quot;Filter&amp;quot;), class: &amp;quot;ml-5&amp;quot; %&amp;gt;
  &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= link gettext(&amp;quot;Reset&amp;quot;), to: AdminRoutes.user_path(@conn, :index), class: &amp;quot;button button-outline ml-2&amp;quot; %&amp;gt;
&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% end %&amp;gt;
&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= for user &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;-&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;users&lt;/span&gt; &lt;span class="na"&gt;do&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- display the user info --&amp;gt;&lt;/span&gt;
&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% end %&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that it gets the &lt;tt class="docutils literal"&gt;&amp;#64;changeset&lt;/tt&gt; and uses it to properly fill the initial values and display
error messages. For this case I&amp;#8217;ve only added an error_tag for the &lt;tt class="docutils literal"&gt;:last_login_date&lt;/tt&gt; field,
the others since are strings do not really need it since they will accept all&amp;nbsp;values.&lt;/p&gt;
&lt;p&gt;Also, the form method  form must be &lt;tt class="docutils literal"&gt;:get&lt;/tt&gt; since we only filter (not change anything) and I&amp;#8217;ve passed
the &lt;tt class="docutils literal"&gt;as: :filter&lt;/tt&gt; option to the &lt;tt class="docutils literal"&gt;form_for&lt;/tt&gt; to collect the parameters under the &lt;tt class="docutils literal"&gt;filter&lt;/tt&gt; server side
parameter (this can be anything you want and can be optionally be
passed to &lt;tt class="docutils literal"&gt;QueryFilterEx.get_changeset_from_params&lt;/tt&gt; to know which parameter the filters are collected&amp;nbsp;on).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-does-this-work"&gt;
&lt;h2&gt;How does this&amp;nbsp;work?&lt;/h2&gt;
&lt;p&gt;In this section I&amp;#8217;ll try to explain exactly how the &lt;tt class="docutils literal"&gt;QueryFilterEx&lt;/tt&gt; module works. Before continuing
I want to thank the people at the &lt;a class="reference external" href="https://elixirforum.com/"&gt;Elixir forum&lt;/a&gt; and #elixir-lang Freenode &lt;span class="caps"&gt;IRC&lt;/span&gt; chat
that helped me with understanding how to be able to &lt;a class="reference external" href="https://elixirforum.com/t/create-dynamic-bindings-for-where-clause/23797/7"&gt;create dynamic bindings&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So I&amp;#8217;ll split this explanation in two parts: Explain &lt;tt class="docutils literal"&gt;QueryFilterEx.get_changeset_from_params&lt;/tt&gt;
and &lt;tt class="docutils literal"&gt;make_filter_changeset&lt;/tt&gt; (easy) and
then explain &lt;tt class="docutils literal"&gt;QueryFilterEx.filter&lt;/tt&gt; (more&amp;nbsp;difficult).&lt;/p&gt;
&lt;div class="section" id="queryfilterex-get-changeset-from-params-and-make-filter-changeset"&gt;
&lt;h3&gt;&lt;tt class="docutils literal"&gt;QueryFilterEx.get_changeset_from_params&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;make_filter_changeset&lt;/tt&gt;&lt;/h3&gt;
&lt;p&gt;This function generates a changeset using the &lt;span class="caps"&gt;GET&lt;/span&gt; request parameters and the list of declared filters. The
create changeset is a &lt;a class="reference external" href="https://hexdocs.pm/ecto/Ecto.Changeset.html#module-schemaless-changesets"&gt;schemaless one&lt;/a&gt; since it may contains fields of various schemas (or fields that
are not even exist on a schema). To generate it it uses the &lt;a class="reference external" href="https://hexdocs.pm/ecto/Ecto.Changeset.html#cast/4"&gt;cast/4&lt;/a&gt; function passing it a &lt;tt class="docutils literal"&gt;{data, types}&lt;/tt&gt;
first parameter to generate the schemaless changeset. It has two public methods: &lt;tt class="docutils literal"&gt;get_changeset_from_params&lt;/tt&gt;
and &lt;tt class="docutils literal"&gt;make_filter_changeset&lt;/tt&gt;. The &lt;tt class="docutils literal"&gt;get_changeset_from_params&lt;/tt&gt; is the one we&amp;#8217;ve used to integrate
with the controller and is used to retrieve the filter parameters from the request
parameters based on the collect parameter of the form we mentioned before (the &lt;tt class="docutils literal"&gt;as: :filter&lt;/tt&gt;). If such
parameters are found they will be passed to &lt;tt class="docutils literal"&gt;make_filter_changeset&lt;/tt&gt; (or else it will pass an empty
struct). Notice that the &lt;tt class="docutils literal"&gt;filter_name&lt;/tt&gt; by default is &lt;tt class="docutils literal"&gt;&amp;quot;filter&amp;quot;&lt;/tt&gt; but you can change it to anything
you&amp;nbsp;want.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;get_changeset_from_params&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filter_name&lt;/span&gt; &lt;span class="p"&gt;\\&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;filter&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;filter_name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;filter_params&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="n"&gt;filters&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;make_filter_changeset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filter_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="bp"&gt;_&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="n"&gt;filters&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;make_filter_changeset&lt;/span&gt;&lt;span class="p"&gt;(%{})&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;make_filter_changeset&lt;/tt&gt; is the function that actually creates the schemaless changeset. To do that
it uses two private functions that operate on the passed filters array: &lt;tt class="docutils literal"&gt;make_filter_keys&lt;/tt&gt;
to extract the &lt;tt class="docutils literal"&gt;:name&lt;/tt&gt; field of each key filter and the &lt;tt class="docutils literal"&gt;make_filter_types&lt;/tt&gt; to generate a
&lt;tt class="docutils literal"&gt;Map&lt;/tt&gt; of &lt;tt class="docutils literal"&gt;%{name: :type}&lt;/tt&gt; as needed by the &lt;tt class="docutils literal"&gt;types&lt;/tt&gt; of the &lt;tt class="docutils literal"&gt;{data, types}&lt;/tt&gt; tuple passed
to &lt;tt class="docutils literal"&gt;cast&lt;/tt&gt; (the &lt;tt class="docutils literal"&gt;data&lt;/tt&gt; is just an empty &lt;tt class="docutils literal"&gt;Map&lt;/tt&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;defp&lt;/span&gt; &lt;span class="n"&gt;make_filter_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;filters&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="ni"&gt;&amp;amp;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="kd"&gt;defp&lt;/span&gt; &lt;span class="n"&gt;make_filter_types&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;filters&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ni"&gt;&amp;amp;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;make_filter_changeset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;%{}&lt;/span&gt;
  &lt;span class="n"&gt;types&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filters&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;make_filter_types&lt;/span&gt;

  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Ecto.Changeset&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filters&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;make_filter_keys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(%{&lt;/span&gt;&lt;span class="ss"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:insert&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One interesting thing here is the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Map.merge(%{action:&lt;/span&gt; :insert})&lt;/tt&gt; that is piped to the
generated changeset. This is needed to actually display the validation errors, if there&amp;#8217;s
no action to the changeset (and there won&amp;#8217;t be since we aren&amp;#8217;t going do any updates to the database
with this changeset) then the casting errors won&amp;#8217;t be&amp;nbsp;displayed.&lt;/p&gt;
&lt;p&gt;Please notice that although I use the &lt;tt class="docutils literal"&gt;get_changeset_from_params&lt;/tt&gt; in my controller the important
function here is the &lt;tt class="docutils literal"&gt;make_filter_changeset&lt;/tt&gt;. The &lt;tt class="docutils literal"&gt;get_changeset_from_params&lt;/tt&gt; is mainly used to
retrieve the filter-related &lt;span class="caps"&gt;GET&lt;/span&gt; query parameter; however to use &lt;tt class="docutils literal"&gt;QueryFilterEx&lt;/tt&gt; you can just
create (however you want) a &lt;tt class="docutils literal"&gt;Map&lt;/tt&gt; of &lt;tt class="docutils literal"&gt;filter_name: value&lt;/tt&gt; pairs  and pass it to
&lt;tt class="docutils literal"&gt;make_filter_changeset&lt;/tt&gt; to get the&amp;nbsp;changeset.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="queryfilterex-filter"&gt;
&lt;h3&gt;&lt;tt class="docutils literal"&gt;QueryFilterEx.filter&lt;/tt&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;filter&lt;/tt&gt; method gets three parameters. The &lt;tt class="docutils literal"&gt;query&lt;/tt&gt;, the &lt;tt class="docutils literal"&gt;changeset&lt;/tt&gt; (that was created with
&lt;tt class="docutils literal"&gt;make_filter_changeset&lt;/tt&gt;) and the declared &lt;tt class="docutils literal"&gt;filters&lt;/tt&gt;. This function will then check all declared &lt;tt class="docutils literal"&gt;filters&lt;/tt&gt;
one by one and see if the &lt;tt class="docutils literal"&gt;changeset&lt;/tt&gt; contains a change for this filter (i.e if the field has a value).
If yes it will append a &lt;a class="reference external" href="https://hexdocs.pm/ecto/Ecto.Query.html#where/3"&gt;where/3&lt;/a&gt; to the query based on the passed value of the &lt;tt class="docutils literal"&gt;changeset&lt;/tt&gt; and the
declared filter &lt;tt class="docutils literal"&gt;:method&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;To do that it just uses &lt;tt class="docutils literal"&gt;Enum.reduce&lt;/tt&gt; starting with the initial query as an accumulator and
reducing on all the declared &lt;tt class="docutils literal"&gt;filters&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;changes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetch!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:changes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;filters&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;creat_where_clauses_reducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="kd"&gt;defp&lt;/span&gt; &lt;span class="n"&gt;creat_where_clauses_reducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="ss"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;field_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;field_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;creat_where_clause&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;field_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="bp"&gt;_&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;acc&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that the &lt;tt class="docutils literal"&gt;creat_where_clauses_reducer&lt;/tt&gt; function returns a function (the reducer) that
&lt;tt class="docutils literal"&gt;reduce&lt;/tt&gt; will use. This function checks to see if the current changes of the &lt;tt class="docutils literal"&gt;changeset&lt;/tt&gt; contain
the &lt;tt class="docutils literal"&gt;filter_name:&lt;/tt&gt;. If yes it will pass the following values to the &lt;tt class="docutils literal"&gt;creat_where_clause&lt;/tt&gt; function:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The accumulated query (&lt;tt class="docutils literal"&gt;acc&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;field_name:&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;:binding&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;:method&lt;/tt&gt; values of the current&amp;nbsp;filter&lt;/li&gt;
&lt;li&gt;The value of the changes of the &lt;tt class="docutils literal"&gt;changeset&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If the current &lt;tt class="docutils literal"&gt;filter_name&lt;/tt&gt; is not contained in the changes then it just returns the accumulated query as it&amp;nbsp;is.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s now take a look at the &lt;tt class="docutils literal"&gt;creat_where_clause&lt;/tt&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;defp&lt;/span&gt; &lt;span class="n"&gt;creat_where_clause&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="ss"&gt;:eq&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt;
      &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;field_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="ss"&gt;:ilike&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt;
      &lt;span class="n"&gt;ilike&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;field_name&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;%&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="ss"&gt;:icontains&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt;
      &lt;span class="n"&gt;ilike&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;field_name&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;%&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="ss"&gt;:year&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt;  &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt;
      &lt;span class="n"&gt;fragment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;extract (year from ?) = ?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;field_name&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="ss"&gt;:date&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt;  &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt;
      &lt;span class="n"&gt;fragment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;? &amp;gt;= cast(? as date) and ? &amp;lt; (cast(? as date) + &amp;#39;1 day&amp;#39;::interval&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;field_name&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;field_name&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;_&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt;
      &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;field_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This function is just a simple &lt;tt class="docutils literal"&gt;case&lt;/tt&gt; that pipes the accumulated query to a different &lt;tt class="docutils literal"&gt;where&lt;/tt&gt; clause
depending on the &lt;tt class="docutils literal"&gt;method:&lt;/tt&gt;. Let&amp;#8217;s take a closer look at what happens when &lt;tt class="docutils literal"&gt;:method == :eq&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt;
  &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;field_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This may seem a little confusing so let&amp;#8217;s take a look at a simple &lt;tt class="docutils literal"&gt;where&lt;/tt&gt; first:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;root&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nothing fancy here, now let&amp;#8217;s add a named&amp;nbsp;query:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;as&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="ss"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;root&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that now we can declare that &lt;tt class="docutils literal"&gt;u&lt;/tt&gt; is an alias for the &lt;tt class="docutils literal"&gt;users&lt;/tt&gt; named binding. What if
we used the tuples syntax for the &lt;tt class="docutils literal"&gt;user: u&lt;/tt&gt; instead of the keyword&amp;nbsp;one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;as&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;([{&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;root&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yes this still works. What if we wanted to use a variable for the binding name in the&amp;nbsp;where?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;binding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:user&lt;/span&gt;
&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;as&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;([{&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;root&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I think it starts to make sense now, let&amp;#8217;s finally use a variable for the field name&amp;nbsp;also:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;binding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:user&lt;/span&gt;
&lt;span class="n"&gt;field_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;
&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;as&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;([{&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;field_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;root&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So this is exactly how this&amp;nbsp;works!&lt;/p&gt;
&lt;p&gt;Beyond the &lt;tt class="docutils literal"&gt;:eq&lt;/tt&gt; I&amp;#8217;ve got the definitions for the other methods I described there, the most
complex one is probably the &lt;tt class="docutils literal"&gt;:date&lt;/tt&gt; which is something&amp;nbsp;like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt;
  &lt;span class="n"&gt;fragment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;? &amp;gt;= cast(? as date) and ? &amp;lt; (cast(? as date) + &amp;#39;1 day&amp;#39;::interval&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;field_name&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;field_name&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What this does is that it generates the following &lt;span class="caps"&gt;SQL&lt;/span&gt;&amp;nbsp;fragment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;field_name&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="k"&gt;cast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;field_name&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;cast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1 day&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can add your own methods by adding more clauses to the case of the &lt;tt class="docutils literal"&gt;creat_where_clause&lt;/tt&gt; function
and following a similar&amp;nbsp;pattern.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;By using the &lt;tt class="docutils literal"&gt;QueryFilterEx&lt;/tt&gt; module presented here you can very quickly declare the fields you want
to filter on and the method you want to use for each field no matter if these fields are in the same
schema or are accessed through joins. You can easily extend the functionality of the module by adding
your own methods. The only extra thing you need to do is to just add names to your&amp;nbsp;queries.&lt;/p&gt;
&lt;/div&gt;
</content><category term="elixir"></category><category term="elixir"></category><category term="phoenix"></category><category term="ecto"></category><category term="queries"></category><category term="declarative"></category></entry><entry><title>Phoenix forms integration with select2 andÂ ajax</title><link href="https://www.spapas.net/2019/06/04/phoenix-form-select2-ajax/" rel="alternate"></link><published>2019-06-04T14:20:00+03:00</published><updated>2019-06-04T14:20:00+03:00</updated><author><name>Serafeim Papastefanos</name></author><id>tag:www.spapas.net,2019-06-04:/2019/06/04/phoenix-form-select2-ajax/</id><summary type="html">&lt;p class="first last"&gt;How to create a proper ajax-autocomplete solution for your foreign key fields with Phoenix Forms and&amp;nbsp;select2&lt;/p&gt;
</summary><content type="html">&lt;p&gt;During the past months I&amp;#8217;ve tried to implement a project using &lt;a class="reference external" href="https://elixir-lang.org/"&gt;Elixir&lt;/a&gt; and the &lt;a class="reference external" href="https://phoenixframework.org/"&gt;Phoenix framework&lt;/a&gt;. Old
visitors of my blog will probably remember that I mainly use Django for back-end development but I decided to
also give Phoenix a&amp;nbsp;try.&lt;/p&gt;
&lt;p&gt;My first impressions are positive but I don&amp;#8217;t want to go into detail in this post; I&amp;#8217;ll try to add a more
extensive post comparing Elixir / Phoenix with Python / Django&amp;nbsp;someday.&lt;/p&gt;
&lt;p&gt;The problem that this particular post will try to explain is how to properly integrate a jQuery &lt;a class="reference external" href="https://select2.org/"&gt;select2&lt;/a&gt;
dropdown ajax with autocomplete search to your &lt;a class="reference external" href="https://hexdocs.pm/phoenix_html/Phoenix.HTML.Form.html"&gt;Phonix Forms&lt;/a&gt;. This seems like a very common problem however I
couldn&amp;#8217;t find a proper solution anywhere in the internet. It seems that most people using Phoenix prefer to
implement their autocompletes using &lt;span class="caps"&gt;SPA&lt;/span&gt; like functionality (react etc). Also I found &lt;a class="reference external" href="https://github.com/nico-amsterdam/phoenix_form_awesomplete"&gt;this project&lt;/a&gt; that
seems to be working, however it does not use select2 and I really didn&amp;#8217;t like to mess with a different
&lt;span class="caps"&gt;JS&lt;/span&gt; library for reasons that should be too obvious to most&amp;nbsp;people.&lt;/p&gt;
&lt;p&gt;So here we&amp;#8217;ll implement a simple solution for allowing your foreign key value to be autocompleted through ajax
using select2. The specific example is that you have a User that belongs to an Authority i.e user has a field
named &lt;cite&gt;authority_id&lt;/cite&gt; which is a foreign key to authority. We&amp;#8217;ll add a functionality to the user edit form to
select the authority using&amp;nbsp;ajax-autocomplete.&lt;/p&gt;
&lt;p&gt;Please notice that you can find a working version of this tutorial in my Phoenix Crud template project:
&lt;a class="reference external" href="https://github.com/spapas/phxcrd"&gt;https://github.com/spapas/phxcrd&lt;/a&gt;. This project contains various other functionality that I need but you should be
able to test the user - authority integration by following the instructions&amp;nbsp;there.&lt;/p&gt;
&lt;div class="section" id="the-schemas"&gt;
&lt;h2&gt;The&amp;nbsp;schemas&lt;/h2&gt;
&lt;p&gt;For this tutorial, we&amp;#8217;ll use two schemas: A &lt;tt class="docutils literal"&gt;User&lt;/tt&gt; and an &lt;tt class="docutils literal"&gt;Authority&lt;/tt&gt;. Each &lt;tt class="docutils literal"&gt;User&lt;/tt&gt; belongs to an &lt;tt class="docutils literal"&gt;Authority&lt;/tt&gt;
(thus will have a foreign key to &lt;tt class="docutils literal"&gt;Authority&lt;/tt&gt;; that&amp;#8217;s what we want to set using the ajax select2). Here are
the ecto schemas for these&amp;nbsp;entities:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;defmodule&lt;/span&gt; &lt;span class="nc"&gt;Phxcrd.Auth.Authority&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Ecto.Schema&lt;/span&gt;

  &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nc"&gt;Ecto.Changeset&lt;/span&gt;
  &lt;span class="kn"&gt;alias&lt;/span&gt; &lt;span class="nc"&gt;Phxcrd.Auth.User&lt;/span&gt;

  &lt;span class="n"&gt;schema&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;authorities&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:string&lt;/span&gt;
    &lt;span class="n"&gt;has_many&lt;/span&gt; &lt;span class="ss"&gt;:users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;on_replace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:nilify&lt;/span&gt;
    &lt;span class="n"&gt;timestamps&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="na"&gt;@doc&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
  &lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;authority&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;authority&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;validate_required&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The field is required&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;unique_constraint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The name already exists!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Accessible&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;defmodule&lt;/span&gt; &lt;span class="nc"&gt;Phxcrd.Auth.User&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Ecto.Schema&lt;/span&gt;

  &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nc"&gt;Ecto.Changeset&lt;/span&gt;
  &lt;span class="kn"&gt;alias&lt;/span&gt; &lt;span class="nc"&gt;Phxcrd.Auth.Authority&lt;/span&gt;

  &lt;span class="n"&gt;schema&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;users&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:string&lt;/span&gt;
    &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ss"&gt;:username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:string&lt;/span&gt;
    &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ss"&gt;:password_hash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:string&lt;/span&gt;
    &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ss"&gt;:password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;virtual&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;

    &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:authority&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Authority&lt;/span&gt;

    &lt;span class="n"&gt;timestamps&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="na"&gt;@doc&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
  &lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:authority_id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;validate_required&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="ss"&gt;:username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt; &lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Accessible&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that both these entities are contained in the &lt;tt class="docutils literal"&gt;Auth&lt;/tt&gt; context and were created using
&lt;tt class="docutils literal"&gt;mix phx.gen.html&lt;/tt&gt;; I won&amp;#8217;t include the migrations&amp;nbsp;here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-search-api"&gt;
&lt;h2&gt;The search &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Let&amp;#8217;s now take a look at the search api for &lt;tt class="docutils literal"&gt;Authority&lt;/tt&gt;. I&amp;#8217;ve added an &lt;tt class="docutils literal"&gt;ApiController&lt;/tt&gt;  which contains
the following&amp;nbsp;function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;search_authorities&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;q&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;authorities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
      &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nc"&gt;Authority&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="ss"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ilike&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;%&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;authorities.json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;authorities&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;authorities&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that this retrieves a &lt;cite&gt;q&lt;/cite&gt; parameter and makes an &lt;cite&gt;ilike&lt;/cite&gt; query to &lt;cite&gt;Authority.name&lt;/cite&gt;. It then
passes the results to the view for rendering. Here&amp;#8217;s the corresponding function for &lt;cite&gt;ApiView&lt;/cite&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;authorities.json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="ss"&gt;authorities&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;authorities&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="ss"&gt;results&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;authorities&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;authority_json&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;authority_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="p"&gt;%{&lt;/span&gt;
      &lt;span class="ss"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that select2 wants its results in a &lt;span class="caps"&gt;JSON&lt;/span&gt; struct with the following form &lt;tt class="docutils literal"&gt;{results: [{id: 1, name: &amp;quot;Authority &lt;span class="pre"&gt;1&amp;quot;}]}&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;To add this controller action to my routes I&amp;#8217;ve added this to &lt;tt class="docutils literal"&gt;router.ex&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/api&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;PhxcrdWeb&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;pipe_through&lt;/span&gt; &lt;span class="ss"&gt;:api&lt;/span&gt;

    &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/search_authorities&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;ApiController&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:search_authorities&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thus if you visit &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;http://127.0.0.1/search_authorities?q=A&lt;/span&gt;&lt;/tt&gt; you should retrieve authorities containing &lt;tt class="docutils literal"&gt;A&lt;/tt&gt; in their&amp;nbsp;name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-controller"&gt;
&lt;h2&gt;The&amp;nbsp;controller&lt;/h2&gt;
&lt;p&gt;Concenring the &lt;tt class="docutils literal"&gt;UserController&lt;/tt&gt; I&amp;#8217;ve added the following methods to it for creating and updating&amp;nbsp;users:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;changeset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Auth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;change_user&lt;/span&gt;&lt;span class="p"&gt;(%&lt;/span&gt;&lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt;
  &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;new.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;user&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;user_params&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;Auth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="n"&gt;conn&lt;/span&gt;
      &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;put_flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; created!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Routes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:show&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;new.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;edit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Auth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_user!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;changeset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Auth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;change_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;edit.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;user&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;user_params&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Auth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_user!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="n"&gt;user_params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(%{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;authority_id&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;user_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;Auth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="n"&gt;conn&lt;/span&gt;
      &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;put_flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;User updated successfully.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Routes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:show&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="nc"&gt;Ecto.Changeset&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;edit.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Most of these are more or less the default things that &lt;tt class="docutils literal"&gt;mix phx.gen.html&lt;/tt&gt; creates.
One thing that may seem a strange here is the &lt;tt class="docutils literal"&gt;user_params = &lt;span class="pre"&gt;Map.merge(%{&amp;quot;authority_id&amp;quot;&lt;/span&gt; =&amp;gt; nil}, user_params)&lt;/tt&gt;
line of &lt;tt class="docutils literal"&gt;update&lt;/tt&gt;. What happens here is that I want to be able to clear the authority of a user (I&amp;#8217;ll
explain how in the next sections). If I do
that then the &lt;tt class="docutils literal"&gt;user_params&lt;/tt&gt; that is passed to &lt;tt class="docutils literal"&gt;update&lt;/tt&gt; will &lt;em&gt;not&lt;/em&gt; contain an &lt;tt class="docutils literal"&gt;authority_id&lt;/tt&gt; key thus
the &lt;tt class="docutils literal"&gt;authority_id&lt;/tt&gt; won&amp;#8217;t be changed at all (so even though I cleared it, it will keep its previous value after
I save it). To fix that I set a default value of &lt;tt class="docutils literal"&gt;nil&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;authority_id&lt;/tt&gt;; if the user has actually selected
an authority from the form this will be overriden when merging the two maps. So the resulting &lt;tt class="docutils literal"&gt;user_params&lt;/tt&gt; will
&lt;em&gt;always&lt;/em&gt; contain an &lt;tt class="docutils literal"&gt;authority_id&lt;/tt&gt; key, either set to nil or to the selected&amp;nbsp;authority.&lt;/p&gt;
&lt;p&gt;Beyond that I wont&amp;#8217; go into detail explaining the above functions,  but if something seems strange feel free to ask. I
also won&amp;#8217;t explain the &lt;tt class="docutils literal"&gt;Auth.*&lt;/tt&gt; functions; all these are created by phoenix in the context&amp;nbsp;module.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-view"&gt;
&lt;h2&gt;The&amp;nbsp;view&lt;/h2&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;UserView&lt;/tt&gt; module contains a simple but very important&amp;nbsp;function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;get_select_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This functions gets two parameters: The changeset and the name of the attribute (&lt;tt class="docutils literal"&gt;:authority_id&lt;/tt&gt; in our case). What
it does is to first check if this attribute is contained in the changeset.changes; if yes it will return that value. If
it isn&amp;#8217;t contained in the changeset.changes then it will return the value of changeset.data for that&amp;nbsp;attribute.&lt;/p&gt;
&lt;p&gt;This is a little complex but let&amp;#8217;s try to understand its logic: When you start editing a &lt;tt class="docutils literal"&gt;User&lt;/tt&gt; you want to display
the current authority of that instance. However, when you submit an edited user and retrieve an errored form (for example
because you forgot to fill the username) you want to display the authority that &lt;em&gt;was submitted&lt;/em&gt; in the form. So the
&lt;tt class="docutils literal"&gt;changeset.changes&lt;/tt&gt; contains the changes that were submitted just before while the &lt;tt class="docutils literal"&gt;changeset.data&lt;/tt&gt; contain the
initial value of the&amp;nbsp;struct.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 02/07/2019:&lt;/strong&gt; Please notice that instead of using the
&lt;tt class="docutils literal"&gt;get_select_value&lt;/tt&gt; I presented before you can use the
&lt;tt class="docutils literal"&gt;Ecto.Changeset.get_field&lt;/tt&gt; function that does exactly this! So
&lt;tt class="docutils literal"&gt;get_select_value&lt;/tt&gt; could be defined like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;get_select_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;changeset&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Ecto.Changeset&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-form-template"&gt;
&lt;h2&gt;The form&amp;nbsp;template&lt;/h2&gt;
&lt;p&gt;Both the &lt;tt class="docutils literal"&gt;:new&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;:edit&lt;/tt&gt; actions include a common form.html.eex&amp;nbsp;template:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= form_for @changeset, @action, fn f -&amp;gt; %&amp;gt;
  &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= if @changeset.action do %&amp;gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;alert alert-danger&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= gettext(&amp;quot;Problems while saving&amp;quot;) %&amp;gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% end %&amp;gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;row&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;column&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= label f, :username %&amp;gt;
      &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= text_input f, :username %&amp;gt;
      &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= error_tag f, :username %&amp;gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;column&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= label f, :email %&amp;gt;
      &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= text_input f, :email %&amp;gt;
      &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= error_tag f, :email %&amp;gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;row&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;column&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= label f, :authority %&amp;gt;
      &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= select(f,
        :authority_id, [
          (with sv when not is_nil(sv) &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;-&lt;/span&gt; &lt;span class="na"&gt;get_select_value&lt;/span&gt;&lt;span class="err"&gt;(@&lt;/span&gt;&lt;span class="na"&gt;changeset&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;:authority_id&lt;/span&gt;&lt;span class="err"&gt;),&lt;/span&gt;
                                     &lt;span class="na"&gt;a&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Phxcrd&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Auth&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get_authority&lt;/span&gt;&lt;span class="err"&gt;!(&lt;/span&gt;&lt;span class="na"&gt;sv&lt;/span&gt;&lt;span class="err"&gt;),&lt;/span&gt; &lt;span class="na"&gt;do:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="err"&gt;})&lt;/span&gt;
        &lt;span class="err"&gt;],&lt;/span&gt;
        &lt;span class="na"&gt;style:&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="na"&gt;width:&lt;/span&gt; &lt;span class="na"&gt;100&lt;/span&gt;&lt;span class="err"&gt;%&amp;quot;)&lt;/span&gt;
        &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= error_tag f, :authority_id %&amp;gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= submit gettext(&amp;quot;Save&amp;quot;) %&amp;gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% end %&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a custom Phoenix form but it has the following addition which is more or less the meat of this article
(along with the &lt;tt class="docutils literal"&gt;get_select_value&lt;/tt&gt; function I explained&amp;nbsp;before):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:authority_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;sv&lt;/span&gt; &lt;span class="ow"&gt;when&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;is_nil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;get_select_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;@changeset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:authority_id&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                   &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nc"&gt;Phxcrd.Auth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_authority!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sv&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="ss"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="ss"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;width: 100%&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So this will create an html select element which will contain a single value (the array in the third
parameter of &lt;tt class="docutils literal"&gt;select&lt;/tt&gt;): The authority of that object or the authority that the user had submitted
in the form. For this it uses &lt;tt class="docutils literal"&gt;get_select_value&lt;/tt&gt; to retrieve the :authority_id and if it&amp;#8217;s not nil
it passes it to &lt;tt class="docutils literal"&gt;get_authority!&lt;/tt&gt; to retrieve the actual authority and return a tuple with its name and&amp;nbsp;id.&lt;/p&gt;
&lt;p&gt;By default when you create a &lt;tt class="docutils literal"&gt;select&lt;/tt&gt; element you&amp;#8217;ll pass an array of all options in the third
parameter, for&amp;nbsp;example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:authority_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Phxcrd.Auth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_authorities&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ni"&gt;&amp;amp;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Of course this beats the purpose of using ajax since all options will be&amp;nbsp;rendered.&lt;/p&gt;
&lt;p&gt;The final step is to add the required custom javascript to convert that select to&amp;nbsp;select2-with-ajax:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#user_authority_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;select2&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="nx"&gt;allowClear&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Select authority&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;%= Routes.api_path(@conn, :search_authorities) %&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;dataType&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;minimumInputLength&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;span class="caps"&gt;JS&lt;/span&gt; very rather simple; the &lt;tt class="docutils literal"&gt;allowClear&lt;/tt&gt; option will display an &lt;tt class="docutils literal"&gt;x&lt;/tt&gt; so that you can clear the
selected authority while the ajax url will be that of the &lt;tt class="docutils literal"&gt;:search_authorities&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Although this article may seem a little long, as I&amp;#8217;ve already mentioned the most important thing
to keep is how to properly set the value that should be displayed in your &lt;tt class="docutils literal"&gt;select2&lt;/tt&gt; widget. Beyond
that everything is a walk in the park by following the&amp;nbsp;docs.&lt;/p&gt;
&lt;/div&gt;
</content><category term="elixir"></category><category term="elixir"></category><category term="phoenix"></category><category term="select2"></category><category term="autocompelte"></category><category term="ajax"></category></entry><entry><title>How to create a custom filtered adapter inÂ Android</title><link href="https://www.spapas.net/2019/04/05/android-custom-filter-adapter/" rel="alternate"></link><published>2019-04-05T12:20:00+03:00</published><updated>2019-04-05T12:20:00+03:00</updated><author><name>Serafeim Papastefanos</name></author><id>tag:www.spapas.net,2019-04-05:/2019/04/05/android-custom-filter-adapter/</id><summary type="html">&lt;p class="first last"&gt;How to create a custom filtered adapter in Android; we&amp;#8217;ll be using Kotlin for&amp;nbsp;this.&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Android offers a nice component named &lt;a class="reference external" href="https://developer.android.com/reference/android/widget/AutoCompleteTextView"&gt;AutoCompleteTextView&lt;/a&gt; that can be used to auto-fill a text box from a list of values.
In its simplest form, you just create an array adapter passing it a list of objects (that have a proper &lt;tt class="docutils literal"&gt;toString()&lt;/tt&gt; method).
Then you type some characters to the textbox and by default it will filter the results searching
in the &lt;em&gt;beginning of the backing object&amp;#8217;s toString() result&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;However there are times that you don&amp;#8217;t want to look at the beginning of the string (because you want to look at the middle of the string) or
you don&amp;#8217;t want to just to search in toString() method of the object or you want to do some more fancy things in object output. For this
you must override the &lt;tt class="docutils literal"&gt;ArrayAdapter&lt;/tt&gt; and add a custom &lt;tt class="docutils literal"&gt;Filter&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Unfurtunately this isn&amp;#8217;t as straightforward as I&amp;#8217;d like and I couldn&amp;#8217;t find a quick and easy tutorial on how it can be&amp;nbsp;done.&lt;/p&gt;
&lt;p&gt;So here goes nothing: In the following I&amp;#8217;ll show you a very simple android application that will have &lt;em&gt;the minimum viable&lt;/em&gt; custom filtered
adapter implementation. You can find the whole project in github: &lt;a class="reference external" href="https://github.com/spapas/CustomFilteredAdapeter"&gt;https://github.com/spapas/CustomFilteredAdapeter&lt;/a&gt; but I am going to discuss
everything here&amp;nbsp;also.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-application"&gt;
&lt;h2&gt;The&amp;nbsp;application&lt;/h2&gt;
&lt;p&gt;Just create a new project with an empty activity from Android Studio. Use kotlin as the&amp;nbsp;language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-layout"&gt;
&lt;h2&gt;The&amp;nbsp;layout&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;ll keep it as simple as&amp;nbsp;possible:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;LinearLayout&lt;/span&gt;
        &lt;span class="na"&gt;xmlns:android=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;xmlns:tools=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.android.com/tools&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;android:orientation=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;vertical&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;match_parent&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;match_parent&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;tools:context=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.MainActivity&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;TextView&lt;/span&gt;
            &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;match_parent&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;android:textSize=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;32sp&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;android:textAlignment=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;center&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;AutoCompleteTextView&lt;/span&gt;
            &lt;span class="na"&gt;android:layout_marginTop=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;32dip&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;match_parent&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@+id/autoCompleteTextView&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should just care about the &lt;tt class="docutils literal"&gt;AutoCompleteTextView&lt;/tt&gt; with an id of &lt;tt class="docutils literal"&gt;autoCompleteTextView&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-backing-data-object"&gt;
&lt;h2&gt;The backing data&amp;nbsp;object&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;ll use a simple PoiDao Kotlin data class for&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PoiDao&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;city&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;category_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;#8217;d like to be able to search to both name, city and category_name of each object. To create a list of the pois to be used to the adapter I can do something&amp;nbsp;like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;poisArray&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;PoiDao&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Taco Bell&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Athens&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Restaurant&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;PoiDao&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;McDonalds&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Athens&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Restaurant&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;PoiDao&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;KFC&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Piraeus&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Restaurant&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;PoiDao&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Shell&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Lamia&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Gas Station&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;PoiDao&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;BP&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Thessaloniki&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Gas Station&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-custom-adapter"&gt;
&lt;h2&gt;The custom&amp;nbsp;adapter&lt;/h2&gt;
&lt;p&gt;This will be an &lt;tt class="docutils literal"&gt;ArrayAdapter&amp;lt;PoiDao&amp;gt;&lt;/tt&gt; implementing also the &lt;tt class="docutils literal"&gt;Filterable&lt;/tt&gt; interface:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;inner&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PoiAdapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;@LayoutRes&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;layoutResource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;allPois&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;PoiDao&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;):&lt;/span&gt;
    &lt;span class="n"&gt;ArrayAdapter&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;PoiDao&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;layoutResource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;allPois&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;Filterable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="py"&gt;mPois&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;PoiDao&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;allPois&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getCount&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="n"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mPois&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;PoiDao&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mPois&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getItemId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Long&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Or just return p0&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mPois&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toLong&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;convertView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;View&lt;/span&gt;&lt;span class="p"&gt;?,&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ViewGroup&lt;/span&gt;&lt;span class="p"&gt;?):&lt;/span&gt; &lt;span class="n"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;view&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TextView&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;convertView&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;TextView&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="o"&gt;?:&lt;/span&gt; &lt;span class="n"&gt;LayoutInflater&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;inflate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layoutResource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;TextView&lt;/span&gt;
        &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;${mPois[position].name} ${mPois[position].city} (${mPois[position].category_name})&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getFilter&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="n"&gt;Filter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// See next section&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You&amp;#8217;ll see that we add an instance variable named &lt;tt class="docutils literal"&gt;mPois&lt;/tt&gt; that gets initialized in the start with &lt;tt class="docutils literal"&gt;allPois&lt;/tt&gt; (which is the initial list of all pois that is passed to the adapter). The mPois
will contain the &lt;em&gt;filtered&lt;/em&gt; results. Then,
for &lt;tt class="docutils literal"&gt;getCount&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;getItem&lt;/tt&gt; we return the corresponding valeus from &lt;tt class="docutils literal"&gt;mPois&lt;/tt&gt;; the &lt;tt class="docutils literal"&gt;getItemId&lt;/tt&gt; is used when you have an sqlite backed adapter but I&amp;#8217;m including it here for&amp;nbsp;completeness.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;getView&lt;/tt&gt; will create the specific line for each item in the dropdown. As you&amp;#8217;ll see the layout that is passed must have a &lt;tt class="docutils literal"&gt;text&lt;/tt&gt; child which is set based on some of the attributes of
the corresponding poi for each position. Notice that we can use whatever view layout we want for our dropdown result line (this is the &lt;tt class="docutils literal"&gt;layoutResource&lt;/tt&gt; parameter) but we need to configure
it (i.e bind it with the values of the backing object) here&amp;nbsp;properly.&lt;/p&gt;
&lt;p&gt;Finally we create a custom instance of the &lt;tt class="docutils literal"&gt;Filter&lt;/tt&gt;, explained in the next&amp;nbsp;section.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-custom-filter"&gt;
&lt;h2&gt;The custom&amp;nbsp;filter&lt;/h2&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;getFilter&lt;/tt&gt; creates an object instance of a Filter and returns&amp;nbsp;it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getFilter&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="n"&gt;Filter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="err"&gt;: &lt;/span&gt;&lt;span class="nc"&gt;Filter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;publishResults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;charSequence&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CharSequence&lt;/span&gt;&lt;span class="p"&gt;?,&lt;/span&gt; &lt;span class="n"&gt;filterResults&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Filter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FilterResults&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;mPois&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filterResults&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;PoiDao&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="n"&gt;notifyDataSetChanged&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;performFiltering&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;charSequence&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CharSequence&lt;/span&gt;&lt;span class="p"&gt;?):&lt;/span&gt; &lt;span class="n"&gt;Filter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FilterResults&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;queryString&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;charSequence&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="n"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="n"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;filterResults&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Filter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FilterResults&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;filterResults&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queryString&lt;/span&gt;&lt;span class="p"&gt;==&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="n"&gt;queryString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
                &lt;span class="n"&gt;allPois&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;
                &lt;span class="n"&gt;allPois&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queryString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt;
                    &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;city&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queryString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt;
                    &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;category_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queryString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;filterResults&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This object instance overrides two methods of &lt;tt class="docutils literal"&gt;Filter&lt;/tt&gt;: &lt;tt class="docutils literal"&gt;performFiltering&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;publishResults&lt;/tt&gt;. The &lt;tt class="docutils literal"&gt;performFiltering&lt;/tt&gt; is where the actual filtering is done;
it should return a &lt;tt class="docutils literal"&gt;FilterResults&lt;/tt&gt; object containing a &lt;tt class="docutils literal"&gt;values&lt;/tt&gt; attribute with the filtered values. In this method
we retrieve the &lt;tt class="docutils literal"&gt;charSequence&lt;/tt&gt; parameter and converit it to lowercase. Then, if this parameter is not empty we filter the corresponding elements of &lt;tt class="docutils literal"&gt;allPois&lt;/tt&gt;
(i.e name, city and category_name in our case) using contains. If the query parameter is empty then we just return all pois. Warning java developers; here the if
is used as an expression (i.e its result will be assigned to &lt;tt class="docutils literal"&gt;filterResults.values&lt;/tt&gt;).&lt;/p&gt;
&lt;p&gt;After the performFiltering has finished, the &lt;tt class="docutils literal"&gt;publishResults&lt;/tt&gt; method is called. This method retrieves the filtered results in its &lt;tt class="docutils literal"&gt;filterResults&lt;/tt&gt; parameter. Thus it sets
&lt;tt class="docutils literal"&gt;mPois&lt;/tt&gt; of the custom adapter is set to the result of the filter operation and calls &lt;tt class="docutils literal"&gt;notifyDataSetChanged&lt;/tt&gt; to display the&amp;nbsp;results.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="using-the-custom-adapter"&gt;
&lt;h2&gt;Using the custom&amp;nbsp;adapter&lt;/h2&gt;
&lt;p&gt;To use the custom adapter you can do something like this in your activity&amp;#8217;s&amp;nbsp;onCreate:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Bundle&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;setContentView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;activity_main&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;poisArray&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="c1"&gt;// See previous sections&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;adapter&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PoiAdapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;simple_list_item_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;poisArray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;autoCompleteTextView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setAdapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;adapter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;autoCompleteTextView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;threshold&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;

    &lt;span class="n"&gt;autoCompleteTextView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setOnItemClickListener&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;selectedPoi&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;adapter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;PoiDao&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
        &lt;span class="n"&gt;autoCompleteTextView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;selectedPoi&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We create the PoiAdapter passing it the poisArray and &lt;tt class="docutils literal"&gt;android.R.layout.simple_list_item_1&lt;/tt&gt; as the layout. That layout just contains a textview named text. As we&amp;#8217;ve already
discussed you can pass something more complex here. The &lt;tt class="docutils literal"&gt;thresold&lt;/tt&gt; defined the number of characters that the user that needs to enter to do the filtering (default is&amp;nbsp;2).&lt;/p&gt;
&lt;p&gt;Please notice that when the user clicks (selects) on an item of the dropdown we set the contents of the textview (or else it will just use the object&amp;#8217;s toString() method to set&amp;nbsp;it).&lt;/p&gt;
&lt;/div&gt;
</content><category term="android"></category><category term="android"></category><category term="kotlin"></category><category term="adapter"></category><category term="filter"></category></entry><entry><title>Fixing your Django async job - databaseÂ integration</title><link href="https://www.spapas.net/2019/02/25/django-fix-async-db/" rel="alternate"></link><published>2019-02-25T15:20:00+02:00</published><updated>2019-02-25T15:20:00+02:00</updated><author><name>Serafeim Papastefanos</name></author><id>tag:www.spapas.net,2019-02-25:/2019/02/25/django-fix-async-db/</id><summary type="html">&lt;p class="first last"&gt;How to properly fix the errors you get when integrating async jobs (rq, celery etc) with your database in&amp;nbsp;Djang&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I&amp;#8217;ve already written
&lt;a class="reference external" href="https://www.spapas.net/2015/01/27/async-tasks-with-django-rq/"&gt;two&lt;/a&gt;
&lt;a class="reference external" href="https://www.spapas.net/2015/09/01/django-rq-redux/"&gt;articles&lt;/a&gt;
about django-rq and implementing asynchronous tasks in Django. However I&amp;#8217;ve found out
that there&amp;#8217;s a very important thing missing from them: How to properly integrate
your asynchronous tasks with your Django database. This is very important because
if it is not done right you will start experiencing strange errors about missing
database objects or duplicate keys. The most troublesome thing about these errors is
that they are not consistent. Your app may work fine but for some reason you&amp;#8217;ll see some
of your asynchronous tasks fail with these errors. When you re-queue the async jobs everything will
be&amp;nbsp;ok.&lt;/p&gt;
&lt;p&gt;Of course this behavior (code that runs &lt;em&gt;sometimes&lt;/em&gt;) smells of a race condition but its not easy to debug
it if you don&amp;#8217;t know the full&amp;nbsp;story.&lt;/p&gt;
&lt;p&gt;In the following I will describe the cause of this error and how you can fix it. As a companion
to this article I&amp;#8217;ve implemented a small project that can be used to test the error and the
fix: &lt;a class="reference external" href="https://github.com/spapas/async-job-db-fix"&gt;https://github.com/spapas/async-job-db-fix&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Notice that although this article is written for django-rq it should also help people that have
the same problems with other async job systems (like celery or&amp;nbsp;django-q).&lt;/p&gt;
&lt;div class="section" id="description-of-the-project"&gt;
&lt;h2&gt;Description of the&amp;nbsp;project&lt;/h2&gt;
&lt;p&gt;The project is very simple, you can just add a url and it will retrieve its content asynchronously and
report its length. For the models, it just has a &lt;tt class="docutils literal"&gt;Task&lt;/tt&gt; model which is used to provide information about
what we want to the asynchronous task to do and retrieve the&amp;nbsp;result:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;created_on&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now_add&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;url_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PositiveIntegerField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;job_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It also has a home view that can be used to start new asynchronous tasks by creating a &lt;tt class="docutils literal"&gt;Task&lt;/tt&gt; object
with the url we got and passing it to the asynchronous&amp;nbsp;task:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.generic.edit&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FormView&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.forms&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TaskForm&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.tasks&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_url_length&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TasksHomeFormView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FormView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;form_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TaskForm&lt;/span&gt;
    &lt;span class="n"&gt;template_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tasks_home.html&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;success_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cleaned_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;get_url_length&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TasksHomeFormView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_context_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TasksHomeFormView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_context_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tasks&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-created_on&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And finally the asynchronous job itself that retrieves the task from the database,
requests its url and saves its&amp;nbsp;length:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rq&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_current_job&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django_rq&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;

&lt;span class="nd"&gt;@job&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_url_length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;jb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_current_job&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;task_id&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;job_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_id&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;OK&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above should be fairly obvious: The user visits the homepage and enters a url at the input. When he presses submit
the view will create a new &lt;tt class="docutils literal"&gt;Task&lt;/tt&gt; object with the url that the user entered and fire-off the &lt;tt class="docutils literal"&gt;get_url_length&lt;/tt&gt; asynchronous job passing the
task id of the task that was just created. It will then return immediately without waiting for the asynchronous job to complete. The user will
need to refresh to see the result of his job; this is the usual behavior with async&amp;nbsp;jobs.&lt;/p&gt;
&lt;p&gt;The asynchronous job on the other hand will retrieve the task whose id got as a parameter from the database, do the work it needs to do
and update the result when it is&amp;nbsp;finished.&lt;/p&gt;
&lt;p&gt;Unfortunately, the above simple setup will &lt;em&gt;probably&lt;/em&gt; behave erratically by randomly throwing database related&amp;nbsp;errors!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cause-of-the-problem"&gt;
&lt;h2&gt;Cause of the&amp;nbsp;problem&lt;/h2&gt;
&lt;p&gt;In the previous section I said &lt;em&gt;probably&lt;/em&gt; because the erratic behavior is caused by a specific setting of your Django project; the &lt;tt class="docutils literal"&gt;ATOMIC_REQUESTS&lt;/tt&gt;.
This setting can be set on your database connection and if it is &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;TRUE&lt;/span&gt;&lt;/tt&gt; then each request will be &lt;em&gt;atomic&lt;/em&gt;. This means that each request will be tied with
a database transaction i.e a transaction will be started when your request starts and commited only when your requests finishes; if for some reason your
request throws an error then the transaction will be rolled back. An example of this setting&amp;nbsp;is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;django.db.backends.sqlite3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;db.sqlite3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;ATOMIC_REQUESTS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, in my opinion, &lt;tt class="docutils literal"&gt;ATOMIC_REQUESTS&lt;/tt&gt; is a great thing to have because it makes everything much easier. I always set it to &lt;tt class="docutils literal"&gt;True&lt;/tt&gt; to my projects because
I don&amp;#8217;t need to actually think about transactions and requests; I know that if there&amp;#8217;s a problem in a request the whole transaction will be rolle back and no
garbage will be left in the database. If on the other hand for some reason a request does not need to be tied to a transaction I just set it off
for this specific transaction (using &lt;cite&gt;transaction.non_atomic_requests_&lt;/cite&gt;). Please notice that by default the &lt;tt class="docutils literal"&gt;ATOMIC_REQUESTS&lt;/tt&gt; has a &lt;tt class="docutils literal"&gt;False&lt;/tt&gt; value which means that
the database will be in autocommit mode meaning that every command will be executed&amp;nbsp;immediately.&lt;/p&gt;
&lt;p&gt;So although the &lt;tt class="docutils literal"&gt;ATOMIC_REQUESTS&lt;/tt&gt; is great, it is actually the reason that there are problems with asynchronous tasks. Why? Let&amp;#8217;s take a closer look at what the &lt;tt class="docutils literal"&gt;form_valid&lt;/tt&gt; of the view&amp;nbsp;does:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cleaned_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;#1&lt;/span&gt;
    &lt;span class="n"&gt;get_url_length&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#2&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TasksHomeFormView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It creates the task in #1, fires off the asynchronous task in #2 and continues the execution of the view processing in #3. The important thing to understand
here is that the transaction will be commited &lt;em&gt;only after #3&lt;/em&gt; is finished. This means that there&amp;#8217;s a possibility that the asynchronous task will be started
before #3 is finished thus it won&amp;#8217;t find the task because the task will &lt;em&gt;not&lt;/em&gt; be created yet(!) This is a little counter-intuitive but you must remember
that the async task is run by a worker which is a different process than your application server; the worker may be able to start before the transaction is&amp;nbsp;commited.&lt;/p&gt;
&lt;p&gt;If you want to actually see the problem &lt;em&gt;every time&lt;/em&gt; you can add a small delay between the start of the async task and the &lt;tt class="docutils literal"&gt;form_valid&lt;/tt&gt; something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cleaned_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;get_url_length&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TasksHomeFormView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will make the view more slow so the asynchronous worker will always have time to start executing the task (and get the not found error). Also notice
that if you had &lt;tt class="docutils literal"&gt;ATOMIC_REQUESTS: False&lt;/tt&gt; the above code would work fine because the task would be created immediately (auto-commited) and the async job would be able to find&amp;nbsp;it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-solution"&gt;
&lt;h2&gt;The&amp;nbsp;solution&lt;/h2&gt;
&lt;p&gt;So how is this problem solved? Well it&amp;#8217;s not that difficult now that you know what&amp;#8217;s causing&amp;nbsp;it!&lt;/p&gt;
&lt;p&gt;One solution would be to set &lt;tt class="docutils literal"&gt;ATOMIC_REQUESTS&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;False&lt;/tt&gt; but that would make all database commands auto-commit so you&amp;#8217;ll lose
request-transaction-tieing. Another solution would be to set &lt;tt class="docutils literal"&gt;ATOMIC_REQUESTS&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;True&lt;/tt&gt; and disable atomic requests for the specific view that starts the
asynchronous job using &lt;cite&gt;transaction.non_atomic_requests_&lt;/cite&gt;. This is a viable solution however I don&amp;#8217;t like it because I&amp;#8217;d lose the comfort of transaction per request
for this specific request and I would need to add my own transaction&amp;nbsp;handling.&lt;/p&gt;
&lt;p&gt;A third solution is to avoid messing with the database in your view and create the task object in the async job. Any parameters you want to pass to the async job would be
passed directly to the async function. This may work fine in some cases but I find it more safe to create the task in the database before starting the async job so that
I have better control and error handling. This way even if there&amp;#8217;s an error in my worker and for some reason the async job never starts or it breaks before being able to
handle the database, I will have the task object in the database because it will have been created in the&amp;nbsp;view.&lt;/p&gt;
&lt;p&gt;Is there anything better? Isn&amp;#8217;t there a way to start the executing the async job &lt;em&gt;after&lt;/em&gt; the transaction of the
view is commited? Actually yes, there is! For this, &lt;a class="reference external" href="https://docs.djangoproject.com/en/2.1/topics/db/transactions/#django.db.transaction.on_commit"&gt;transaction.on_commit&lt;/a&gt; comes to the rescue! This function
receives a callback that will be called after the transaction is commited! Thus, to properly fix you project, you should
change the &lt;tt class="docutils literal"&gt;form_valid&lt;/tt&gt; method like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cleaned_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;transaction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on_commit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;get_url_length&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TasksHomeFormView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that I need to use &lt;tt class="docutils literal"&gt;lambda&lt;/tt&gt; to create a callback function that will call &lt;tt class="docutils literal"&gt;get_url_length.delay(task.id)&lt;/tt&gt; when the transaction is commited. Now
even though I have the delay there the async job will start after the transaction is commited, ie after the view handler is finished (after the 1 second&amp;nbsp;delay).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;From the above you should be able to understand why sometimes you have problems when your async jobs use the database. To fix it you have various
options but at least for me, the best solution is to start your async jobs &lt;em&gt;after&lt;/em&gt; the transaction is commited using &lt;tt class="docutils literal"&gt;transaction.on_commit&lt;/tt&gt;. Just
change each &lt;tt class="docutils literal"&gt;async.job.delay(parameters)&lt;/tt&gt; call to &lt;tt class="docutils literal"&gt;transaction.on_commit(lambda: async.job.delay(parameters))&lt;/tt&gt; and you will be&amp;nbsp;fine!&lt;/p&gt;
&lt;/div&gt;
</content><category term="django"></category><category term="django"></category><category term="async"></category><category term="tasks"></category><category term="django-rq"></category><category term="rq"></category></entry><entry><title>Use du to find out the disk usage of each directory inÂ unix</title><link href="https://www.spapas.net/2018/11/12/du-disk-usage/" rel="alternate"></link><published>2018-11-12T14:20:00+02:00</published><updated>2018-11-12T14:20:00+02:00</updated><author><name>Serafeim Papastefanos</name></author><id>tag:www.spapas.net,2018-11-12:/2018/11/12/du-disk-usage/</id><summary type="html">&lt;p class="first last"&gt;How to use the du utility to find out the disk usage of each directory in&amp;nbsp;unix&lt;/p&gt;
</summary><content type="html">&lt;p&gt;One usual problem I have when dealing with production servers is that their
disks get filled.  This results in various warnings and errors and should be fixed
immediately. The first step to resolve this issue is to actually find out where is that
hard disk space is&amp;nbsp;used!&lt;/p&gt;
&lt;p&gt;For this you can use the &lt;cite&gt;du&lt;/cite&gt; unix tool with some parameters. The problem is that &lt;cite&gt;du&lt;/cite&gt;
has various parameters (not needed for the task at hand) and the various
places I search for contain other info not related to this specific&amp;nbsp;task.&lt;/p&gt;
&lt;p&gt;Thus I&amp;#8217;ve decided to write this small blog post to help people struggling with
this and also to help &lt;em&gt;me&lt;/em&gt; avoid googling for it by searching in pages that
also contain other &lt;tt class="docutils literal"&gt;du&lt;/tt&gt; recipies and also avoid the trial and error that this
would&amp;nbsp;require.&lt;/p&gt;
&lt;p&gt;So to print out the disk usage summary for a directory go to that directory
and run &lt;tt class="docutils literal"&gt;du &lt;span class="pre"&gt;-h&lt;/span&gt; &lt;span class="pre"&gt;-s&lt;/span&gt; *&lt;/tt&gt;; you need to have access to the child subdirectories
so probably it&amp;#8217;s better to try this as root (unless you go to your home dir
for&amp;nbsp;example).&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s a sample&amp;nbsp;usage:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
[root&amp;#64;server1 /]# cd /
[root&amp;#64;server1 /]# du -h -s *
7.2M    bin
55M     boot
164K    dev
35M     etc
41G     home
236M    lib
25M     lib64
20K     lost+found
8.0K    media
155G    mnt
0       proc
1.6G    root
12M     sbin
8.0K    srv
427M    tmp
3.2G    usr
8.9G    var
&lt;/pre&gt;
&lt;p&gt;The parameters are -h to print human readable sizes (G, M etc) and -s to
print a summary usage of &lt;em&gt;each&lt;/em&gt; parameter. Since this will output the
summary for each parameter I finally pass &lt;tt class="docutils literal"&gt;*&lt;/tt&gt; to be changed to all files/dirs
in that directory. If I used &lt;tt class="docutils literal"&gt;du &lt;span class="pre"&gt;-h&lt;/span&gt; &lt;span class="pre"&gt;-s&lt;/span&gt; /tmp&lt;/tt&gt; instead I&amp;#8217;d get the total usage only for
the &lt;tt class="docutils literal"&gt;/tmp&lt;/tt&gt; directory.&lt;/p&gt;
&lt;p&gt;Another trick that may help you quickly find out the offending directories is to
append the &lt;tt class="docutils literal"&gt;| grep G&lt;/tt&gt; pipe command (i.e run &lt;tt class="docutils literal"&gt;du &lt;span class="pre"&gt;-h&lt;/span&gt; &lt;span class="pre"&gt;-s&lt;/span&gt; * | grep G&lt;/tt&gt;) which will
filter out only the entries containing a &lt;tt class="docutils literal"&gt;G&lt;/tt&gt; (i.e only print the folders having
more than 1 &lt;span class="caps"&gt;GB&lt;/span&gt; size). Yeh I know that this will also print entries that have
also a G in their name but since there aren&amp;#8217;t many directores that have
G in their name you should be&amp;nbsp;ok.&lt;/p&gt;
&lt;p&gt;If you run the above from &lt;tt class="docutils literal"&gt;/&lt;/tt&gt; so that &lt;tt class="docutils literal"&gt;/proc&lt;/tt&gt; is included you may
get a bunch of &lt;tt class="docutils literal"&gt;du: cannot access 'proc/nnn/task/nnn/fd/4': No such file or directory&lt;/tt&gt;
errors; just add the &lt;tt class="docutils literal"&gt;2&amp;gt; /dev/null&lt;/tt&gt; pipe redirect to redirect the stderr output
to &lt;tt class="docutils literal"&gt;/dev/null&lt;/tt&gt;, i.e run &lt;tt class="docutils literal"&gt;du &lt;span class="pre"&gt;-h&lt;/span&gt; &lt;span class="pre"&gt;-s&lt;/span&gt; * 2&amp;gt; /dev/null&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Finally, please notice that if there are &lt;em&gt;lots&lt;/em&gt; of files in your directory you&amp;#8217;ll get
a lot of output entries (since the &lt;cite&gt;*&lt;/cite&gt; will match both files and directories).
In this case you can use &lt;tt class="docutils literal"&gt;echo */&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;ls &lt;span class="pre"&gt;-d&lt;/span&gt; */&lt;/tt&gt; to list only the directories;
append that command inside a ` pair or &lt;tt class="docutils literal"&gt;$()&lt;/tt&gt; (to substitute for the command
output) instead of the &lt;tt class="docutils literal"&gt;*&lt;/tt&gt; to only get the sizes of the
directories, i.e run &lt;tt class="docutils literal"&gt;du &lt;span class="pre"&gt;-h&lt;/span&gt; &lt;span class="pre"&gt;-s&lt;/span&gt; $(echo */)&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;du &lt;span class="pre"&gt;-h&lt;/span&gt; &lt;span class="pre"&gt;-s&lt;/span&gt; `echo */`&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;One thing that you must be aware of is that this command may take &lt;em&gt;a long time&lt;/em&gt;
especially if you have lots of small files somewhere. Just let it run and it
should finish after some time. If it takes too long time try to exclude any
mounted network
directories (either with &lt;span class="caps"&gt;SMB&lt;/span&gt; or &lt;span class="caps"&gt;NFS&lt;/span&gt;) since these will take extra long&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;Also, if you awant a nice interactive output
using ncurses you can download and compile the &lt;a class="reference external" href="https://dev.yorhel.nl/ncdu"&gt;ncdu tool&lt;/a&gt; (NCurses Disk&amp;nbsp;Usage).&lt;/p&gt;
</content><category term="unix"></category><category term="du"></category><category term="unix"></category><category term="linux"></category><category term="disk-usage"></category></entry><entry><title>Adding a delay to Django HTTPÂ responses</title><link href="https://www.spapas.net/2018/05/08/django-reponse-add-delay/" rel="alternate"></link><published>2018-05-08T23:20:00+03:00</published><updated>2018-05-08T23:20:00+03:00</updated><author><name>Serafeim Papastefanos</name></author><id>tag:www.spapas.net,2018-05-08:/2018/05/08/django-reponse-add-delay/</id><summary type="html">&lt;p class="first last"&gt;How add a delay to your Django &lt;span class="caps"&gt;HTTP&lt;/span&gt; responses using a middleware or a &lt;span class="caps"&gt;CBV&lt;/span&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Sometimes you&amp;#8217;d like to make your Django views more slow by adding a fake delay. This may
sound controversial (why would somebody want to make some of his views slower) however it is a real requirement,
at least when developing an&amp;nbsp;application.&lt;/p&gt;
&lt;p&gt;For example, you may be using a &lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; and you want to implement a spinner while your form is loading. However, usually when
developing your responses will load so soon that you won&amp;#8217;t be able to admire your spinner in all its glory! Also, when you
submit a &lt;span class="caps"&gt;POST&lt;/span&gt; form (i.e a form that changes your data), it is advisable to disable your submit button so that when your users
double click it the form won&amp;#8217;t be submitted two times (it may seem strange to some people but this is a very common error that
has bitten me many times; there are many users that think that they need to double click the buttons; thus I always disable
my submit buttons after somebody clicks them); in this case you also need to make your response a little slower to make sure
that the button is actually&amp;nbsp;disabled!&lt;/p&gt;
&lt;p&gt;I will propose two methods for adding this delay to your responses. One that will affect all (or most) your views using
a &lt;a class="reference external" href="https://docs.djangoproject.com/en/2.0/topics/http/middleware/"&gt;middleware&lt;/a&gt; and another that you can add to any &lt;span class="caps"&gt;CBV&lt;/span&gt; you want using a mixin; please see my previous &lt;a class="reference external" href="https://spapas.github.io/2018/03/19/comprehensive-django-cbv-guide/"&gt;&lt;span class="caps"&gt;CBV&lt;/span&gt; guide&lt;/a&gt; for more on
Django CBVs and mixins. For the middleware solution we&amp;#8217;ll also take a quick look at what is the Django middleware mechanism and
how it can be used to add&amp;nbsp;functionality.&lt;/p&gt;
&lt;div class="section" id="using-middleware"&gt;
&lt;h2&gt;Using&amp;nbsp;middleware&lt;/h2&gt;
&lt;p&gt;The Django &lt;a class="reference external" href="https://docs.djangoproject.com/en/2.0/topics/http/middleware/"&gt;middleware&lt;/a&gt; is a mechanism for adding your own code to the Django request / response cycle. I&amp;#8217;ll try to explain
this a bit; Django is waiting for an &lt;span class="caps"&gt;HTTP&lt;/span&gt; Request (i.e &lt;span class="caps"&gt;GET&lt;/span&gt; a url with these headers and these query parameters), it will
parse this &lt;span class="caps"&gt;HTTP&lt;/span&gt; Request and prepare an &lt;span class="caps"&gt;HTTP&lt;/span&gt; Response (i.e some headers and a Payload). Your view will be the main actor for
retrieving the &lt;span class="caps"&gt;HTTP&lt;/span&gt; response and returning the &lt;span class="caps"&gt;HTTP&lt;/span&gt; request. However, using this middleware mechanism Django allows you to
enable other actors (the middleware) that will universally modify the &lt;span class="caps"&gt;HTTP&lt;/span&gt; request before passing it to your view and will also
modify the view&amp;#8217;s &lt;span class="caps"&gt;HTTP&lt;/span&gt; respone before sending it back to the&amp;nbsp;client.&lt;/p&gt;
&lt;p&gt;Actually, a list of middleware called &amp;#8230; &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;MIDDLEWARE&lt;/span&gt;&lt;/tt&gt; is &lt;a class="reference external" href="https://docs.djangoproject.com/en/2.0/topics/http/middleware/#activating-middleware"&gt;defined by default&lt;/a&gt; in the &lt;tt class="docutils literal"&gt;settings.py&lt;/tt&gt; of all new Django
projects; these are used to add various capabilities
that are universally needed, for example session support, various security enablers, django message support and others. You
can easily attach your own middleware to that list to add extra functionality. Notice that the order of the middleware in the &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;MIDDLEWARE&lt;/span&gt;&lt;/tt&gt;
list actually matters. Middleware later in the list will be executed after the ones previous in the list; we&amp;#8217;ll see some consequences of this&amp;nbsp;later.&lt;/p&gt;
&lt;p&gt;Now the time has come to take a quick look at how to implement a middleware, &lt;a class="reference external" href="https://docs.djangoproject.com/en/2.0/topics/http/middleware/#writing-your-own-middleware"&gt;taken from the Django docs&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SimpleMiddleware&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;get_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_response&lt;/span&gt;
        &lt;span class="c1"&gt;# One-time configuration and initialization.&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Code to be executed for each request before&lt;/span&gt;
        &lt;span class="c1"&gt;# the view (and later middleware) are called.&lt;/span&gt;

        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Code to be executed for each request/response after&lt;/span&gt;
        &lt;span class="c1"&gt;# the view is called.&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Actually you can implement the middleware as a nested function however I prefer the classy version. The comments should be really enlightening:
When your project is started the constructor (&lt;tt class="docutils literal"&gt;__init__&lt;/tt&gt;) will be called once, for example if you want to read a configuration setting from the database
then you should do it in the &lt;tt class="docutils literal"&gt;__init__&lt;/tt&gt; to avoid calling the database everytime your middleware is executed (i.e for &lt;em&gt;every&lt;/em&gt; request). The &lt;tt class="docutils literal"&gt;__call__&lt;/tt&gt; is
a special method that gets translated to calling this class instance as a function, i.e if you do something&amp;nbsp;like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SimpleMiddleware&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;sm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then &lt;tt class="docutils literal"&gt;sm()&lt;/tt&gt; will execute the &lt;tt class="docutils literal"&gt;__call__&lt;/tt&gt;; there are various similar &lt;a class="reference external" href="http://www.diveintopython3.net/special-method-names.html"&gt;python special methods&lt;/a&gt;, for example &lt;tt class="docutils literal"&gt;__len__&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;__eq__&lt;/tt&gt; etc&lt;/p&gt;
&lt;p&gt;Now, as you can see the &lt;tt class="docutils literal"&gt;__call__&lt;/tt&gt; special method has four&amp;nbsp;parts:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Code that is executed &lt;em&gt;before&lt;/em&gt; the &lt;tt class="docutils literal"&gt;self.get_response()&lt;/tt&gt; method is called; here you should modify the request object. Middleware will reach this point in the order they are&amp;nbsp;listed.&lt;/li&gt;
&lt;li&gt;The actual call to &lt;tt class="docutils literal"&gt;self.get_response()&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Code that is executed &lt;em&gt;after&lt;/em&gt; the &lt;tt class="docutils literal"&gt;self.get_response()&lt;/tt&gt; method is called; here you should modify the response object. Middleware will reach this point in the reverse order they are&amp;nbsp;listed.&lt;/li&gt;
&lt;li&gt;Returning the response to be used by the next&amp;nbsp;middleware&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Notice that &lt;tt class="docutils literal"&gt;get_response&lt;/tt&gt; will call the next middleware; while the &lt;tt class="docutils literal"&gt;get_response&lt;/tt&gt; for the last middleware will actually call the view. Then
the view will return a response which could be modified (if needed) by the middlewares in the opposite order of their definition&amp;nbsp;list.&lt;/p&gt;
&lt;p&gt;As an example, let&amp;#8217;s define two simple&amp;nbsp;middlewares:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;M1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;get_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_response&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;M1 before response&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;M1 after response&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;M2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;get_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_response&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;M2 before response&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;M2 after response&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you define &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;MIDDLEWARE&lt;/span&gt; = ['M1', 'M2']&lt;/tt&gt; you&amp;#8217;ll see the&amp;nbsp;following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Got the request&lt;/span&gt;
&lt;span class="n"&gt;M1&lt;/span&gt; &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;span class="n"&gt;M2&lt;/span&gt; &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;span class="c1"&gt;# The view is rendered to the response now&lt;/span&gt;
&lt;span class="n"&gt;M2&lt;/span&gt; &lt;span class="n"&gt;after&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;span class="n"&gt;M1&lt;/span&gt; &lt;span class="n"&gt;after&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;span class="c1"&gt;# Return the response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Please notice a middleware may not call &lt;tt class="docutils literal"&gt;self.get_response&lt;/tt&gt; to continue the chain but return directly a response (for example a 403 Forbiden&amp;nbsp;response).&lt;/p&gt;
&lt;p&gt;After this quick introduction to how middleware works, let&amp;#8217;s take a look at a skeleton for the time-delay&amp;nbsp;middleware:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TimeDelayMiddleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;get_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_response&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is really simple, I&amp;#8217;ve just added an extra line to the previous middleware. This line adds a one-second delay to all responses. I&amp;#8217;ve
added it before &lt;tt class="docutils literal"&gt;self.get_response&lt;/tt&gt; - because this delay does not depend on anything, I could have added it after &lt;tt class="docutils literal"&gt;self.get_response&lt;/tt&gt;
without changes in the behavior. Also, the order of this middleware in the &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;MIDDLEWARE&lt;/span&gt;&lt;/tt&gt; list doesn&amp;#8217;t matter since it doesn&amp;#8217;t depend on
other middleware (it just needs to run to add the&amp;nbsp;delay).&lt;/p&gt;
&lt;p&gt;This middleware may have a little more functionality, for example to configure the delay from the settings or add the delay only for
specific urls (by checking the &lt;tt class="docutils literal"&gt;request.path&lt;/tt&gt;).
Here&amp;#8217;s how these extra features could be&amp;nbsp;implemented:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TimeDelayMiddleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;get_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_response&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;REQUEST_TIME_DELAY&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/api/&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above will add the delay only to requests whose path contains &lt;tt class="docutils literal"&gt;'/api'&lt;/tt&gt;. Another case is if you want to
only add the delay for &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;POST&lt;/span&gt;&lt;/tt&gt; requests by checking that &lt;tt class="docutils literal"&gt;request.method == '&lt;span class="caps"&gt;POST&lt;/span&gt;'&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Now, to install this middleware, you can configure your &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;MIDDLEWARE&lt;/span&gt;&lt;/tt&gt; like this in your &lt;tt class="docutils literal"&gt;settings.py&lt;/tt&gt;
(let&amp;#8217;s say that you have an application named &lt;tt class="docutils literal"&gt;core&lt;/tt&gt; containing a module named &lt;tt class="docutils literal"&gt;middleware&lt;/tt&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;MIDDLEWARE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.middleware.security.SecurityMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.sessions.middleware.SessionMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.middleware.common.CommonMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.middleware.csrf.CsrfViewMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.auth.middleware.AuthenticationMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.messages.middleware.MessageMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.middleware.clickjacking.XFrameOptionsMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="s1"&gt;&amp;#39;core.middleware.TimeDelayMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The other middleware are the default ones in Django. One more thing to consider is that if
you have a single settings.py this middleware will be called; one way to override the delay
is to check for settings.&lt;span class="caps"&gt;DEBUG&lt;/span&gt; and only call &lt;tt class="docutils literal"&gt;time.sleep&lt;/tt&gt; when &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;DEBUG&lt;/span&gt; == True&lt;/tt&gt;. However,
the proper way to do it is to have different settings for your development and production
environments and add the &lt;tt class="docutils literal"&gt;TimeDelayMiddleware&lt;/tt&gt; only to your development &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;MIDDLEWARE&lt;/span&gt;&lt;/tt&gt; list.
Having different settings for each development is a &lt;a class="reference external" href="https://medium.com/&amp;#64;ayarshabeer/django-best-practice-settings-file-for-multiple-environments-6d71c6966ee2"&gt;common practice in Django&lt;/a&gt; and I totally
recommend to use&amp;nbsp;it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="using-cbvs"&gt;
&lt;h2&gt;Using&amp;nbsp;CBVs&lt;/h2&gt;
&lt;p&gt;Another method to add a delay to the execution of a view is to implement a TimeDelayMixin and inherit
your Class Based View from it. As we&amp;#8217;ve seen in the &lt;a class="reference external" href="https://spapas.github.io/2018/03/19/comprehensive-django-cbv-guide/"&gt;&lt;span class="caps"&gt;CBV&lt;/span&gt; guide&lt;/a&gt;, the &lt;tt class="docutils literal"&gt;dispatch&lt;/tt&gt; method is the one
that is always called when your &lt;span class="caps"&gt;CBV&lt;/span&gt; is rendered, thus your &lt;tt class="docutils literal"&gt;TimeDelayMixin&lt;/tt&gt; could be implemented like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TimeDelayMixin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is very simple (and you can use similar techniques as described for the middleware above to configure
the delay time or add the delay only when &lt;tt class="docutils literal"&gt;settings.&lt;span class="caps"&gt;DEBUG&lt;/span&gt; == True&lt;/tt&gt; etc) - to actually use it, just inherit your
view from this mixin,&amp;nbsp;f.e:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DelayedSampleListView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TimeDelayMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ListView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Sample&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now whenever you call your &lt;tt class="docutils literal"&gt;DelayedSampleListView&lt;/tt&gt; you&amp;#8217;ll see it after the configured&amp;nbsp;delay!&lt;/p&gt;
&lt;p&gt;What is really interesting is that the &lt;tt class="docutils literal"&gt;dispatch&lt;/tt&gt; method actually exists (and has the same functionality) also
in Django Rest Framework CBVs, thus using the same mixin you can add the delay not only your normal CBVs but
also your &lt;span class="caps"&gt;DRF&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;&amp;nbsp;views!&lt;/p&gt;
&lt;/div&gt;
</content><category term="django"></category><category term="python"></category><category term="django"></category><category term="cbv"></category><category term="middleware"></category><category term="class-based-views"></category></entry><entry><title>Easy immutable objects inÂ Javascript</title><link href="https://www.spapas.net/2018/04/05/easy-immutable-objects/" rel="alternate"></link><published>2018-04-05T12:20:00+03:00</published><updated>2018-04-05T12:20:00+03:00</updated><author><name>Serafeim Papastefanos</name></author><id>tag:www.spapas.net,2018-04-05:/2018/04/05/easy-immutable-objects/</id><summary type="html">&lt;p class="first last"&gt;How to avoid mutations in your objects and a poor man&amp;#8217;s&amp;nbsp;lens!&lt;/p&gt;
</summary><content type="html">&lt;p&gt;With the rise of &lt;a class="reference external" href="https://redux.js.org"&gt;Redux&lt;/a&gt; and other similar Javascript frameworks (e.g &lt;a class="reference external" href="https://hyperapp.js.org"&gt;Hyperapp&lt;/a&gt;) that
try to be a little more &lt;em&gt;functional&lt;/em&gt; (functional as in functional programming), a
new problem was introduced to Javascript programmers (at least to those that weren&amp;#8217;t
familair with functional programming): How to keep their application&amp;#8217;s
state&amp;nbsp;&amp;#8220;immutable&amp;#8221;.&lt;/p&gt;
&lt;p&gt;Immutable means that the state should be an object that does not change (mutates) - instead
of changing it, Redux needs the state object to be &lt;a class="reference external" href="https://redux.js.org/basics/reducers"&gt;created from the beginning&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So when something happens in your application you need to discard
the existing state object and create a new one from scratch by modifying and copying the previous state values.
This is easy
in most toy-apps that are used when introducing the concept, for example if your state is &lt;tt class="docutils literal"&gt;{counter: 0}&lt;/tt&gt;
then you could just define the reducer for the &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;ADD&lt;/span&gt;&lt;/tt&gt; action (i.e when the user clicks the &lt;tt class="docutils literal"&gt;+&lt;/tt&gt; button) like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;reducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ADD&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;counter&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unfortunately, your application will definitely have a much more complex state than&amp;nbsp;this!&lt;/p&gt;
&lt;p&gt;In the following, I&amp;#8217;ll do a quick introduction on how to keep your state objects immutable
using modern Javascript techniques, I&amp;#8217;ll present how complex it is to modify non-trivial
immutable objects and finally I&amp;#8217;ll give you a quick recipe for modifying your non-trivial
immutable objects. If you want to play with the concepts I&amp;#8217;ll introduce you can do it at a
&lt;a class="reference external" href="https://repl.it/&amp;#64;spapas/JS-Drill-Down-objectarray-immutable"&gt;playground I&amp;#8217;ve created on repl.it&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Please keep in mind that this article has been written for &lt;span class="caps"&gt;ES6&lt;/span&gt; - take a look at my
&lt;a class="reference external" href="https://spapas.github.io/2015/11/16/using-browserify-es6/"&gt;browserify with &lt;span class="caps"&gt;ES6&lt;/span&gt;&lt;/a&gt; article to see how you can also use it in your projects with&amp;nbsp;Browserify.&lt;/p&gt;
&lt;p&gt;Also, if you&amp;#8217;d like to see a non-toy React + Redux application or you&amp;#8217;d like a gentle
introduction to the concepts I talked about (state, reducers, actions etc)
you can follow along my &lt;a class="reference external" href="https://spapas.github.io/2016/03/02/react-redux-tutorial/"&gt;React Redux tutorial&lt;/a&gt;. This is a rather old article
(considering how quickly the Javascript framework state change) but the basic concepts
introduced there are true&amp;nbsp;today.&lt;/p&gt;
&lt;div class="section" id="immutable-objects"&gt;
&lt;h2&gt;Immutable&amp;nbsp;objects&lt;/h2&gt;
&lt;p&gt;Let&amp;#8217;s start our descent into avoiding mutations by supposing that you had
something a little more complex than the initial example, for example your state was like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;counter&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;John&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you continued the same example then your &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;ADD&lt;/span&gt;&lt;/tt&gt; reducer would need to return something like&amp;nbsp;this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;counter&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This gets difficult and error prone very soon - and what happens if you later need to add another attribute to your&amp;nbsp;state?&lt;/p&gt;
&lt;p&gt;The correct way to implement this would be to enumerate all properties of state except &amp;#8216;counter&amp;#8217;, copy them to a new
object, and then assign counter+1 to the new object&amp;#8217;s counter attribute. You could implement this by hand however,
thankfully, there&amp;#8217;s the &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign"&gt;Object.assign&lt;/a&gt; method! This method will copy all attributes from a list of objects
to an object which will return as a result and is defined like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;sources&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;target&lt;/tt&gt; parameter is the object that will retrieve all attributes from &lt;tt class="docutils literal"&gt;sources&lt;/tt&gt; (which is a variadic argument - you can
have as many sources as you want - even 0; in this case the target will be returned). For a quick example,&amp;nbsp;running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;oo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;oo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="nx"&gt;oo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;will return &lt;tt class="docutils literal"&gt;{ a: 1, b: 2, c: 3 } true&lt;/tt&gt; i.e the attributes &amp;#8216;b&amp;#8217; and &amp;#8216;c&amp;#8217; were copied to &lt;tt class="docutils literal"&gt;o&lt;/tt&gt; and it was assigned to &lt;tt class="docutils literal"&gt;oo&lt;/tt&gt; &amp;#8212; notice
that o and oo are the same object (thus &lt;tt class="docutils literal"&gt;o&lt;/tt&gt; is modified now). Also, notice that the the attributes of objects to the right
have priority over the attributes of the objects to the left (&lt;tt class="docutils literal"&gt;'c': 1&lt;/tt&gt; was overriden by &lt;tt class="docutils literal"&gt;'c': 3&lt;/tt&gt;).&lt;/p&gt;
&lt;p&gt;As you should have guessed by now, you should never pass the
state as the &lt;tt class="docutils literal"&gt;target&lt;/tt&gt; but instead you should create a new object, thus the &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;ADD&lt;/span&gt;&lt;/tt&gt; reducer should return the&amp;nbsp;following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;counter&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This means that it will create a new object which will copy all current attributes of state and increase the existing
&lt;tt class="docutils literal"&gt;counter&lt;/tt&gt; attribute.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;d like to also add here that instead of using the &lt;tt class="docutils literal"&gt;Object.assign&lt;/tt&gt; method you could use the &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax"&gt;spread syntax&lt;/a&gt;
to more or less do the same. The spread syntax on an object takes this object&amp;#8217;s attributes and outputs them as key-value
dictionary pairs (for them to be used to initialize other objects). Thus, you can use the spread syntax to create an new object that has the same attributes
of another object like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// which is similar to&lt;/span&gt;
&lt;span class="nx"&gt;newState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Of course you usually need to override some attributes, which can be passed directly to the newly created object,
for example for the &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;ADD&lt;/span&gt;&lt;/tt&gt; reducer:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;counter&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Like &lt;tt class="docutils literal"&gt;Object.assign&lt;/tt&gt;, you can have as many sources as you want in your spread syntax thus nothing stops you from using &lt;tt class="docutils literal"&gt;...&lt;/tt&gt; multiple times to copy the attributes of multiple objects
for example you could define &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;ADD&lt;/span&gt;&lt;/tt&gt; like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;counter&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The order is similar to Object.assign, i.e the attributes that follow will override the previous&amp;nbsp;ones.&lt;/p&gt;
&lt;p&gt;One final comment is that both &lt;tt class="docutils literal"&gt;Object.assign&lt;/tt&gt; and copying objects with the spread syntax will do a &amp;#8220;shallow&amp;#8221;
copy i.e it will copy only the outer object, not the objects its keys refer to. An example of this behavior is that
if you run the&amp;nbsp;following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;val&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;val2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;val2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;val&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;33&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;you&amp;#8217;ll&amp;nbsp;get:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;33&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;val2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;33&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;val2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;i.e &lt;tt class="docutils literal"&gt;x&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;y&lt;/tt&gt; got a different &lt;tt class="docutils literal"&gt;val2&lt;/tt&gt; attribute since they not the same object, however both &lt;tt class="docutils literal"&gt;x&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;y&lt;/tt&gt;
have a reference to the &lt;em&gt;same&lt;/em&gt; &lt;tt class="docutils literal"&gt;a&lt;/tt&gt; thus when it&amp;#8217;s &lt;tt class="docutils literal"&gt;val&lt;/tt&gt; attribute was changed this change appears to both &lt;tt class="docutils literal"&gt;x&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;y&lt;/tt&gt;!&lt;/p&gt;
&lt;p&gt;What the above means is that if you have a state object containing
other objects (or arrays) you will also need to copy these children
objects to keep your state immutable. We&amp;#8217;ll see examples on this&amp;nbsp;later.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="immutable-arrays"&gt;
&lt;h2&gt;Immutable&amp;nbsp;arrays&lt;/h2&gt;
&lt;p&gt;One thing we haven&amp;#8217;t talked about yet is what happens if there&amp;#8217;s an array in the state, for example your state is
&lt;tt class="docutils literal"&gt;let &lt;span class="pre"&gt;state=[]&lt;/span&gt;&lt;/tt&gt; and you have and &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;APPEND&lt;/span&gt;&lt;/tt&gt; reducer that puts something in the end of that array. The naive (and wrong)
way to do it is to call &lt;tt class="docutils literal"&gt;push&lt;/tt&gt; directly to the state - this will mutate your state and is not be&amp;nbsp;allowed!&lt;/p&gt;
&lt;p&gt;You need to copy the array elements and the tool for this job is &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice"&gt;Array.slice&lt;/a&gt;. This methods takes two optional arguments (&lt;tt class="docutils literal"&gt;begin&lt;/tt&gt;
and &lt;tt class="docutils literal"&gt;end&lt;/tt&gt;) that define the range of elements that will be copied; if you call it without arguments then it will copy
the whole array. Using slice, your &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;APPEND&lt;/span&gt;&lt;/tt&gt; reducer can be like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;newState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;new element&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;newState&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Also, you could use the &lt;cite&gt;Array.concat&lt;/cite&gt; method which will return a new array by copying all the elements of its&amp;nbsp;arguments&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;new element&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will append &lt;tt class="docutils literal"&gt;new element&lt;/tt&gt; to a new object that will have the elements of state (it won&amp;#8217;t modify the
existing state) and is easier if you have this exact requirement. The advantage of slice is that you can
use it to add/remove/modify elements from any place in the original array. For example, here&amp;#8217;s how you can
add an element after the first element of an&amp;nbsp;array:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;second&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now &lt;tt class="docutils literal"&gt;y&lt;/tt&gt; will be equal to &lt;tt class="docutils literal"&gt;[ 'a', 'second', 'b', 'c' ]&lt;/tt&gt;. So the above will get the first (0-th) element from the &lt;tt class="docutils literal"&gt;x&lt;/tt&gt;
array and concat it with another element (&lt;tt class="docutils literal"&gt;second&lt;/tt&gt;) and the remaining elements of &lt;tt class="docutils literal"&gt;x&lt;/tt&gt;. Remember that &lt;tt class="docutils literal"&gt;x&lt;/tt&gt; is not
modifyied since &lt;tt class="docutils literal"&gt;concat&lt;/tt&gt; will create a new&amp;nbsp;array.&lt;/p&gt;
&lt;p&gt;In a similar fashion to objects, instead of using concat it is much easier to use the spread syntax. The spread syntax for
an array will output its elements one after the other for them to be used by other arrays. Thus, continuing from the
previous example, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[...x]&lt;/span&gt;&lt;/tt&gt; will return a new array with the elements of &lt;tt class="docutils literal"&gt;x&lt;/tt&gt; (so it is similar to &lt;tt class="docutils literal"&gt;x.slice()&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;x.concat()&lt;/tt&gt;),
thus to re-generate the previous example you&amp;#8217;ll do something&amp;nbsp;like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;second&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All three of concat, slice or the spread syntax will do a shallow copy (similar to how Object.assign works) so the same
conclusions from the previous section are true here: If you have arrays inside other arrays (or objects) you&amp;#8217;ll need to copy the inner
arrays&amp;nbsp;recursively.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="more-complex-cases"&gt;
&lt;h2&gt;More complex&amp;nbsp;cases&lt;/h2&gt;
&lt;p&gt;We&amp;#8217;ll now take a look at some more complex cases and see how quickly it gets difficult because of the shallow copying.
Let&amp;#8217;s suppose that our state is the&amp;nbsp;following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;first_name&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;John&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;last_name&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Doe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;address&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s1"&gt;&amp;#39;city&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Athens&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s1"&gt;&amp;#39;country&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Greece&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s1"&gt;&amp;#39;zip&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;12345&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and we want to assign a &lt;tt class="docutils literal"&gt;group&lt;/tt&gt; attribute to the state. This can be easily done with &lt;tt class="docutils literal"&gt;assign&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;groups&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;group1&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;}]&lt;/span&gt;

&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;groups&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;groups&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or&amp;nbsp;spread:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;groups&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;groups&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that instead of &lt;tt class="docutils literal"&gt;'groups': groups&lt;/tt&gt; I could have used the &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#Syntax"&gt;shorthand syntax&lt;/a&gt; and written only &lt;tt class="docutils literal"&gt;groups&lt;/tt&gt; and it would still work
(i.e &lt;tt class="docutils literal"&gt;state = &lt;span class="pre"&gt;{...state,&lt;/span&gt; groups}&lt;/tt&gt; is the same). In all cases, the resulting state will&amp;nbsp;be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;first_name&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;John&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;last_name&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Doe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;address&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s1"&gt;&amp;#39;city&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Athens&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s1"&gt;&amp;#39;country&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Greece&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s1"&gt;&amp;#39;zip&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;12345&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;groups&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;group1&amp;#39;&lt;/span&gt;
  &lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From now on I&amp;#8217;ll only use the spread syntax which is more&amp;nbsp;compact.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s try to change the user&amp;#8217;s name. This is not as easy as the first example because we need&amp;nbsp;to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Create a new copy of the &lt;tt class="docutils literal"&gt;user&lt;/tt&gt; object with the new first&amp;nbsp;name&lt;/li&gt;
&lt;li&gt;Create a new copy of the &lt;tt class="docutils literal"&gt;state&lt;/tt&gt; object with the new user object created&amp;nbsp;above&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This can be done in two steps like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;first_name&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Jack&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or in one step like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;first_name&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Jack&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The single step assignment is the combination of the two step described above. It is a little more complex
but it saves typing and is prefered because it allows the reducer function to have a single expression. Now
let&amp;#8217;s try to modify the user&amp;#8217;s zip code. We&amp;#8217;ll do it in three steps&amp;nbsp;first:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;address&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;zip&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;54321&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And now in&amp;nbsp;one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;address&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;address&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;zip&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;54321&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, as can be seen in the above examples, modifying (without mutating) a compex state object
is not very easy - it needs much thinking and is too error prone! This will be even more
apparent when we also get the array modifications into the equation, for example by adding another
two&amp;nbsp;groups:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;groups&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;groups&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;group2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;group3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above copies the existing state and assigns to it a new &lt;tt class="docutils literal"&gt;groups&lt;/tt&gt; object by copying
the existing groups and appending two more groups to that array! The state now will&amp;nbsp;be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;first_name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Jack&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;last_name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Doe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;city&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Athens&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;country&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Greece&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;zip&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;54321&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;groups&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;group1&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;group2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;group3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As a final examply, how can we add the missing &lt;tt class="docutils literal"&gt;id&lt;/tt&gt; attribute to the first group?
Following the above&amp;nbsp;techniques:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;groups&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;groups&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;groups&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One more time what the above&amp;nbsp;does?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Creates a new object and copies all existing properties of state to&amp;nbsp;it&lt;/li&gt;
&lt;li&gt;Creates a new array which assigns it to the new state&amp;#8217;s &lt;tt class="docutils literal"&gt;groups&lt;/tt&gt; attribute&lt;/li&gt;
&lt;li&gt;For the first element of that array it copies all attributes of the first element of state[&amp;#8216;groups&amp;#8217;] and assings it an &lt;tt class="docutils literal"&gt;id=1&lt;/tt&gt; attribute&lt;/li&gt;
&lt;li&gt;For the remaining elements of that array it copies all elements of state[&amp;#8216;groups] after the first&amp;nbsp;one&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now think what would happen if we had an even more complex state with 3 or 4 nested&amp;nbsp;levels!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="immutability-s-little-helpers"&gt;
&lt;h2&gt;Immutability&amp;#8217;s little&amp;nbsp;helpers&lt;/h2&gt;
&lt;p&gt;As you&amp;#8217;ve seen from the previous examples, using immutable objects is not as easy as seems from
the toy examples. Actually, drilling down into complex immutable
objects and returning new ones that have
some values changed  is a well-known problem in the functional world and has already a solution
called &amp;#8220;lenses&amp;#8221;. This is a funny name but it more or less means that you use a magnifying lens to look at
exactly the value you want and modify or retrieve it. The problem with lenses is that although they solve
the problem I mention is that if you want to use them you&amp;#8217;ll need to dive deep into functional
programming and also you&amp;#8217;ll need to include an extra library to your project (even if you only
want this specific&amp;nbsp;capability).&lt;/p&gt;
&lt;p&gt;For completeness, here&amp;#8217;s the &lt;a class="reference external" href="http://ramdajs.com/docs/#lens"&gt;the docs on lens&lt;/a&gt; from &lt;a class="reference external" href="http://ramdajs.com"&gt;Ramda&lt;/a&gt; which is a well known Javascript functional library.
This needs you to understand what is &lt;tt class="docutils literal"&gt;prop&lt;/tt&gt;, what is &lt;tt class="docutils literal"&gt;assoc&lt;/tt&gt; and then how to use the lens with &lt;tt class="docutils literal"&gt;view&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;set&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;over&lt;/tt&gt;. For me, these are way too much things to remember for such a specific thing. Also, notice
that the minified version of Ramda is around 45 kb which is not small. Yes, if I wanted
to fully use Ramda or a similar library I&amp;#8217;d be delighted to use all these techniques and include it as a
dependency - however most people prefer to stick with more familiar (and more procedural)&amp;nbsp;concepts.&lt;/p&gt;
&lt;p&gt;The helpers I&amp;#8217;m going to present here are more or less a poor man&amp;#8217;s lens, i.e you will be able to use the basic
functionality of a lens&amp;nbsp;but&amp;#8230;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;without the peculiar syntax&amp;nbsp;and&lt;/li&gt;
&lt;li&gt;without the need to learn more functional concepts than what you&amp;#8217;ll want&amp;nbsp;and&lt;/li&gt;
&lt;li&gt;without the need to include any more external&amp;nbsp;dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pretty good deal,&amp;nbsp;no?&lt;/p&gt;
&lt;p&gt;In any case, a lens has two parts, a get and a set. The get will be used to drill down and retrieve a value from a
complex object while the set will be used to drill down and assign a value to a complex object. The set does not
modify the object but returns a new one. The get lens is not really needed since you can easily drill down to an
object using the good old index syntax but I&amp;#8217;ll include it here for&amp;nbsp;completenes.&lt;/p&gt;
&lt;p&gt;We&amp;#8217;ll start with the get which seems easier. For this, I&amp;#8217;ll just create a function that will take an object and
a path inside that object as parameter and retrieve the value at that path. The path could be either a string of the form
&amp;#8216;a.0.c.d&amp;#8217; or an array [&amp;#8216;a&amp;#8217;, &amp;#8216;0&amp;#8217;, &amp;#8216;c&amp;#8217;, &amp;#8216;d&amp;#8217;] - for numerical indeces we&amp;#8217;ll consider an array at that&amp;nbsp;point.&lt;/p&gt;
&lt;p&gt;Thus, for the object &lt;tt class="docutils literal"&gt;{'a': &lt;span class="pre"&gt;[{'b':&lt;/span&gt; {'c': {'d': 32} &lt;span class="pre"&gt;}}]}&lt;/span&gt;&lt;/tt&gt; when the lens getter is called with either
&lt;tt class="docutils literal"&gt;'a.0.b.c'&lt;/tt&gt; or [&amp;#8216;a&amp;#8217;, 0, &amp;#8216;b&amp;#8217;, &amp;#8216;c&amp;#8217;] as the path, it should return &lt;tt class="docutils literal"&gt;{'d': 32}&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;To implement the get helper I will use a functional concept, &lt;tt class="docutils literal"&gt;reduce&lt;/tt&gt;. I&amp;#8217;ve already explained this concept
in my &lt;a class="reference external" href="https://spapas.github.io/2016/03/02/react-redux-tutorial/#interlude-so-what-s-a-reducer"&gt;previous react-redux tutorial&lt;/a&gt; so I urge you to read that article for more info. Using reduce we
can apply one by one accumulatively the members of the path to the initial object and the result will be
the value of that path. Here&amp;#8217;s the implementation of &lt;tt class="docutils literal"&gt;pget&lt;/tt&gt; (from property&amp;nbsp;get):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;objgetter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;string&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;
&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;objgetter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I have defined an objgetter reducer function that gets an accumulated object and the current
value of the path and just returns the &lt;tt class="docutils literal"&gt;currentValue&lt;/tt&gt; index of that accumulated object. Finally,
for the get lens (named &lt;tt class="docutils literal"&gt;pget&lt;/tt&gt;) I just check to see if the path is a string or an array (if it&amp;#8217;s
a string I split it on dots) and then I &amp;#8220;reduce&amp;#8221; the path using the objgetter defined above and
starting by the original object as the initial value. To understand how it is working, let&amp;#8217;s try calling it
for an&amp;nbsp;object:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;s1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}}]}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above &lt;tt class="docutils literal"&gt;pget&lt;/tt&gt; will call &lt;tt class="docutils literal"&gt;reduce&lt;/tt&gt; on the passed array using the defined &lt;tt class="docutils literal"&gt;objgetter&lt;/tt&gt; above
as the reducer function and &lt;tt class="docutils literal"&gt;s1&lt;/tt&gt; as the original object. So, the reducer function will be called with
the following values each&amp;nbsp;time:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="68%" /&gt;
&lt;col width="32%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;accumulator&lt;/th&gt;
&lt;th class="head"&gt;currentvalue&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;s1&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;'a'&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;s1['a']&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;0&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;s1['a'][0]&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;'b'&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;s1['a'][0]['b']&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;'c'&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;s1['a'][0]['b']['c']&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Thus the result will be exactly what we wanted &lt;tt class="docutils literal"&gt;{'d' :32}&lt;/tt&gt;. An interesting thing is that it&amp;#8217;s working
fine without the need to differentiate between arrays and objects because of how index access &lt;tt class="docutils literal"&gt;[]&lt;/tt&gt; works.&lt;/p&gt;
&lt;p&gt;Continuing for the set lens (which will be more difficult), I&amp;#8217;ll first represent a simple version that
works only with objects and an array path but displays the main idea of how this will work: It uses recursion i.e it will call itself to gradually build the new object. Here&amp;#8217;s how it is&amp;nbsp;implemented:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pset0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;remaining&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;pset0&lt;/span&gt;&lt;span class="p"&gt;(...[&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt; &lt;span class="nx"&gt;remaining&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As already explained, I have assumed that the path is an array of indeces and that the &lt;tt class="docutils literal"&gt;obj&lt;/tt&gt; is a complex object
(no arrays in it please); the function returns a new object with the old object&amp;#8217;s value at the path be replaced
with &lt;tt class="docutils literal"&gt;val&lt;/tt&gt;. This function checks to see if the path has only one element, if yes it will assign the value to that
attribute of the object it retrieve. If not, it will call itself recursively by skipping the current index and assign the return value to the
current index of the curent object. Let&amp;#8217;s see how it works for the following&amp;nbsp;call:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;s2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;b0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;c0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}}}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pset0&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="7%" /&gt;
&lt;col width="34%" /&gt;
&lt;col width="59%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;# Call&lt;/th&gt;
&lt;th class="head"&gt;Call parameters&lt;/th&gt;
&lt;th class="head"&gt;Return&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;pset0(s2, [&amp;#8216;a&amp;#8217;, &amp;#8216;b&amp;#8217;, &amp;#8216;c&amp;#8217;], 4)&lt;/td&gt;
&lt;td&gt;{&amp;#8230;s2, [&amp;#8216;b&amp;#8217;]: pset0(s2[&amp;#8216;a&amp;#8217;], [&amp;#8216;b&amp;#8217;, &amp;#8216;c&amp;#8217;], 4) }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;pset0(s2[&amp;#8216;a&amp;#8217;], [&amp;#8216;b&amp;#8217;, &amp;#8216;c&amp;#8217;], 4)&lt;/td&gt;
&lt;td&gt;{&amp;#8230;s2[&amp;#8216;a&amp;#8217;], [&amp;#8216;c&amp;#8217;]: pset0(s2[&amp;#8216;a&amp;#8217;][&amp;#8216;b&amp;#8217;], [&amp;#8216;c&amp;#8217;], 4) }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;pset0(s2[&amp;#8216;a&amp;#8217;][&amp;#8216;b&amp;#8217;], [&amp;#8216;c&amp;#8217;], 4)&lt;/td&gt;
&lt;td&gt;{&amp;#8230;s2[&amp;#8216;a&amp;#8217;][&amp;#8216;b&amp;#8217;], [&amp;#8216;c&amp;#8217;]: 4}&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Thus, the first time it will be called it will return a new object with the attributes of &lt;tt class="docutils literal"&gt;s2&lt;/tt&gt;
but overriding its &lt;tt class="docutils literal"&gt;'b'&lt;/tt&gt; index with the return of the second call. The second call will return
a new object with the attributes of &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;s2['a']&lt;/span&gt;&lt;/tt&gt; but override it&amp;#8217;s &lt;tt class="docutils literal"&gt;'c'&lt;/tt&gt; index with the return
of the third call. Finally, the 3rd call will return an object with the attributes of &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;s2['a']['b']&lt;/span&gt;&lt;/tt&gt;
and setting the &lt;tt class="docutils literal"&gt;'c'&lt;/tt&gt; index to &lt;tt class="docutils literal"&gt;4&lt;/tt&gt;. The result will be as expected equal&amp;nbsp;to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;b0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;c0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;}}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that we&amp;#8217;ve understood the logic we can extend the above function with the following&amp;nbsp;extras:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;support for arrays in the object using numerical&amp;nbsp;indeces&lt;/li&gt;
&lt;li&gt;support for array (&lt;tt class="docutils literal"&gt;['a', 'b']&lt;/tt&gt;) or string path (&lt;tt class="docutils literal"&gt;'a.b'&lt;/tt&gt;)&amp;nbsp;parameter&lt;/li&gt;
&lt;li&gt;support for a direct value to set on the path or a function that will be applied on that&amp;nbsp;value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&amp;#8217;s the resulting set&amp;nbsp;lens:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;parts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;string&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;
  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cidx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;function&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;newval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;cidx&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cidx&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;newval&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cidx&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;cidx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;newval&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;pidx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;cset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pidx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;remaining&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;cset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pidx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;pidx&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;remaining&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It may seem a little complex but I think it&amp;#8217;s easy to be understood: The parts in the beginning
will just check to see if the path is an array or a string and split the string to its parts.
The &lt;tt class="docutils literal"&gt;cset&lt;/tt&gt; function that follows is a local function that is used to make the copy of the object
or array and set the new value. Here&amp;#8217;s how it is working: It will first check to see if the &lt;tt class="docutils literal"&gt;val&lt;/tt&gt;
parameter is a function or a not. If it is a function it will apply this function to the object&amp;#8217;s index
to get the &lt;tt class="docutils literal"&gt;newvalue&lt;/tt&gt; else it will just use &lt;tt class="docutils literal"&gt;val&lt;/tt&gt; as the &lt;tt class="docutils literal"&gt;newvalue&lt;/tt&gt;. After that it checks if the
object it got is an array or not. If it is an array it will do the slice trick we saw before to copy
the elements of the array except the &lt;tt class="docutils literal"&gt;newval&lt;/tt&gt; which will put it at the index (notice that the index
at that point must be numerical but that&amp;#8217;s up to you to assert). If the current &lt;tt class="docutils literal"&gt;obj&lt;/tt&gt; is not an array
then it must be an object thus it uses the spread syntax to copy the object&amp;#8217;s attributes and reassign
the current index to &lt;tt class="docutils literal"&gt;newval&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The last part of &lt;tt class="docutils literal"&gt;pset&lt;/tt&gt; is similar to the &lt;tt class="docutils literal"&gt;pset0&lt;/tt&gt; it just uses &lt;tt class="docutils literal"&gt;cset&lt;/tt&gt; to do the new object/array
generation instead of doing it in place like &lt;tt class="docutils literal"&gt;pset0&lt;/tt&gt; - as already explained, &lt;tt class="docutils literal"&gt;pset&lt;/tt&gt; is called recursively
until only one element remains on the path in which case the &lt;tt class="docutils literal"&gt;newval&lt;/tt&gt; will be assigned to the current index of
the current &lt;tt class="docutils literal"&gt;obj&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s try to use &lt;tt class="docutils literal"&gt;pset&lt;/tt&gt; for the following rather complex&amp;nbsp;state:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;state2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;users&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;results&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Sera&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;groups&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;g1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;g2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;g3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;John&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;groups&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;g1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;g2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;g3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Joe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;groups&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]}&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;pagination&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s1"&gt;&amp;#39;total&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s1"&gt;&amp;#39;perpage&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s1"&gt;&amp;#39;number&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;groups&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;results&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;total&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;#8217;s call it three times one after the other to change various&amp;nbsp;attributes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;new_state2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;pset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;pset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nx"&gt;pset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;users.results.2.groups.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;aa&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;users.results.0.name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;users.total&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;users.results.1.name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Jack&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And here&amp;#8217;s the&amp;nbsp;result:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;users&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;results&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;SERA&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;groups&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;g1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;g2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;g3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Jack&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;groups&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;g1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;g2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;g3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Joe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;groups&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;aa&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}],&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;pagination&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;total&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;perpage&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;number&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;groups&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;results&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;total&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This should be self&amp;nbsp;explanatory.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve published the above immutable little helpers as an npm package: &lt;a class="reference external" href="https://www.npmjs.com/package/poor-man-lens"&gt;https://www.npmjs.com/package/poor-man-lens&lt;/a&gt; (yes I
decided to use the poor man lens name instead of the immutable little helpers) - they are too simple and could be easily
copied and pasted to your project but I&amp;#8217;ve seen even smaller npm packages and I wanted to try to see if it is easy to
publish a package to npm (answer: it is very easy - easier than python&amp;#8217;s pip). Also there&amp;#8217;s a github repository for
these utils in case somebody wants to contribute anything or look at the source: &lt;a class="reference external" href="https://github.com/spapas/poor-man-lens"&gt;https://github.com/spapas/poor-man-lens&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Notice that this package has been written in &lt;span class="caps"&gt;ES5&lt;/span&gt; (and actually has a polyfil for Object.assign) thus you should probably
be able to use it anywhere you want, even directly from the browser by directly including the &lt;tt class="docutils literal"&gt;pml.js&lt;/tt&gt; file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Using the above techniques you should be able to easily keep your state objects immutable. For simple cases you
can stick to the spread syntax or Object.assign / Array.slice but for more complex cases you may want to consider
either copying directly the pset and pget utils I explained above or just using the &lt;a class="reference external" href="https://www.npmjs.com/package/poor-man-lens"&gt;poor-man-lens npm package&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="javascript"></category><category term="javascript"></category><category term="react"></category><category term="redux"></category><category term="hyperapp"></category><category term="immutable"></category><category term="es6"></category></entry><entry><title>A comprehensive Django CBVÂ guide</title><link href="https://www.spapas.net/2018/03/19/comprehensive-django-cbv-guide/" rel="alternate"></link><published>2018-03-19T12:20:00+02:00</published><updated>2018-03-19T12:20:00+02:00</updated><author><name>Serafeim Papastefanos</name></author><id>tag:www.spapas.net,2018-03-19:/2018/03/19/comprehensive-django-cbv-guide/</id><summary type="html">&lt;p class="first last"&gt;A comprehensive guide to Django CBVs - from neophyte to more&amp;nbsp;advanced&lt;/p&gt;
</summary><content type="html">&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#a-gentle-introduction-to-cbvs" id="id1"&gt;A gentle introduction to CBVs&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#hand-made-cbvs" id="id2"&gt;Hand-made&amp;nbsp;CBVs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#is-this-really-dry" id="id3"&gt;Is this really &lt;span class="caps"&gt;DRY&lt;/span&gt;&amp;nbsp;?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#re-using-view-functionality" id="id4"&gt;Re-using view&amp;nbsp;functionality&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#interlude-an-mro-primer" id="id5"&gt;Interlude: An &lt;span class="caps"&gt;MRO&lt;/span&gt;&amp;nbsp;primer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#using-mixins-for-code-reuse" id="id6"&gt;Using mixins for&amp;nbsp;code-reuse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-super-situation" id="id7"&gt;The super&amp;nbsp;situation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#using-super-in-our-hierarchy" id="id8"&gt;Using super in our&amp;nbsp;hierarchy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#testing-all-this" id="id9"&gt;Testing all&amp;nbsp;this&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#a-high-level-overview-of-cbvs" id="id10"&gt;A high level overview of CBVs&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#taking-a-look-at-the-view" id="id11"&gt;Taking a look at the&amp;nbsp;View&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#redirectview-and-templateview" id="id12"&gt;RedirectView and&amp;nbsp;TemplateView&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-formview" id="id13"&gt;The&amp;nbsp;FormView&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-listview-and-detailview" id="id14"&gt;The ListView and&amp;nbsp;DetailView&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-createview" id="id15"&gt;The&amp;nbsp;CreateView&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-updateview-and-deleteview" id="id16"&gt;The UpdateView and&amp;nbsp;DeleteView&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#access-control-mixins" id="id17"&gt;Access control&amp;nbsp;mixins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#some-other-cbvs" id="id18"&gt;Some other&amp;nbsp;CBVs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#real-world-use-cases" id="id19"&gt;Real world use cases&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#do-something-when-a-valid-form-is-submitted" id="id20"&gt;Do something when a valid form is&amp;nbsp;submitted&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#change-the-queryset-of-the-cbv" id="id21"&gt;Change the queryset of the &lt;span class="caps"&gt;CBV&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#allow-each-user-to-list-view-edit-delete-only-his-own-items" id="id22"&gt;Allow each user to list/view/edit/delete only his own&amp;nbsp;items&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#configure-the-form-s-initial-values-from-get-parameters" id="id23"&gt;Configure the form&amp;#8217;s initial values from &lt;span class="caps"&gt;GET&lt;/span&gt;&amp;nbsp;parameters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#pass-extra-kwargs-to-the-formview-form" id="id24"&gt;Pass extra kwargs to the FormView&amp;nbsp;form&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#add-values-to-the-context" id="id25"&gt;Add values to the&amp;nbsp;context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#add-a-simple-filter-to-a-listview" id="id26"&gt;Add a simple filter to a&amp;nbsp;ListView&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#support-for-success-messages" id="id27"&gt;Support for success&amp;nbsp;messages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#implement-a-quick-moderation" id="id28"&gt;Implement a quick&amp;nbsp;moderation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#allow-access-to-a-view-if-a-user-has-one-out-of-a-group-of-permissions" id="id29"&gt;Allow access to a view if a user has one out of a group of&amp;nbsp;permissions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#disable-a-view-based-on-some-condition" id="id30"&gt;Disable a view based on some&amp;nbsp;condition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#output-non-html-views" id="id31"&gt;Output non-html&amp;nbsp;views&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#use-one-templateview-for-multiple-html-templates" id="id32"&gt;Use one TemplateView for multiple html&amp;nbsp;templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#implement-a-partial-ajax-view" id="id33"&gt;Implement a partial Ajax&amp;nbsp;view&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#add-a-dynamic-filter-and-or-table-to-the-context" id="id34"&gt;Add a dynamic filter and/or table to the&amp;nbsp;context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#configure-forms-for-your-views" id="id35"&gt;Configure forms for your&amp;nbsp;views&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#display-a-different-form-for-create-and-update" id="id36"&gt;Display a different form for Create and&amp;nbsp;Update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#only-allow-specific-http-methods-for-a-view" id="id37"&gt;Only allow specific &lt;span class="caps"&gt;HTTP&lt;/span&gt; methods for a&amp;nbsp;view&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#create-an-umbrella-view-for-multiple-models" id="id38"&gt;Create an umbrella View for multiple&amp;nbsp;models&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#a-heavy-cbv-user-project" id="id39"&gt;A heavy &lt;span class="caps"&gt;CBV&lt;/span&gt; user&amp;nbsp;project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#conclusion" id="id40"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Class Based Views (&lt;span class="caps"&gt;CBV&lt;/span&gt;) is one of my favourite things about Django. During my
first Django projects (using Django 1.4 around 6 years ago) I was mainly using
functional views &amp;#8212; that&amp;#8217;s what the tutorial recommended then anyway. However,
slowly in my next projects I started reducing the amount of functional views
and embracing CBVs, slowly understanding their usage and usefulness. Right now,
I more or less only use CBVs for my views; even if sometimes it seems more work
to use a &lt;span class="caps"&gt;CBV&lt;/span&gt; instead of a functional one I know that sometime in the future I&amp;#8217;d
be glad that I did it since I&amp;#8217;ll want to re-use some view functionality and
CBVs are more or less the only way to have &lt;span class="caps"&gt;DRY&lt;/span&gt; views in&amp;nbsp;Django.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve heard various rants about them, mainly that they are too complex and difficult to
understand and use, however I believe that they are not really difficult when
you start from the basics. Even if it is a little work to become comfortable with
the &lt;span class="caps"&gt;CBV&lt;/span&gt; logic, when they are used properly they will greatly improve your Django experience
so it is definitely worth&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Notice
that to properly understand CBVs you must have a good understanding of how
Python&amp;#8217;s (multiple) inheritance and &lt;span class="caps"&gt;MRO&lt;/span&gt; work. Yes, this is a rather complex and
confusing thing but I&amp;#8217;ll try to also explain this as good as I can to the first chapter
of this article so if you follow along you shouldn&amp;#8217;t have any&amp;nbsp;problems.&lt;/p&gt;
&lt;p&gt;This guide has four&amp;nbsp;parts:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A gentle introduction to how CBVs are working and to the the problems that do solve. For this we&amp;#8217;ll implement
our own simple Custom Class Based View variant and take a look at python&amp;#8217;s inheritance&amp;nbsp;model.&lt;/li&gt;
&lt;li&gt;A high level overview of the real Django CBVs using &lt;a class="reference external" href="http://ccbv.co.uk`"&gt;&lt;span class="caps"&gt;CBV&lt;/span&gt; inspector&lt;/a&gt; as our&amp;nbsp;guide.&lt;/li&gt;
&lt;li&gt;A number of use cases where CBVs can be used to elegantly solve real world&amp;nbsp;problems&lt;/li&gt;
&lt;li&gt;Describing the usage of some of the previous use cases to a real Django&amp;nbsp;application&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;#8217;ve implemented an accompanying project to this article which you can find at &lt;a class="reference external" href="https://github.com/spapas/cbv-tutorial"&gt;https://github.com/spapas/cbv-tutorial&lt;/a&gt;.
This project has two separate parts. One that is the implementation of the Custom Class Based View variant
to see how it is working and the other is the application that contains the usage of the various &lt;span class="caps"&gt;CBV&lt;/span&gt; use&amp;nbsp;cases.&lt;/p&gt;
&lt;div class="section" id="a-gentle-introduction-to-cbvs"&gt;
&lt;h2&gt;A gentle introduction to&amp;nbsp;CBVs&lt;/h2&gt;
&lt;p&gt;In this part of the guide we&amp;#8217;ll do a gentle introduction to how CBVs work by implementing
our own class based views variant - along with it we&amp;#8217;ll introduce and try to understand
some concepts of  python (multiple) inheritance and how it applies to&amp;nbsp;CBVs.&lt;/p&gt;
&lt;p&gt;Before continuing, let&amp;#8217;s talk about the concept of the &amp;#8220;view&amp;#8221; in Django:
Django is considered an &lt;span class="caps"&gt;MVT&lt;/span&gt; (Model View Template) framework - the View as
conceived by Django is not the same as the &lt;span class="caps"&gt;MVC&lt;/span&gt;-View. A Django View is more or
less a way to define the data that the Template (which is cloased to the &lt;span class="caps"&gt;MVC&lt;/span&gt;-View)
will display, so the Django View (with the help of the Django Framework) is similar
to the &lt;span class="caps"&gt;MVC&lt;/span&gt;-Controller.&lt;/p&gt;
&lt;p&gt;In any case, traditionally a view in Django is a normal python function that takes a single parameter,
the &lt;a class="reference external" href="https://docs.djangoproject.com/en/1.11/ref/request-response/#django.http.HttpRequest"&gt;request&lt;/a&gt; object and must return a &lt;a class="reference external" href="https://docs.djangoproject.com/en/1.11/ref/request-response/#django.http.HttpResponse"&gt;response&lt;/a&gt; object (notice that if the
view uses request parameters for example the id of an object to be edited
they will also be passed to the function). The responsibility of the
view function is to properly parse the request parameters and construct the
response object - as can be understood there is a lot of work that need to be
done for each view (for example check if the method is &lt;span class="caps"&gt;GET&lt;/span&gt; or &lt;span class="caps"&gt;POST&lt;/span&gt;, if the user
has access to that page, retrieve objects from the database, crate a context dict
and pass it to the template to be rendered&amp;nbsp;etc).&lt;/p&gt;
&lt;p&gt;Now, since functional views are simple python functions it is &lt;em&gt;not&lt;/em&gt; easy to override,
reuse or extend their behaviour. There are more or less two methods for this: Use function
decorators or pass extra parameters when adding the view to your urls. I&amp;#8217;d like
to point out here that there&amp;#8217;s a third method for code-reuse: Extracting
functionality to common and re-usable functions or classes that will be called from the
functional views but this is not something specific to Django views but a general
concept of good programming style which you should follow&amp;nbsp;anyway.&lt;/p&gt;
&lt;p&gt;The first one uses &lt;a class="reference external" href="https://wiki.python.org/moin/PythonDecorators"&gt;python decorators&lt;/a&gt; to create a functional view that wraps the
initial one. The new view is called before the initial one, adds some functionality
(for example check if the current user has access, modify request parameters etc),
calls the initial one which will return a response object, modify the response if needed
and then return that. This is how &lt;a class="reference external" href="https://docs.djangoproject.com/en/2.0/topics/auth/default/#the-login-required-decorator"&gt;login_required&lt;/a&gt; works. Notice that by using
decorators you can change things before and after the original view runs but
you can&amp;#8217;t do anything about the way the original view&amp;nbsp;works.&lt;/p&gt;
&lt;p&gt;For the second one (adding extra view parameters) you must
write your function view in a way which allows it to be reused, for example instead
of hard-coding the template name allow it to be passed as a parameter or instead
of using a specific form class for a form make it configurable through a parameter. Then,
when you add this function to your urls you will pass different parameters
depending on how you want to configure your view. Using this method you can
override the original function behaviour however there&amp;#8217;s a limit to the number of
parameters you can allow your function views to have and notice that these
function views cannot be further overridden. The &lt;a class="reference external" href="https://docs.djangoproject.com/en/2.0/topics/auth/default/#django.contrib.auth.views.login"&gt;login&lt;/a&gt; authentication view (which
is now deprecated in favour of a &lt;span class="caps"&gt;CBV&lt;/span&gt; one)
is using this technique, for example you can pass it
the template name that will be used, a custom authentication form&amp;nbsp;etc.&lt;/p&gt;
&lt;p&gt;It should be obvious that both these methods have severe limitations and do not allow you to be as &lt;span class="caps"&gt;DRY&lt;/span&gt; as
you should be. When using the wrapped views you can&amp;#8217;t actually
change the functionality of the original view (since that original function needs
to be called) but only do things before and after calling it. Also, using the
parameters will lead to spaghetti code with multiple if / else conditions in order
to take into account the various cases that may arise. All the above lead to
very reduced re-usability and DRYness of functional views - usually the best thing
you can do is to gather the common things in external normal python functions (not view functions) that could be
re-used from other functional views as already&amp;nbsp;discussed.&lt;/p&gt;
&lt;p&gt;Class based views solve the above problem of non-&lt;span class="caps"&gt;DRY&lt;/span&gt;-ness by using the well known
concept of &lt;span class="caps"&gt;OO&lt;/span&gt; inheritance: The view is defined from a class which has methods
for implementing the view functionality - you inherit from that class and override
the parts you want so the inherited class based view will use the overridden methods instead
of the original ones. You can also create re-usable classes (mixins) that offer a specific
functionality to your class based view by implementing some of the methods of the
original class. Each one of your class based views can inherit its functionality from
multiple mixins thus allowing you to define a single class for each thing you need
and re-using it everywhere. Notice of course that this is possible only if the
CBVs are &lt;em&gt;properly implemented&lt;/em&gt; to allow overriding their functionality. We&amp;#8217;ll see
how this is possible in the next&amp;nbsp;section.&lt;/p&gt;
&lt;div class="section" id="hand-made-cbvs"&gt;
&lt;h3&gt;Hand-made&amp;nbsp;CBVs&lt;/h3&gt;
&lt;p&gt;To make things more clear we&amp;#8217;ll start implementing our own class based views hierarchy. Here&amp;#8217;s
a rather naive first&amp;nbsp;try:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomClassView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="nb"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;            &amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    &amp;lt;h1&amp;gt;{header}&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    {body}&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;            &amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;br /&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This class can be used to render a simple &lt;span class="caps"&gt;HTML&lt;/span&gt; template with a custom header and
a list of items in the body (named &lt;tt class="docutils literal"&gt;context&lt;/tt&gt;). There are two things to notice here: The &lt;tt class="docutils literal"&gt;__init__&lt;/tt&gt; method (which
will be called as the object&amp;#8217;s constructor) will assign all the keyword arguments (&lt;tt class="docutils literal"&gt;kwargs&lt;/tt&gt;) it receives
as instance attributes (for example &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;CustomClassView(header='hello')&lt;/span&gt;&lt;/tt&gt; will create
an instance with &lt;tt class="docutils literal"&gt;'hello'&lt;/tt&gt; as its &lt;tt class="docutils literal"&gt;header&lt;/tt&gt; attribute). The &lt;tt class="docutils literal"&gt;as_view&lt;/tt&gt; is a class method
(i.e it can be called directly on the &lt;em&gt;class&lt;/em&gt; without the need to instantiate an object
for example you can call &lt;tt class="docutils literal"&gt;CustomClassView.as_view()&lt;/tt&gt; ) that
defines and returns a traditional functional view (named &lt;tt class="docutils literal"&gt;view&lt;/tt&gt;) that will be used to
actually serve the view. The returned
functional view is very simple - it just instantiates a new instance (object)
of &lt;tt class="docutils literal"&gt;CustomClassView&lt;/tt&gt; passing
the &lt;tt class="docutils literal"&gt;kwargs&lt;/tt&gt; it got in the constructor and then returns a normal &lt;tt class="docutils literal"&gt;HttpResponse&lt;/tt&gt; with
the instance&amp;#8217;s &lt;tt class="docutils literal"&gt;render()&lt;/tt&gt; result. This &lt;tt class="docutils literal"&gt;render()&lt;/tt&gt; method will just output some html
using the instance&amp;#8217;s header and context to fill&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Notice that the instance of the &lt;tt class="docutils literal"&gt;CustomClassView&lt;/tt&gt; inside the &lt;tt class="docutils literal"&gt;as_view&lt;/tt&gt; class method
is not created using
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;CustomClassView(**kwargs)&lt;/span&gt;&lt;/tt&gt; but using &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;cls(**kwargs)&lt;/span&gt;&lt;/tt&gt; - &lt;tt class="docutils literal"&gt;cls&lt;/tt&gt; is the name of the
class that &lt;tt class="docutils literal"&gt;as_view&lt;/tt&gt; was called on and is actually passed as a parameter for
class methods (in a similar manner to how &lt;tt class="docutils literal"&gt;self&lt;/tt&gt; is passed to instance methods).
This is important to instantiate an object instance of the proper&amp;nbsp;class.&lt;/p&gt;
&lt;p&gt;For example, if you created a class that inherited from &lt;tt class="docutils literal"&gt;CustomClassView&lt;/tt&gt;
and called its &lt;tt class="docutils literal"&gt;as_view&lt;/tt&gt; method then when you use the &lt;tt class="docutils literal"&gt;cls&lt;/tt&gt; parameter to instantiate
the object it will correctly create an object of the &lt;em&gt;inherited&lt;/em&gt; class and not the &lt;em&gt;base&lt;/em&gt; one
(if on the other hand you had used &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;CustomClassView(**kwargs)&lt;/span&gt;&lt;/tt&gt; to instantiate the instance
then the &lt;tt class="docutils literal"&gt;as_view&lt;/tt&gt; method of the inheriting classes would instantiate instances of
&lt;tt class="docutils literal"&gt;CustomClassView&lt;/tt&gt; so inheritance wouldn&amp;#8217;t really&amp;nbsp;work!).&lt;/p&gt;
&lt;p&gt;To add the above class method in your urls, just use its &lt;tt class="docutils literal"&gt;as_view()&lt;/tt&gt; as you&amp;#8217;d
normally use a functional&amp;nbsp;view:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^ccv-empty/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CustomClassView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ccv-empty&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="c1"&gt;# ... other urls&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This doesn&amp;#8217;t actually render anything since both header and context are empty on
the created instance &amp;#8212; remember that &lt;tt class="docutils literal"&gt;as_view&lt;/tt&gt; returns a functional view that
instantiates a &lt;tt class="docutils literal"&gt;CustomClassView&lt;/tt&gt; object and returns an &lt;tt class="docutils literal"&gt;HttpResponse&lt;/tt&gt; filling it
with the object&amp;#8217;s &lt;tt class="docutils literal"&gt;render()&lt;/tt&gt; results. To add some output we can either
create another class that inherits from &lt;tt class="docutils literal"&gt;CustomClassView&lt;/tt&gt; or
initialize the attributes from the constructor of the class (using the kwargs functionality described&amp;nbsp;above).&lt;/p&gt;
&lt;p&gt;The inherited class can just override the values of the&amp;nbsp;attributes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InheritsCustomClassView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CustomClassView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hi&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;test2&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then just add the inherited class to your urls as&amp;nbsp;before:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^ccv-inherits/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InheritsCustomClassView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ccv-inherits&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;as_view()&lt;/tt&gt; method will create an instance of &lt;tt class="docutils literal"&gt;InheritsCustomClassView&lt;/tt&gt; that has
the values configured in the class as attributes and return
its &lt;tt class="docutils literal"&gt;render()&lt;/tt&gt; output as&amp;nbsp;response.&lt;/p&gt;
&lt;p&gt;The other way to configure the attributes of the class is to
pass them to the &lt;tt class="docutils literal"&gt;as_view&lt;/tt&gt; class method (which in turn will pass them to the instances
constructor which will set the attributes in the instance). Here&amp;#8217;s an&amp;nbsp;example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^ccv-with-values/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CustomClassView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;world&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;footer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Bye&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ccv-with-values&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above will create a &lt;tt class="docutils literal"&gt;CustomClassView&lt;/tt&gt; instance with the provided values as its&amp;nbsp;attributes.&lt;/p&gt;
&lt;p&gt;Although this method of configuration is used in normal django CBVs (for example
setting the &lt;tt class="docutils literal"&gt;template_name&lt;/tt&gt; in a &lt;tt class="docutils literal"&gt;TemplateView&lt;/tt&gt;) I recommend you avoid using it because passing parameters
to the &lt;tt class="docutils literal"&gt;as_view&lt;/tt&gt; method pollutes the urls.py with configuration
that (at least in my opinion) should &lt;em&gt;not&lt;/em&gt; be there (and there&amp;#8217;s no reason to have to take a look at both
your urls.py and your views.py to understand the behavior of your views) and also, even for very simple views I know that after some time I&amp;#8217;ll need
to add some functionality that cannot be implemented by passing the parameters so I prefer to bite the
bullet and define all my views as inherited classes so it will be easy for me to further customize them later (we&amp;#8217;ll
see how this is done in a second). Thus, even if you&amp;nbsp;have&lt;/p&gt;
&lt;p&gt;In any case, I won&amp;#8217;t discuss passing parameters to the &lt;tt class="docutils literal"&gt;as_view&lt;/tt&gt; method any more,
so from now on any class based views I define will be added to urls py using &lt;tt class="docutils literal"&gt;ClassName.as_view()&lt;/tt&gt; without any
parameters to the &lt;tt class="docutils literal"&gt;as_view()&lt;/tt&gt; class&amp;nbsp;method.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="is-this-really-dry"&gt;
&lt;h3&gt;Is this really &lt;span class="caps"&gt;DRY&lt;/span&gt;&amp;nbsp;?&lt;/h3&gt;
&lt;p&gt;Let&amp;#8217;s now suppose that we wanted to allow our class based view to print something on the header even if no header is provided
when you configure it. The only way to do it would be to re-define the &lt;tt class="docutils literal"&gt;render&lt;/tt&gt; method like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;DEFAULT HEADER&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;        &amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;            &amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;h1&amp;gt;{header}&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                {body}&lt;/span&gt;
&lt;span class="s2"&gt;            &amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;        &amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;br /&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is definitely not the &lt;span class="caps"&gt;DRY&lt;/span&gt; way to do it because you would need to re-define the whole &lt;tt class="docutils literal"&gt;render&lt;/tt&gt; method. Think
what would happen if
you wanted to print &lt;tt class="docutils literal"&gt;&amp;quot;&lt;span class="caps"&gt;ANOTHER&lt;/span&gt; &lt;span class="caps"&gt;DEFAULT&lt;/span&gt; &lt;span class="caps"&gt;HEADER&lt;/span&gt;&amp;quot;&lt;/tt&gt; as a default header for some other view - once again re-defining
&lt;tt class="docutils literal"&gt;render&lt;/tt&gt;! In fact, the above
&lt;tt class="docutils literal"&gt;CustomClassView&lt;/tt&gt; is naively implemented because it does not allow proper customization through inheritance. The
same problems for the header arise also when you need modify the body; for
example, if you wanted to add an index number before displaying the items of the list then you&amp;#8217;d need to again re-implement the
whole &lt;tt class="docutils literal"&gt;render&lt;/tt&gt; method.&lt;/p&gt;
&lt;p&gt;If that was our only option then we could just stick to functional views. However, we can do
much better if we define the class based view in such a way that allows inherited classes to override methods that
define specific parts of the functionality. To do this the class-based-view must be properly implemented so each
part of its functionality is implemented by a different&amp;nbsp;method.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s how we could improve the &lt;tt class="docutils literal"&gt;CustomClassView&lt;/tt&gt; to make it more &lt;span class="caps"&gt;DRY&lt;/span&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BetterCustomClassView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CustomClassView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Better Custom Class View&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;render_context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_context&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;br /&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;            &amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    &amp;lt;h1&amp;gt;{header}&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    {body}&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;            &amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_header&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render_context&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So what happens here? First of all we inherit from &lt;tt class="docutils literal"&gt;CustomClassView&lt;/tt&gt; to keep the
&lt;tt class="docutils literal"&gt;as_view&lt;/tt&gt; method which doesn&amp;#8217;t need changing. Beyond this, the render
uses methods (&lt;tt class="docutils literal"&gt;get_header&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;render_context&lt;/tt&gt;) to retrieve the values from the header and the body - this means
that we could re-define these methods to an inherited class in order to override
what these methods will return. Beyond &lt;tt class="docutils literal"&gt;get_header&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;render_contex&lt;/tt&gt; I&amp;#8217;ve added
a &lt;tt class="docutils literal"&gt;get_context&lt;/tt&gt; method that is used by &lt;tt class="docutils literal"&gt;render_context&lt;/tt&gt; to make this &lt;span class="caps"&gt;CBV&lt;/span&gt; even
more re-usable. For example I may
need to configure the context (add/remove items from the context i.e have a &lt;span class="caps"&gt;CBV&lt;/span&gt;
that adds a last item with the number of list items to the list to be displayed). Of course this could
be done from &lt;tt class="docutils literal"&gt;render_context&lt;/tt&gt; &lt;em&gt;but&lt;/em&gt; this means that I would need to define my new functionality
(modifying the context items) &lt;em&gt;and&lt;/em&gt; re-defining the context list formatting. It is much
better (in my opinion always) to keep properly separated these&amp;nbsp;things.&lt;/p&gt;
&lt;p&gt;Now, the above is a first try that I created to mainly fulfil my requirement of
having a default header and some more examples I will discuss later (and keep
everything simple enough). You could
extract more functionality as methods-for-overriding, for example the render
method could be written like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_template&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_header&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render_context&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and add a &lt;tt class="docutils literal"&gt;get_template&lt;/tt&gt; method that will return the actual html template. There&amp;#8217;s no
hard rules here on what functionality should be extracted to a method (so it could
be overridden) however I recommend to follow the &lt;span class="caps"&gt;YAGNI&lt;/span&gt; rule (i.e implement everything
as normal and when you see that some functionality needs to be overridden then refactor
your code to extract it to a separate&amp;nbsp;method).&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s see an example of adding the default header functionality by overriding &lt;tt class="docutils literal"&gt;get_header&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DefaultHeaderBetterCustomClassView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BetterCustomClassView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;DEFAULT HEADER&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Classes inheriting from &lt;tt class="docutils literal"&gt;DefaultHeaderBetterCustomClassView&lt;/tt&gt; can choose to not
actually define a header attribute so &lt;tt class="docutils literal"&gt;&amp;quot;&lt;span class="caps"&gt;DEFAULT&lt;/span&gt; &lt;span class="caps"&gt;HEADER&lt;/span&gt;&amp;quot;&lt;/tt&gt; will be printed instead. Keep in
mind that for &lt;tt class="docutils literal"&gt;DefaultHeaderBetterCustomClassView&lt;/tt&gt; to be actually useful you&amp;#8217;ll need to
have more than one classes that need this default-header functionality (or else you could
just set the header attribute of your class to &lt;tt class="docutils literal"&gt;&amp;quot;&lt;span class="caps"&gt;DEFAULT&lt;/span&gt; &lt;span class="caps"&gt;HEADER&lt;/span&gt;&amp;quot;&lt;/tt&gt; - this is not
user generated input, this is your source&amp;nbsp;code!).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="re-using-view-functionality"&gt;
&lt;h3&gt;Re-using view&amp;nbsp;functionality&lt;/h3&gt;
&lt;p&gt;We have come now to a crucial point in this chapter, so please stick with me. Let&amp;#8217;s say that you have
&lt;em&gt;more than one&lt;/em&gt; class based views that contain a header attribute. You want to include
the default header functionality on all of them so that if any view instantiated from these
class based views doesn&amp;#8217;t define a header
the default string will be output (I know that this may be a rather trivial example but I want
to keep everything simple to make following easy - instead of the default header the functionality
you want to override may be adding stuff to the context or filtering the objects you&amp;#8217;ll retrieve
from the&amp;nbsp;database).&lt;/p&gt;
&lt;p&gt;To re-use this default header functionality from multiple classes you have &lt;em&gt;two&lt;/em&gt; options:
Either inherit all classes that need this functionality from &lt;tt class="docutils literal"&gt;DefaultHeaderBetterCustomClassView&lt;/tt&gt; or
extract the custom &lt;tt class="docutils literal"&gt;get_header&lt;/tt&gt; method to a &lt;em&gt;mixin&lt;/em&gt; and inherit from the mixin. A mixin is a class not
related to the class based view hierarchy we are using - the mixin inherits from object (or from another
mixin) and just defines the methods and attributes that need to be overridden. When the mixin is &lt;em&gt;mixed&lt;/em&gt;
with the ancestors of a class its functionality will be used by that class (we&amp;#8217;ll see how shortly). So
the mixin will only define &lt;tt class="docutils literal"&gt;get_header&lt;/tt&gt; and not all other methods like
&lt;tt class="docutils literal"&gt;render&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;get_context&lt;/tt&gt; etc. Using the
&lt;tt class="docutils literal"&gt;DefaultHeaderBetterCustomClassView&lt;/tt&gt; is enough for some cases but for the general case
of re-using the functionality you&amp;#8217;ll need to create the mixin. Let&amp;#8217;s see&amp;nbsp;why:&lt;/p&gt;
&lt;p&gt;Suppose that you have a base class that renders the header and context as &lt;span class="caps"&gt;JSON&lt;/span&gt; instead of the &lt;span class="caps"&gt;HTML&lt;/span&gt;
template, something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JsonCustomClassView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;header&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_header&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;context&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_context&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="p"&gt;}))&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that this class does not inherit from our previous hierarchy (i.e does not
inherit from BetterCustomClassView) but from object since it provides
its own &lt;tt class="docutils literal"&gt;as_view&lt;/tt&gt; method. How could we re-use default header functionality
in this class (without having to re-implement it)? One solution would be to create a class that
inherits from both &lt;tt class="docutils literal"&gt;JsonCustomClassView&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;DefaultHeaderBetterCustomClassView&lt;/tt&gt; using something&amp;nbsp;like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# OPTION 1&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DefaultHeaderJsonCustomClassView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DefaultHeaderBetterCustomClassView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;JsonCustomClassView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="c1"&gt;# OR&lt;/span&gt;
&lt;span class="c1"&gt;# OPTION 2&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JsonDefaultHeaderCustomClassView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JsonCustomClassView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DefaultHeaderBetterCustomClassView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What will happen here? Notice that the methods &lt;tt class="docutils literal"&gt;get_header&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;as_view&lt;/tt&gt; exist in &lt;em&gt;both&lt;/em&gt; ancestor classes! So
which one will be used in each case? Actually, there&amp;#8217;s a (rather complex) rule for that called
&lt;span class="caps"&gt;MRO&lt;/span&gt; (Method Resolution Order). The &lt;span class="caps"&gt;MRO&lt;/span&gt; is also what can be used to know which &lt;tt class="docutils literal"&gt;get_header&lt;/tt&gt;
and &lt;tt class="docutils literal"&gt;as_view&lt;/tt&gt; will be used in each case in the previous&amp;nbsp;example.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="interlude-an-mro-primer"&gt;
&lt;h3&gt;Interlude: An &lt;span class="caps"&gt;MRO&lt;/span&gt;&amp;nbsp;primer&lt;/h3&gt;
&lt;p&gt;What is &lt;span class="caps"&gt;MRO&lt;/span&gt;? For every class that Python sees, it tries to create a &lt;em&gt;list&lt;/em&gt; (&lt;span class="caps"&gt;MRO&lt;/span&gt; list) of ancestor classes containing that class as
the first element and its ancestors in a specific order I&amp;#8217;ll discuss in the next paragraph. When a method
of an object of that specific class needs to be
called, then the method will be searched in the &lt;span class="caps"&gt;MRO&lt;/span&gt; list (from the first element of the &lt;span class="caps"&gt;MRO&lt;/span&gt; list i.e. starting with the class itself) - when a class is found
in the list that defines the method then that method instance (i.e. the method defined in this class) will be called and the search will stop (careful readers: I haven&amp;#8217;t
yet talked about &lt;em&gt;super&lt;/em&gt; so please be&amp;nbsp;patient).&lt;/p&gt;
&lt;p&gt;Now, how is the &lt;span class="caps"&gt;MRO&lt;/span&gt; list created? As I explained, the first element
is the class itself. The second element is the &lt;span class="caps"&gt;MRO&lt;/span&gt; of the &lt;em&gt;leftmost&lt;/em&gt; ancestor of that object (so &lt;span class="caps"&gt;MRO&lt;/span&gt; will
run recursively on each ancestor), the third element will be the &lt;span class="caps"&gt;MRO&lt;/span&gt; of the ancestor right next to the leftmost
ancestor etc. There is one extra and important rule: When a class is found multiple times in the &lt;span class="caps"&gt;MRO&lt;/span&gt; list (for example
if some elements have a common ancestor) then &lt;em&gt;only the last occurrence in the list will be kept&lt;/em&gt; - so each class
will exist only once in the &lt;span class="caps"&gt;MRO&lt;/span&gt; list. The above rule implies that the
rightmost element in every &lt;span class="caps"&gt;MRO&lt;/span&gt; list will always be object - please make sure you
understand why before&amp;nbsp;continuing.&lt;/p&gt;
&lt;p&gt;Thus, the &lt;span class="caps"&gt;MRO&lt;/span&gt; list for &lt;tt class="docutils literal"&gt;DefaultHeaderJsonCustomClassView&lt;/tt&gt; defined in the previous section
is (remember, start
with the class to the left and add the &lt;span class="caps"&gt;MRO&lt;/span&gt; of each of its ancestors starting
from the leftmost one):
&lt;tt class="docutils literal"&gt;[DefaultHeaderJsonCustomClassView, DefaultHeaderBetterCustomClassView, BetterCustomClassView, CustomClassView, JsonCustomClassView, object]&lt;/tt&gt;, while
for &lt;tt class="docutils literal"&gt;JsonDefaultHeaderCustomClassView&lt;/tt&gt; is
&lt;tt class="docutils literal"&gt;[JsonDefaultHeaderCustomClassView, JsonCustomClassView, DefaultHeaderBetterCustomClassView, BetterCustomClassView, CustomClassView, object]&lt;/tt&gt;. What this
means is that for &lt;tt class="docutils literal"&gt;DefaultHeaderJsonCustomClassView&lt;/tt&gt; the &lt;tt class="docutils literal"&gt;CustomClassView.as_view()&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;DefaultHeaderBetterCustomClassView.get_header()&lt;/tt&gt; will be used (thus
we will not get the &lt;span class="caps"&gt;JSON&lt;/span&gt; output) and for &lt;tt class="docutils literal"&gt;JsonDefaultHeaderCustomClassView&lt;/tt&gt; the &lt;tt class="docutils literal"&gt;JsonCustomClassView.as_view()&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;JsonCustomClassView.get_header()&lt;/tt&gt;
will be used (so we won&amp;#8217;t get the default header functionality) - i.e none of those two options will result to the desired&amp;nbsp;behaviour.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s try an example that has the same base class twice in the hierarchy (actually the previous examples also had a class twice in
the hierarchy - &lt;tt class="docutils literal"&gt;object&lt;/tt&gt; but let&amp;#8217;s be more explicit). For this, we&amp;#8217;ll create a
&lt;tt class="docutils literal"&gt;DefaultContextBetterCustomClassView&lt;/tt&gt; that returns a default context if the context is empty
(similar to the default header&amp;nbsp;functionality).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DefaultContextBetterCustomClassView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BetterCustomClassView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DEFAULT CONTEXT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we&amp;#8217;ll create a class that inherits from both &lt;tt class="docutils literal"&gt;DefaultHeaderBetterCustomClassView&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;DefaultContextBetterCustomClassView&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DefaultHeaderContextCustomClassView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DefaultHeaderBetterCustomClassView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DefaultContextBetterCustomClassView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;#8217;s do the &lt;span class="caps"&gt;MRO&lt;/span&gt; for the &lt;tt class="docutils literal"&gt;DefaultHeaderContextCustomClassView&lt;/tt&gt; class:&lt;/p&gt;
&lt;p&gt;Initially, the &lt;span class="caps"&gt;MRO&lt;/span&gt; will be the&amp;nbsp;following:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
Starting with the initial class
1. DefaultHeaderContextCustomClassView
Follows the leftmost class (DefaultHeaderBetterCustomClassView) MRO
2. DefaultHeaderBetterCustomClassView, 3. BetterCustomClassView, 4. CustomClassView, 5. object
And finally the next class (DefaultContextBetterCustomClassView) MRO
6. DefaultContextBetterCustomClassView, 7. BetterCustomClassView, 8. CustomClassView, 9. object
&lt;/pre&gt;
&lt;p&gt;Notice that classes &lt;tt class="docutils literal"&gt;BetterCustomClassView&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;CustomClassView&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;object&lt;/tt&gt; are repeated two times
(on place 3,4,5 and 7,8,9) thus &lt;em&gt;only&lt;/em&gt; their last (rightmost) occurrences will be kept in the list. So the
resulting &lt;span class="caps"&gt;MRO&lt;/span&gt; is the following (3,4,5 are&amp;nbsp;removed):&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;[DefaultHeaderContextCustomClassView, DefaultHeaderBetterCustomClassView, DefaultContextBetterCustomClassView, BetterCustomClassView, CustomClassView, object]&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;One funny thing here is that the &lt;tt class="docutils literal"&gt;DefaultHeaderContextCustomClassView&lt;/tt&gt; &lt;em&gt;will actually work&lt;/em&gt; properly because the
&lt;tt class="docutils literal"&gt;get_header&lt;/tt&gt; will be found in &lt;tt class="docutils literal"&gt;DefaultHeaderBetterCustomClassView&lt;/tt&gt; and the
&lt;tt class="docutils literal"&gt;get_context&lt;/tt&gt; will be found in &lt;tt class="docutils literal"&gt;DefaultContextBetterCustomClassView&lt;/tt&gt; so this
result to the correct&amp;nbsp;functionality.&lt;/p&gt;
&lt;p&gt;Yes it does work but at what cost? Do you really want to do the mental exercise
of finding out the &lt;span class="caps"&gt;MRO&lt;/span&gt; for each class you define to see which method will be actually used? Also, what would happen if the
&lt;tt class="docutils literal"&gt;DefaultHeaderContextCustomClassView&lt;/tt&gt; class also had a &lt;tt class="docutils literal"&gt;get_context&lt;/tt&gt; method defined
(hint: that &lt;tt class="docutils literal"&gt;get_context&lt;/tt&gt; would be used and the &lt;tt class="docutils literal"&gt;get_context&lt;/tt&gt; of &lt;tt class="docutils literal"&gt;DefaultContextBetterCustomClassView&lt;/tt&gt;
would be&amp;nbsp;ignored).&lt;/p&gt;
&lt;p&gt;Before finishing this interlude, I&amp;#8217;d like to make a confession: The Python &lt;span class="caps"&gt;MRO&lt;/span&gt; algorithm is not as simple as
than the procedure I described. It uses an algorithm called &lt;a class="reference external" href="https://en.wikipedia.org/wiki/C3_linearization"&gt;C3 linearization&lt;/a&gt; which seems way too complex
to start explaining or understanding if you not a &lt;span class="caps"&gt;CS&lt;/span&gt; student. What you&amp;#8217;ll need to remember is that the
procedure I described works fine in normal cases when you don&amp;#8217;t try to do something stupid. Here&amp;#8217;s a
&lt;a class="reference external" href="https://medium.com/technology-nineleaps/python-method-resolution-order-4fd41d2fcc"&gt;post that explains the theory more&lt;/a&gt;. However if you  follow along my recommendations below you won&amp;#8217;t
have any problems with &lt;span class="caps"&gt;MRO&lt;/span&gt;, actually you won&amp;#8217;t really need to use the &lt;span class="caps"&gt;MRO&lt;/span&gt; that much to understand
the method calling&amp;nbsp;hierarchy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="using-mixins-for-code-reuse"&gt;
&lt;h3&gt;Using mixins for&amp;nbsp;code-reuse&lt;/h3&gt;
&lt;p&gt;The above explanation of &lt;span class="caps"&gt;MRO&lt;/span&gt; should convince you that you should avoid
mixing hierarchies of classes - if you are not convinced then wait until I introduce &lt;tt class="docutils literal"&gt;super()&lt;/tt&gt;
in the next section and I guarantee that you&amp;#8217;ll&amp;nbsp;be!&lt;/p&gt;
&lt;p&gt;So, that&amp;#8217;s why I
propose implementing common functionality that needs to be re-used between
classes only with mixins (hint: that&amp;#8217;s also what Django does). Each re-usable functionality
will be implemented in its own mixin;  class views that need to implement that
functionality will just inherit from the mixin along with the base class view. Each
one of the view classes you define should inherit from &lt;em&gt;one and only one&lt;/em&gt; other class
view and any number of mixins you want. Make sure that the view class is rightmost in
the ancestors list and the mixins are to the left of it (so that they will properly override
its behaviour; remember that the methods of the ancestors to the left are searched first
in the &lt;span class="caps"&gt;MRO&lt;/span&gt; list &amp;#8212; and the methods of the defined class have of course the highest priority
since it goes first in the &lt;span class="caps"&gt;MRO&lt;/span&gt;&amp;nbsp;list).&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s try implementing the proposed mixins for a default header and&amp;nbsp;context:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DefaultHeaderMixin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;DEFAULT HEADER&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DefaultContextMixin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DEFAULT CONTEXT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and all the proposed use cases using the base class view and the&amp;nbsp;mixins:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DefaultHeaderMixinBetterCustomClassView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mixins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultHeaderMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BetterCustomClassView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DefaultContextMixinBetterCustomClassView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mixins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultContextMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BetterCustomClassView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DefaultHeaderContextMixinBetterCustomClassView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mixins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultHeaderMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mixins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultContextMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BetterCustomClassView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JsonDefaultHeaderMixinCustomClassView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mixins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultHeaderMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;JsonCustomClassView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I believe that the above definitions are self-documented and it is very easy to know which
method of the resulting class will be called each time: Start from the main class and if
the method is not found there continue from left to right to the ancestor list; since the mixins
do only one thing and do it well you&amp;#8217;ll know what each class does simply by looking at its&amp;nbsp;definition.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-super-situation"&gt;
&lt;h3&gt;The super&amp;nbsp;situation&lt;/h3&gt;
&lt;p&gt;The final (and most complex) thing and extension I&amp;#8217;d like to discuss for our custom class based views is the case
where you want to use the functionality of more than one mixins for the &lt;em&gt;same thing&lt;/em&gt;. For example, let&amp;#8217;s suppose
that we had a mixin that added some data to the context and a different mixing that added
some different data to the context. Both would use the &lt;tt class="docutils literal"&gt;get_context&lt;/tt&gt; method
and you&amp;#8217;d like to have the context data of both of them to your context. But
this is not possible using the implementations above because when a
&lt;tt class="docutils literal"&gt;get_context&lt;/tt&gt; is found in the &lt;span class="caps"&gt;MRO&lt;/span&gt; list it will be called and the &lt;span class="caps"&gt;MRO&lt;/span&gt; search
will finish&amp;nbsp;there!&lt;/p&gt;
&lt;p&gt;So how could we add the functionality of both these mixins to a class based view? This is the same problem as
if we wanted to inherit from a mixin (or a class view) and override one of its methods
but &lt;em&gt;also&lt;/em&gt; call its parent (overridden) method for example to get its output and use it as the base
of the output for the overridden method. Both these situations (re-use
functionality of two mixins with the same method or re-use functionality
from a parent method you override) are the same because what stays in the end is
the &lt;span class="caps"&gt;MRO&lt;/span&gt; list. For example say we we had the following base&amp;nbsp;class&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
class V:pass
&lt;/pre&gt;
&lt;p&gt;and we wanted to override it either using mixins or by using normal&amp;nbsp;inheritance.&lt;/p&gt;
&lt;p&gt;When using mixins for example like&amp;nbsp;this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
class M1:pass
class M2:pass
class MIXIN(M2, M1, V):pass
&lt;/pre&gt;
&lt;p&gt;we&amp;#8217;ll have the following &lt;span class="caps"&gt;MRO&lt;/span&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
# MIXIN.mro()
# [MIXIN, M2, M1, V, object, ]
&lt;/pre&gt;
&lt;p&gt;while when using inheritance like&amp;nbsp;this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
class M1V(V):pass
class M2M1V(M1V):pass
class INHERITANCE(M2M1V):pass
&lt;/pre&gt;
&lt;p&gt;we&amp;#8217;ll have the following &lt;span class="caps"&gt;MRO&lt;/span&gt;:&lt;/p&gt;
&lt;blockquote&gt;
# &lt;span class="caps"&gt;INHERITANCE&lt;/span&gt;.mro()
# [&lt;span class="caps"&gt;INHERITANCE&lt;/span&gt;, &lt;span class="caps"&gt;M2M1V&lt;/span&gt;, &lt;span class="caps"&gt;M1V&lt;/span&gt;, V, object ]&lt;/blockquote&gt;
&lt;p&gt;As we can see in both cases the base class V is the last one (just next to object)
and between this class and the one that needs the functionality (&lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;MIXIN&lt;/span&gt;&lt;/tt&gt; in the first
case and &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;INHERITANCE&lt;/span&gt;&lt;/tt&gt; in the second case) there are
the classes that will define the extra functionality that needs to be re-used: &lt;tt class="docutils literal"&gt;M2&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;M1&lt;/tt&gt; (start from
left to right) in the first case and &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;M2M1V&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;M1V&lt;/span&gt;&lt;/tt&gt; (follow the inheritance hierarchy)
in the second case. So in both cases when calling a method they will be searched the same way using
the &lt;span class="caps"&gt;MRO&lt;/span&gt; list and when the method is found it will be executed and the search will&amp;nbsp;stop.&lt;/p&gt;
&lt;p&gt;But what if we needed to re-use some method from &lt;tt class="docutils literal"&gt;V&lt;/tt&gt; (or from some other ancestor) and
a class on the left of the &lt;span class="caps"&gt;MRO&lt;/span&gt; list has the same method?
The answer, as you should have guessed by now if you have some Python knowledge is &lt;tt class="docutils literal"&gt;super()&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;super&lt;/tt&gt; method can be used by a class method to call a method of &lt;em&gt;its ancestors&lt;/em&gt; respecting
the &lt;span class="caps"&gt;MRO&lt;/span&gt;. Thus, running &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;super().x()&lt;/span&gt;&lt;/tt&gt; from a method instance will try to find method &lt;tt class="docutils literal"&gt;x()&lt;/tt&gt;
on the &lt;span class="caps"&gt;MRO&lt;/span&gt; ancestors of this instance &lt;em&gt;even if the instance defines the &amp;#8220;x()&amp;#8220; method&lt;/em&gt; i.e it will
not search the first element of the &lt;span class="caps"&gt;MRO&lt;/span&gt; list. Notice
that if the &lt;tt class="docutils literal"&gt;x()&lt;/tt&gt; method does not exist in the headless-&lt;span class="caps"&gt;MRO&lt;/span&gt; chain you&amp;#8217;ll get an attribute error.
So, usually, you&amp;#8217;ll can &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;super().x()&lt;/span&gt;&lt;/tt&gt; from &lt;em&gt;inside&lt;/em&gt; the &lt;tt class="docutils literal"&gt;x()&lt;/tt&gt; method to call your parent&amp;#8217;s (as
specified by the &lt;span class="caps"&gt;MRO&lt;/span&gt; list) same-named method and retrieve its&amp;nbsp;output.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s take a closer look at how &lt;tt class="docutils literal"&gt;super()&lt;/tt&gt; works using a simple example. For this, we&amp;#8217;ll define a method calld &lt;tt class="docutils literal"&gt;x()&lt;/tt&gt; on all classes
of the previous&amp;nbsp;example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;V&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;From V&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;M1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;From M1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;M2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;From M2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MIXIN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;M2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;M1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;From MIXIN&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;M1V&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;From M1V&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;M2M1V&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;M1V&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;From M2M1V&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;INHERITANCE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;M2M1V&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;From INHERITANCE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;MIXIN OUTPUT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;MIXIN&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;INHERITANCE OUTPUT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;INHERITANCE&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here&amp;#8217;s the&amp;nbsp;output:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
MIXIN OUTPUT
From V
From M1
From M2
From MIXIN
INHERITANCE OUTPUT
From V
From M1V
From M2M1V
From INHERITANCE
&lt;/pre&gt;
&lt;p&gt;Notice when each message is printed: Because x() first calls its &lt;tt class="docutils literal"&gt;super()&lt;/tt&gt; method
and then it prints the message in both cases first the &lt;tt class="docutils literal"&gt;From V&lt;/tt&gt; message is printed
from the base class and then from the following classes in the hierarchy (as per the &lt;span class="caps"&gt;MRO&lt;/span&gt;)
ending with the class of the instance (either &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;MIXIN&lt;/span&gt;&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;INHERITANCE&lt;/span&gt;&lt;/tt&gt;). Also the
print order is the same in both cases as we&amp;#8217;ve already explained. Please make
sure you understand why the output is like this before&amp;nbsp;continuing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="using-super-in-our-hierarchy"&gt;
&lt;h3&gt;Using super in our&amp;nbsp;hierarchy&lt;/h3&gt;
&lt;p&gt;Using super and mixins it is easy to mix and match functionality to create new
classes. Of course, super can be used without mixins when overriding a method from
a class you inherit from and want to also call your ancestor&amp;#8217;s&amp;nbsp;method.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s how we could add a prefix to the&amp;nbsp;header:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HeaderPrefixMixin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;PREFIX: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_header&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and here&amp;#8217;s how it could be&amp;nbsp;used:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HeaderPrefixBetterCustomClassView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mixins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HeaderPrefixMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BetterCustomClassView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello!&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will retrieve the header from the ancestor and properly print the header displaying both &lt;span class="caps"&gt;PREFIX&lt;/span&gt; and Hello.
What if we wanted to re-use the default header mixin? First let&amp;#8217;s change &lt;tt class="docutils literal"&gt;DefaultHeaderMixin&lt;/tt&gt;
to properly use &lt;tt class="docutils literal"&gt;super()&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DefaultHeaderSuperMixin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_header&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_header&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;DEFAULT HEADER&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HeaderPrefixDefaultBetterCustomClassView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mixins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HeaderPrefixMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mixins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultHeaderSuperMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BetterCustomClassView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice the order of the ancestor classes. The &lt;tt class="docutils literal"&gt;get_header()&lt;/tt&gt; of  &lt;tt class="docutils literal"&gt;HeaderPrefixMixin&lt;/tt&gt; will be called which
will call the &lt;tt class="docutils literal"&gt;get_header()&lt;/tt&gt; of
&lt;tt class="docutils literal"&gt;DefaultHeaderSuperMixin&lt;/tt&gt; (which will call the &lt;tt class="docutils literal"&gt;get_header()&lt;/tt&gt; of &lt;tt class="docutils literal"&gt;BetterCustomClassView&lt;/tt&gt; returning &lt;tt class="docutils literal"&gt;None&lt;/tt&gt;).
So the result will be &lt;tt class="docutils literal"&gt;&amp;quot;&lt;span class="caps"&gt;PREFIX&lt;/span&gt;: &lt;span class="caps"&gt;DEFAULT&lt;/span&gt; &lt;span class="caps"&gt;HEADER&lt;/span&gt;&amp;quot;&lt;/tt&gt;. However if instead we had defined this class&amp;nbsp;like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HeaderPrefixDefaultBetterCustomClassView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mixins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultHeaderSuperMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mixins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HeaderPrefixMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BetterCustomClassView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;the result would be &lt;tt class="docutils literal"&gt;&amp;quot;&lt;span class="caps"&gt;PREFIX&lt;/span&gt;: &amp;quot;&lt;/tt&gt; (&lt;span class="caps"&gt;DEFAULT&lt;/span&gt; &lt;span class="caps"&gt;HEADER&lt;/span&gt; won&amp;#8217;t be printed). Can you understand&amp;nbsp;why?&lt;/p&gt;
&lt;p&gt;One thing to keep in mind is that most probably you&amp;#8217;ll need to call &lt;tt class="docutils literal"&gt;super()&lt;/tt&gt; and return its output when you override a method.
Even if you think that you don&amp;#8217;t need to call it for this view or mixin, you may need it later from some other view or mixin that
inherits from this view. Also notice that &lt;tt class="docutils literal"&gt;super()&lt;/tt&gt; may not return anything but may have some
side-effects in your class (for example set a &lt;tt class="docutils literal"&gt;self&lt;/tt&gt; attribute) which you won&amp;#8217;t get if you don&amp;#8217;t call&amp;nbsp;it!&lt;/p&gt;
&lt;p&gt;For another example of super, let&amp;#8217;s define a couple of mixins that add things to the&amp;nbsp;context:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ExtraContext1Mixin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_context&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ExtraContext2Mixin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_context&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;data2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first one retrieves the ancestor context list and appends &lt;tt class="docutils literal"&gt;'data1'&lt;/tt&gt; to the
it while the second one will insert &lt;tt class="docutils literal"&gt;'data2'&lt;/tt&gt; to the start of the list. To use
these mixins just add them to the ancestor list of your class hierarchy as usually.
One interesting thing to notice here is that because of how &lt;tt class="docutils literal"&gt;get_context&lt;/tt&gt; is
defined we&amp;#8217;ll get the same output no matter the order of the mixins in the hierarchy
since &lt;tt class="docutils literal"&gt;ExtraContext1Mixin&lt;/tt&gt; will append &lt;tt class="docutils literal"&gt;data1&lt;/tt&gt; to the end of the context list and
the &lt;tt class="docutils literal"&gt;ExtraContext2Mixin&lt;/tt&gt; will insert &lt;tt class="docutils literal"&gt;data2&lt;/tt&gt; to the start of the context&amp;nbsp;list.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ExtraContext12BetterCustomClassView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mixins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ExtraContext1Mixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mixins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ExtraContext2Mixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BetterCustomClassView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ExtraContext21BetterCustomClassView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mixins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ExtraContext2Mixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mixins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ExtraContext1Mixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BetterCustomClassView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If instead both of these mixins appended the item to the end of the list, then
the output would be different depending on the ancestor order.
Of course, since we&amp;#8217;ve already defined &lt;tt class="docutils literal"&gt;HeaderPrefixMixin&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;DefaultHeaderSuperMixin&lt;/tt&gt; nothing stops us
from using all those mixins&amp;nbsp;together!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AllTogetherNowBetterCustomClassView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;mixins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HeaderPrefixMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;mixins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultHeaderSuperMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;mixins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ExtraContext1Mixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;mixins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ExtraContext2Mixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;BetterCustomClassView&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will have the desired behaviour of adding a prefix to the header, having a default header if not one was defined
and adding the extra context from both&amp;nbsp;mixins!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="testing-all-this"&gt;
&lt;h3&gt;Testing all&amp;nbsp;this&lt;/h3&gt;
&lt;p&gt;In the accompanying project at &lt;a class="reference external" href="https://github.com/spapas/cbv-tutorial"&gt;https://github.com/spapas/cbv-tutorial&lt;/a&gt; you can take a look at how this
custom &lt;span class="caps"&gt;CBV&lt;/span&gt; hierarchy works by running it and taking a look at the &lt;tt class="docutils literal"&gt;core&lt;/tt&gt; project (visit &lt;a class="reference external" href="http://127.0.0.1:8001/non-django-cbv/"&gt;http://127.0.0.1:8001/non-django-cbv/&lt;/a&gt;).
There you can take a look at the views.py and mixins.py to see all the views and mixins we&amp;#8217;ve discussed in this&amp;nbsp;chapter.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="a-high-level-overview-of-cbvs"&gt;
&lt;h2&gt;A high level overview of&amp;nbsp;CBVs&lt;/h2&gt;
&lt;p&gt;After the previous rather long (but I hope gentle enough) introduction to implementing
our own class based view hierarchy using inheritance, mixins, &lt;span class="caps"&gt;MRO&lt;/span&gt;, method overriding
and &lt;tt class="docutils literal"&gt;super&lt;/tt&gt; we can now start talking about the Django Class Based Views (CBVs). Our
guide will be the &lt;a class="reference external" href="http://ccbv.co.uk`"&gt;&lt;span class="caps"&gt;CBV&lt;/span&gt; inspector&lt;/a&gt; application which displays all classes and mixins
that Django CBVs are using along with their methods and attributes. Using this application
and after reading this article you should be able to quickly and definitely know
which method or attribute you need to define to each one of your mixins or&amp;nbsp;views.&lt;/p&gt;
&lt;p&gt;To use &lt;span class="caps"&gt;CBV&lt;/span&gt; inspector, just click on a class name (for example &lt;tt class="docutils literal"&gt;CreateView&lt;/tt&gt;); you will
immediately see its &lt;span class="caps"&gt;MRO&lt;/span&gt; ancestors, its list of attributes (and the ancestor class that defines
each one) and finally a list of methods that this class and all its ancestors define.
Of course when a method is defined by multiple classes the &lt;span class="caps"&gt;MRO&lt;/span&gt; ordering will be used -
super is used when the functionality of the ancestor classes is also used. The &lt;span class="caps"&gt;CBV&lt;/span&gt;
inspector (and our project) has Python 3 syntax. If you want to follow along with
Python 2 (I don&amp;#8217;t recommend it though since Django 2.0 only supports Python 3.x) use the following
syntax to call super for method &lt;tt class="docutils literal"&gt;x()&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ClassName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;this is the same as&amp;nbsp;calling&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;in Python&amp;nbsp;3.x.&lt;/p&gt;
&lt;div class="section" id="taking-a-look-at-the-view"&gt;
&lt;h3&gt;Taking a look at the&amp;nbsp;View&lt;/h3&gt;
&lt;p&gt;In any case, our travel starts from the central &lt;span class="caps"&gt;CBV&lt;/span&gt; class which is (intuitively) called &amp;#8230; &lt;a class="reference external" href="https://ccbv.co.uk/View"&gt;View&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;This class is used as the base in Django&amp;#8217;s &lt;span class="caps"&gt;CBV&lt;/span&gt; hierarchy (similar to how  &lt;tt class="docutils literal"&gt;CustomClassView&lt;/tt&gt;
was used in our own hierarchy). It has only one attribute
(&lt;tt class="docutils literal"&gt;http_method_names&lt;/tt&gt;) and a very small number of methods. The most important method is the
&lt;tt class="docutils literal"&gt;as_view&lt;/tt&gt; class method (which is similar to the one we defined in the previous section).
The &lt;tt class="docutils literal"&gt;as_view&lt;/tt&gt; will instantiate an instance object of the &lt;tt class="docutils literal"&gt;View&lt;/tt&gt; class
(actually the class that inherits from &lt;tt class="docutils literal"&gt;View&lt;/tt&gt;) and use this object to properly generate a functional&amp;nbsp;view.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;View&lt;/tt&gt; class cannot be used as it is
but it must be inherited by a child class. The child class needs to define a method
that has the same name as each http method that is supported - for example if
only &lt;span class="caps"&gt;HTTP&lt;/span&gt; &lt;span class="caps"&gt;GET&lt;/span&gt; and &lt;span class="caps"&gt;HTTP&lt;/span&gt; &lt;span class="caps"&gt;POST&lt;/span&gt; are supported then the inherited class must define a
&lt;tt class="docutils literal"&gt;get&lt;/tt&gt; and a &lt;tt class="docutils literal"&gt;post&lt;/tt&gt; method; these methods are called from the functional view
through a method called &lt;tt class="docutils literal"&gt;dispatch&lt;/tt&gt; and need to return a proper response object. So,
we have two central methods here: The &lt;tt class="docutils literal"&gt;as_view&lt;/tt&gt; class method that creates the
object instance and returns its view function and &lt;tt class="docutils literal"&gt;dispatch&lt;/tt&gt; that will call
the proper named class method depending on the &lt;span class="caps"&gt;HTTP&lt;/span&gt; method (i.e post, get, put
etc). One thing to keep from this discussion is that you shouldn&amp;#8217;t ever need to
mess with &lt;tt class="docutils literal"&gt;as_view&lt;/tt&gt; but, because &lt;tt class="docutils literal"&gt;dispatch&lt;/tt&gt; is the only instance method that is
guaranteed to run every time the class based view will run, you will frequently
need to override it especially to control access&amp;nbsp;control.&lt;/p&gt;
&lt;p&gt;As an example, we can implemented the &lt;tt class="docutils literal"&gt;BetterCustomClassView&lt;/tt&gt; from the first
section using &lt;tt class="docutils literal"&gt;View&lt;/tt&gt; as its&amp;nbsp;ancestor:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DjangoBetterCustomClassView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;View&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;render_context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_context&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;br /&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;            &amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    &amp;lt;h1&amp;gt;{header}&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    {body}&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;            &amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_header&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render_context&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This method won&amp;#8217;t print anything but of course it could use the mixins from
before to have some default&amp;nbsp;values:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DefaultHeaderContextDjangoBetterCustomClassView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DefaultHeaderMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DefaultContextMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DjangoBetterCustomClassView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Of course instead of using our mixins and render methods it would be much better
to use the proper ones defined by Django - that&amp;#8217;s what we&amp;#8217;re going to do from
now on I just wanted to make clear that there&amp;#8217;s nothing special in Django&amp;#8217;s &lt;span class="caps"&gt;CBV&lt;/span&gt;
hierarchy and can be overridden as we&amp;#8217;d&amp;nbsp;like.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="redirectview-and-templateview"&gt;
&lt;h3&gt;RedirectView and&amp;nbsp;TemplateView&lt;/h3&gt;
&lt;p&gt;Continuing our tour of Django CBVs I&amp;#8217;d like to talk a little about the classes
that the &lt;span class="caps"&gt;CBV&lt;/span&gt; Inspector puts in the same level as &lt;tt class="docutils literal"&gt;View&lt;/tt&gt; (&lt;span class="caps"&gt;GENERIC&lt;/span&gt; &lt;span class="caps"&gt;BASE&lt;/span&gt;):
&lt;a class="reference external" href="https://docs.djangoproject.com/en/2.0/ref/class-based-views/base/#redirectview"&gt;RedirectView&lt;/a&gt; and &lt;a class="reference external" href="https://docs.djangoproject.com/en/2.0/ref/class-based-views/base/#templateview"&gt;TemplateView&lt;/a&gt;. Both inherit directly from &lt;tt class="docutils literal"&gt;View&lt;/tt&gt; and, the
first one defines a &lt;tt class="docutils literal"&gt;get&lt;/tt&gt; method that returns a redirect to another page
while the latter one renders and returns a Django template in the &lt;tt class="docutils literal"&gt;get&lt;/tt&gt;
method.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;RedirectView&lt;/tt&gt; inherits directly from view and has attributes like &lt;tt class="docutils literal"&gt;url&lt;/tt&gt;
(to use a static url)
or &lt;tt class="docutils literal"&gt;pattern_name&lt;/tt&gt; (to use one of the patterns define in your urls.py)
to define where it should redirect. These attributes are
used by the &lt;tt class="docutils literal"&gt;get_redirect_url&lt;/tt&gt; which will generate the actual url to redirect
to and can be overriden for example to redirect to a different location depending
on the current&amp;nbsp;user.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;TemplateView&lt;/tt&gt; on the other hand inherits from &lt;tt class="docutils literal"&gt;View&lt;/tt&gt; and two more classes (actually
these are mixins) beyond &lt;tt class="docutils literal"&gt;View&lt;/tt&gt;: &lt;tt class="docutils literal"&gt;TemplateResponseMixin&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;ContextMixin&lt;/tt&gt;. If you take a look at them you&amp;#8217;ll see that the
&lt;tt class="docutils literal"&gt;TemplateResponseMixin&lt;/tt&gt; defines some template-related attributes (most important being
the &lt;tt class="docutils literal"&gt;template_name&lt;/tt&gt;) and two
methods: One that retrieves the template that will be used to render this View
(&lt;tt class="docutils literal"&gt;get_template_names&lt;/tt&gt;)
and one that actually renders the template (&lt;tt class="docutils literal"&gt;render_to_response&lt;/tt&gt;) using a
&lt;a class="reference external" href="https://docs.djangoproject.com/en/2.0/ref/template-response/#django.template.response.TemplateResponse"&gt;TemplateResponse&lt;/a&gt; instance. The
&lt;tt class="docutils literal"&gt;ContextMixin&lt;/tt&gt; provides the &lt;tt class="docutils literal"&gt;get_context_data&lt;/tt&gt; that is
passed to the template to be rendered and should be overridden if you want to
pass more context&amp;nbsp;variables.&lt;/p&gt;
&lt;p&gt;We can already see many opportunities of reusing and overriding
functionality and improving our &lt;span class="caps"&gt;DRY&lt;/span&gt; score, for example: Create a catch all RedirectView
that depending on the remainder of the url it will redirect to a different page,
create a mixin that appends some things to the context of all CBVs using it, use dynamic templates
based on some other condition (that&amp;#8217;s actually what Detail/List/UpdateView
are doing), render a template to a different output than Html (for example a
text file) etc. I&amp;#8217;ll try to present examples for these in the next&amp;nbsp;section.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-formview"&gt;
&lt;h3&gt;The&amp;nbsp;FormView&lt;/h3&gt;
&lt;p&gt;The next view we&amp;#8217;re going to talk about is &lt;a class="reference external" href="https://docs.djangoproject.com/en/2.0/ref/class-based-views/generic-editing/#formview"&gt;FormView&lt;/a&gt;. This is a view that can be
used whenever we want to display a form (&lt;em&gt;not&lt;/em&gt; a form related to a Model i.e for
Create/Update/Delete, for these cases there are specific CBVs we&amp;#8217;ll see later).
It is interesting to take a look at the list of its
ancestors: &lt;tt class="docutils literal"&gt;TemplateResponseMixin&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;BaseFormView&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;FormMixin&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;ContextMixin&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;ProcessFormView&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;View&lt;/tt&gt;.
We are familiar with &lt;tt class="docutils literal"&gt;TemplateResponseMixin&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;ContextMixin&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;View&lt;/tt&gt; but not with
the others. Before discussing these classes let&amp;#8217;s take a look at the FormView
hierarchy, courtesy of &lt;a class="reference external" href="http://ccbv.co.uk"&gt;http://ccbv.co.uk&lt;/a&gt; and &lt;a class="reference external" href="http://yuml.me"&gt;http://yuml.me&lt;/a&gt;:&lt;/p&gt;
&lt;img src="https://yuml.me/diagram/plain;/class/[TemplateResponseMixin%7Bbg:white%7D]%5E-[FormView%7Bbg:green%7D],%20[BaseFormView%7Bbg:white%7D]%5E-[FormView%7Bbg:green%7D],%20[FormMixin%7Bbg:white%7D]%5E-[BaseFormView%7Bbg:white%7D],%20[ContextMixin%7Bbg:white%7D]%5E-[FormMixin%7Bbg:white%7D],%20[ProcessFormView%7Bbg:white%7D]%5E-[BaseFormView%7Bbg:white%7D],%20[View%7Bbg:lightblue%7D]%5E-[ProcessFormView%7Bbg:white%7D].svg" alt="FormView"&gt;&lt;p&gt;The above diagram should make everything easier: The &lt;tt class="docutils literal"&gt;FormMixin&lt;/tt&gt; inherits
from &lt;tt class="docutils literal"&gt;ContextMixin&lt;/tt&gt; and overrides its &lt;tt class="docutils literal"&gt;get_context_data&lt;/tt&gt; method to add the
form to the view. Beyond this, it adds some attributes and methods for proper form handling, for
example the &lt;tt class="docutils literal"&gt;form_class&lt;/tt&gt; (attribute when the form class will be the same always) and
&lt;tt class="docutils literal"&gt;get_form_class()&lt;/tt&gt; (method when the form class will be dynamic for example
depending on the logged in user), &lt;tt class="docutils literal"&gt;initial&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;get_initial()&lt;/tt&gt; (same logic as before for
the form&amp;#8217;s initial values), &lt;tt class="docutils literal"&gt;form_valid()&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;form_invalid()&lt;/tt&gt; to define
what should happen when the form is valid or invalid, &lt;tt class="docutils literal"&gt;get_form_kwargs&lt;/tt&gt; to pass
some keyword arguments to the form&amp;#8217;s constructor etc. Notice that FormMixin
does not define any form handling logic (i.e check if the form is valid and call
its &lt;tt class="docutils literal"&gt;form_valid()&lt;/tt&gt; method) &amp;#8212; this logic is defined in the &lt;tt class="docutils literal"&gt;ProcessFormView&lt;/tt&gt;
which inherits from &lt;tt class="docutils literal"&gt;View&lt;/tt&gt; and defines proper &lt;tt class="docutils literal"&gt;get()&lt;/tt&gt; (just render the form)
and &lt;tt class="docutils literal"&gt;post()&lt;/tt&gt; (check if the form is valid and call &lt;tt class="docutils literal"&gt;form_valid&lt;/tt&gt; else call &lt;tt class="docutils literal"&gt;form_invalid&lt;/tt&gt;)&amp;nbsp;methods.&lt;/p&gt;
&lt;p&gt;One interesting here is to notice here is that Django defines both the &lt;tt class="docutils literal"&gt;FormMixin&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;ProcessFormView&lt;/tt&gt;.
The &lt;tt class="docutils literal"&gt;FormMixin&lt;/tt&gt; offers the basic Form elements (the form class, initial data
etc) and could be re-used in a different flow beyond the one offered by
&lt;tt class="docutils literal"&gt;ProcessFormView&lt;/tt&gt; (for example display the form as a &lt;span class="caps"&gt;JSON&lt;/span&gt; object instead of a
Django template). On the other hand, &lt;tt class="docutils literal"&gt;ProcessFormView&lt;/tt&gt; is required in order to
define the &lt;tt class="docutils literal"&gt;get&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;post&lt;/tt&gt; methods that are needed from the &lt;tt class="docutils literal"&gt;View&lt;/tt&gt;. These
methods can&amp;#8217;t be overridden in the FormMixin since that would mean that the mixin
would behave as a&amp;nbsp;view!&lt;/p&gt;
&lt;p&gt;Finally, the &lt;tt class="docutils literal"&gt;BaseFormView&lt;/tt&gt; class is used to
inherit from &lt;tt class="docutils literal"&gt;ProcessFormView&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;FormMixin&lt;/tt&gt;. It does not do anything
more than providing a base class that other classes that want to use the form
functionality (i.e both the &lt;tt class="docutils literal"&gt;ProcessFormView&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;FormMixin&lt;/tt&gt;) will inherit&amp;nbsp;from.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-listview-and-detailview"&gt;
&lt;h3&gt;The ListView and&amp;nbsp;DetailView&lt;/h3&gt;
&lt;p&gt;Next in our Django &lt;span class="caps"&gt;CBV&lt;/span&gt; tour is the &lt;a class="reference external" href="https://docs.djangoproject.com/en/2.0/ref/class-based-views/generic-display/#listview"&gt;ListView&lt;/a&gt;. The &lt;tt class="docutils literal"&gt;ListView&lt;/tt&gt; is used to render multiple
objects in a template, for example in a list or table. Here&amp;#8217;s a diagram of the class
hierarchy (courtesy of &lt;a class="reference external" href="http://ccbv.co.uk"&gt;http://ccbv.co.uk&lt;/a&gt; and &lt;a class="reference external" href="http://yuml.me"&gt;http://yuml.me&lt;/a&gt;):&lt;/p&gt;
&lt;img src="https://yuml.me/diagram/plain;/class/[MultipleObjectTemplateResponseMixin%7Bbg:white%7D]%5E-[ListView%7Bbg:green%7D],%20[TemplateResponseMixin%7Bbg:white%7D]%5E-[MultipleObjectTemplateResponseMixin%7Bbg:white%7D],%20[BaseListView%7Bbg:white%7D]%5E-[ListView%7Bbg:green%7D],%20[MultipleObjectMixin%7Bbg:white%7D]%5E-[BaseListView%7Bbg:white%7D],%20[ContextMixin%7Bbg:white%7D]%5E-[MultipleObjectMixin%7Bbg:white%7D],%20[View%7Bbg:lightblue%7D]%5E-[BaseListView%7Bbg:white%7D].svg" alt="ListView"&gt;&lt;p&gt;The &lt;tt class="docutils literal"&gt;MultipleObjectMixin&lt;/tt&gt; is used make a query to the database (either using a
model or a queryset) and pass the results to the context. It also supports
custom ordering (&lt;tt class="docutils literal"&gt;get_ordering()&lt;/tt&gt;) and pagination (&lt;tt class="docutils literal"&gt;paginate_queryset()&lt;/tt&gt;).
However, the most important method of this mixin is &lt;tt class="docutils literal"&gt;get_queryset()&lt;/tt&gt;. This
method checks to see if the &lt;tt class="docutils literal"&gt;queryset&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;model&lt;/tt&gt; attribute are defined
(&lt;tt class="docutils literal"&gt;queryset&lt;/tt&gt; will be checked first so it has priority if both are defined) and
returns a queryset result (taking into account the ordering). This queryset
result will be used by the &lt;tt class="docutils literal"&gt;get_context_data()&lt;/tt&gt; method of this mixin to
actually put it to the context by saving to a context variable named &lt;tt class="docutils literal"&gt;object_list&lt;/tt&gt;.
Notice that you can set the &lt;tt class="docutils literal"&gt;context_object_name&lt;/tt&gt; attribute to add and extra
another variable to the context with the queryset beyond &lt;tt class="docutils literal"&gt;object_list&lt;/tt&gt; (for
example if you have an &lt;tt class="docutils literal"&gt;ArticleLsitView&lt;/tt&gt; you can set &lt;tt class="docutils literal"&gt;context_object_name = articles&lt;/tt&gt; to
be able to do &lt;tt class="docutils literal"&gt;{% for article in articles %}&lt;/tt&gt; in your context instead of
&lt;tt class="docutils literal"&gt;{% for article in object_list %}&lt;/tt&gt;).&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;MultipleObjectMixin&lt;/tt&gt; can be used and
overridden when we need to put multiple objects in a View. This mixin is
inherited (along with &lt;tt class="docutils literal"&gt;View&lt;/tt&gt;) from &lt;tt class="docutils literal"&gt;BaseListView&lt;/tt&gt; that adds a proper &lt;tt class="docutils literal"&gt;get&lt;/tt&gt;
method to call &lt;tt class="docutils literal"&gt;get_context_data&lt;/tt&gt; and pass the result to the&amp;nbsp;template.&lt;/p&gt;
&lt;p&gt;As we can also see, Django uses the &lt;tt class="docutils literal"&gt;MultipleObjectTemplateResponseMixin&lt;/tt&gt; that
inherits from &lt;tt class="docutils literal"&gt;TemplateResponseMixin&lt;/tt&gt; to render the template. This mixin does
some magic with the queryset or model to define a
template name (so you won&amp;#8217;t need to define it yourself) - that&amp;#8217;s from where the
&lt;tt class="docutils literal"&gt;app_label/app_model_list.html&lt;/tt&gt; default template name is&amp;nbsp;created.&lt;/p&gt;
&lt;p&gt;Similar to the &lt;tt class="docutils literal"&gt;ListView&lt;/tt&gt; is the &lt;a class="reference external" href="https://docs.djangoproject.com/en/2.0/ref/class-based-views/generic-display/#detailview"&gt;DetailView&lt;/a&gt; which has the same class hierarchy as the &lt;tt class="docutils literal"&gt;ListView&lt;/tt&gt; with two differences:
It uses &lt;tt class="docutils literal"&gt;SingleObjectMixin&lt;/tt&gt; instead of &lt;tt class="docutils literal"&gt;MultipleOjbectMixin&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;SingleObjectTemplateResponseMixin&lt;/tt&gt; instead of &lt;tt class="docutils literal"&gt;MultipleObjectTemplateResponseMixin&lt;/tt&gt;
and &lt;tt class="docutils literal"&gt;BaseDetailView&lt;/tt&gt; instead of &lt;tt class="docutils literal"&gt;BaseListView&lt;/tt&gt;. The
&lt;tt class="docutils literal"&gt;SingleObjectMixin&lt;/tt&gt; will use the &lt;tt class="docutils literal"&gt;get_queryset()&lt;/tt&gt; (in a similar manner to the &lt;tt class="docutils literal"&gt;get_queryset()&lt;/tt&gt; of
&lt;tt class="docutils literal"&gt;MultipleObjectMixin&lt;/tt&gt;) method to return a single object (so all attributes and methods
concerning ordering or pagination are missing) but instead has the &lt;tt class="docutils literal"&gt;get_object()&lt;/tt&gt; method which
will pick and return a single object from that queryset (using a &lt;tt class="docutils literal"&gt;pk&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;slug&lt;/tt&gt; parameter). This object
will be put to the context of this view by the &lt;tt class="docutils literal"&gt;get_context_data&lt;/tt&gt;. The &lt;tt class="docutils literal"&gt;BaseDetailView&lt;/tt&gt; just
defines a proper &lt;tt class="docutils literal"&gt;get&lt;/tt&gt; to call the &lt;tt class="docutils literal"&gt;get_context_data&lt;/tt&gt; (of &lt;tt class="docutils literal"&gt;SingleObjectMixin&lt;/tt&gt;) and finally
the &lt;tt class="docutils literal"&gt;SingleObjectTemplateResponseMixin&lt;/tt&gt; will automatically generate the template name (i.e generate
&lt;tt class="docutils literal"&gt;app_label/app_model_detail.html&lt;/tt&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-createview"&gt;
&lt;h3&gt;The&amp;nbsp;CreateView&lt;/h3&gt;
&lt;p&gt;The next Django &lt;span class="caps"&gt;CBV&lt;/span&gt; we&amp;#8217;ll talk about is &lt;a class="reference external" href="https://docs.djangoproject.com/en/2.0/ref/class-based-views/generic-display/#createview"&gt;CreateView&lt;/a&gt;. This class is used to create a new instance
of a model. It has a rather complex hierarchy diagram but we&amp;#8217;ve already discussed most of these&amp;nbsp;classes:&lt;/p&gt;
&lt;img src="https://yuml.me/diagram/plain;/class/[SingleObjectTemplateResponseMixin%7Bbg:white%7D]%5E-[CreateView%7Bbg:green%7D],%20[TemplateResponseMixin%7Bbg:white%7D]%5E-[SingleObjectTemplateResponseMixin%7Bbg:white%7D],%20[BaseCreateView%7Bbg:white%7D]%5E-[CreateView%7Bbg:green%7D],%20[ModelFormMixin%7Bbg:white%7D]%5E-[BaseCreateView%7Bbg:white%7D],%20[FormMixin%7Bbg:white%7D]%5E-[ModelFormMixin%7Bbg:white%7D],%20[ContextMixin%7Bbg:white%7D]%5E-[FormMixin%7Bbg:white%7D],%20[SingleObjectMixin%7Bbg:white%7D]%5E-[ModelFormMixin%7Bbg:white%7D],%20[ContextMixin%7Bbg:white%7D]%5E-[SingleObjectMixin%7Bbg:white%7D],%20[ProcessFormView%7Bbg:white%7D]%5E-[BaseCreateView%7Bbg:white%7D],%20[View%7Bbg:lightblue%7D]%5E-[ProcessFormView%7Bbg:white%7D].svg" /&gt;&lt;p&gt;As we can see the &lt;tt class="docutils literal"&gt;CreateView&lt;/tt&gt; inherits from &lt;tt class="docutils literal"&gt;BaseCreateView&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;SingleObjectTemplateResponseMixin&lt;/tt&gt;. The
&lt;tt class="docutils literal"&gt;SingleObjectTemplateResponseMixin&lt;/tt&gt; is mainly used to define the template names that will be searched for
(i.e &lt;tt class="docutils literal"&gt;app_label/app_model_form.html&lt;/tt&gt;), while the &lt;tt class="docutils literal"&gt;BaseCreateView&lt;/tt&gt;
is used to combine the functionality of &lt;tt class="docutils literal"&gt;ProcessFormView&lt;/tt&gt; (that handles the basic form workflow as we have
already discussed) and &lt;tt class="docutils literal"&gt;ModelFormMixin&lt;/tt&gt;. The &lt;tt class="docutils literal"&gt;ModelFormMixin&lt;/tt&gt; is a rather complex mixin that inherits from
both &lt;tt class="docutils literal"&gt;SingleObjectMixin&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;FormMixin&lt;/tt&gt;. The &lt;tt class="docutils literal"&gt;SingleObjectMixin&lt;/tt&gt; functionality is not really used by &lt;tt class="docutils literal"&gt;CreateView&lt;/tt&gt;
(since no object will need to be retrieved for the &lt;tt class="docutils literal"&gt;CreateView&lt;/tt&gt;) however the &lt;tt class="docutils literal"&gt;ModelFormMixin&lt;/tt&gt; is also used
by &lt;tt class="docutils literal"&gt;UpdateView&lt;/tt&gt; that&amp;#8217;s why &lt;tt class="docutils literal"&gt;ModelFormMixin&lt;/tt&gt; also inherits from it (to retrieve the object that will be&amp;nbsp;updated).&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;ModelFormMixin&lt;/tt&gt; mixin adds functionality
for handling forms related to models and object instances. More specifically it adds functionality for:
* creating a form class (if one is not provided) by the configured model / queryset. If you don&amp;#8217;t provide the form class (by using the &lt;tt class="docutils literal"&gt;form_class&lt;/tt&gt; attribute) then you need to configure the fields that the generated form will display by passing an array of field names through the &lt;tt class="docutils literal"&gt;fields&lt;/tt&gt; attribute
* overrides the &lt;tt class="docutils literal"&gt;form_valid&lt;/tt&gt; in order to save the object instance of the form
* fixes &lt;tt class="docutils literal"&gt;get_success_url&lt;/tt&gt; to redirect to the saved object&amp;#8217;s absolute_url when the object is saved
* pass the current object to be updated (that was retrieving through the &lt;tt class="docutils literal"&gt;SingleObjectMixin&lt;/tt&gt;) -if there is a current object- to the form as the &lt;tt class="docutils literal"&gt;instance&lt;/tt&gt; attribute&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-updateview-and-deleteview"&gt;
&lt;h3&gt;The UpdateView and&amp;nbsp;DeleteView&lt;/h3&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://docs.djangoproject.com/en/2.0/ref/class-based-views/generic-display/#updateview"&gt;UpdateView&lt;/a&gt; class is almost identical to the &lt;tt class="docutils literal"&gt;CreateView&lt;/tt&gt; - the only difference is that
&lt;tt class="docutils literal"&gt;UpdateView&lt;/tt&gt; inherits from &lt;tt class="docutils literal"&gt;BaseUpdateView&lt;/tt&gt; (and &lt;tt class="docutils literal"&gt;SingleObjectTemplateResponseMixin&lt;/tt&gt;) instead
of &lt;tt class="docutils literal"&gt;BaseCreateView&lt;/tt&gt;.  The &lt;tt class="docutils literal"&gt;BaseUpdateView&lt;/tt&gt; overrides the &lt;tt class="docutils literal"&gt;get&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;post&lt;/tt&gt; methods of
&lt;tt class="docutils literal"&gt;ProcessFormView&lt;/tt&gt; to retrieve the object (using &lt;tt class="docutils literal"&gt;SingleObjectMixin&lt;/tt&gt;&amp;#8216;s &lt;tt class="docutils literal"&gt;get_object()&lt;/tt&gt;)
and assign it to an instance variable - this will then be picked up by the &lt;tt class="docutils literal"&gt;ModelFormMixin&lt;/tt&gt; and used
properly in the form as explained before. One thing I notice here is that it seems that the hierarchy would
be better if the &lt;tt class="docutils literal"&gt;ModelFormMixin&lt;/tt&gt; inherited &lt;em&gt;only&lt;/em&gt; from &lt;tt class="docutils literal"&gt;FormMixin&lt;/tt&gt; (instead of both from
&lt;tt class="docutils literal"&gt;FormMixin&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;SingleObjectMixin&lt;/tt&gt;) and &lt;tt class="docutils literal"&gt;BaseUpdateView&lt;/tt&gt; inheriting from &lt;tt class="docutils literal"&gt;ProcessFormView&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;ModelForMixin&lt;/tt&gt; &lt;em&gt;and&lt;/em&gt; &lt;tt class="docutils literal"&gt;SingleObjectMixin&lt;/tt&gt;. This way the &lt;tt class="docutils literal"&gt;BaseCreateView&lt;/tt&gt; wouldn&amp;#8217;t get the
non-needed &lt;tt class="docutils literal"&gt;SingleObjectMixin&lt;/tt&gt; functionality. I am not sure why Django is implemented this way
(i.e the &lt;tt class="docutils literal"&gt;ModelFormMixin&lt;/tt&gt; also inheriting from &lt;tt class="docutils literal"&gt;SingleObjectMixin&lt;/tt&gt; thus passing this non-needed
functionality to &lt;tt class="docutils literal"&gt;BaseCreateView&lt;/tt&gt;) &amp;#8212; if a reader has a clue I&amp;#8217;d like to know&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;In any way, I&amp;#8217;d like to also present the &lt;a class="reference external" href="https://docs.djangoproject.com/en/2.0/ref/class-based-views/generic-display/#deleteview"&gt;DeleteView&lt;/a&gt; which is more or less the same as the &lt;a class="reference external" href="https://docs.djangoproject.com/en/2.0/ref/class-based-views/generic-display/#detailview"&gt;DetailView&lt;/a&gt;
with the addition of the &lt;tt class="docutils literal"&gt;DeleteMixin&lt;/tt&gt; in the mix. The &lt;tt class="docutils literal"&gt;DeleteMixin&lt;/tt&gt; adds a &lt;tt class="docutils literal"&gt;post()&lt;/tt&gt; method
that will delete the object when called and makes &lt;tt class="docutils literal"&gt;success_url&lt;/tt&gt; required (since there would be no
object to redirect to after this view is&amp;nbsp;posted).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="access-control-mixins"&gt;
&lt;h3&gt;Access control&amp;nbsp;mixins&lt;/h3&gt;
&lt;p&gt;Another small hierarchy of class based views (actually these are all mixins) are the authentication ones which
can be used to control access to a view.
These are &lt;tt class="docutils literal"&gt;AcessMixin&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;LoginRequiredMixin&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;PermissionRequiredMixin&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;UserPassesTestMixin&lt;/tt&gt;.
The &lt;tt class="docutils literal"&gt;AccessMixin&lt;/tt&gt; provides some basic functionality (i.e what to do when the user does not have access
to the view, find out the login url to redirect him etc) and is used as a base for the other three. These
three override the &lt;tt class="docutils literal"&gt;dispatch()&lt;/tt&gt; method of &lt;tt class="docutils literal"&gt;View&lt;/tt&gt; to check if the user has the specific rights (i.e
if he has logged in for &lt;tt class="docutils literal"&gt;LoginRequiredMixin&lt;/tt&gt;, if he has the defined permissions for &lt;tt class="docutils literal"&gt;PermissionRequiredMixin&lt;/tt&gt;
or if he passes the provided test in &lt;tt class="docutils literal"&gt;UserPassesTextMixin&lt;/tt&gt;). If the user has the rights the view will proceed
as normally (call super&amp;#8217;s dispatch) else the access denied functionality from &lt;tt class="docutils literal"&gt;AccessMixin&lt;/tt&gt; will be&amp;nbsp;implemented.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-other-cbvs"&gt;
&lt;h3&gt;Some other&amp;nbsp;CBVs&lt;/h3&gt;
&lt;p&gt;Beyond the class based views I discussed in this section, Django also has a bunch of CBVs related
to account views (&lt;tt class="docutils literal"&gt;LoginView&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;LogoutView&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;PasswordChangeView&lt;/tt&gt; etc) and Dates (&lt;tt class="docutils literal"&gt;DateDetailView&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;YearArchiveView&lt;/tt&gt; etc).
I won&amp;#8217;t go into detail about these since they follow the same concepts and use most of the mixins
we&amp;#8217;ve discussed before. Using the &lt;span class="caps"&gt;CBV&lt;/span&gt; Inspector you should be able to follow along and decide the methods you need
to override for your&amp;nbsp;needs.&lt;/p&gt;
&lt;p&gt;Also, most well written Django packages will define their own CBVs that inherit
from the Django CBVs - with the knowledge you acquired here you will be able to follow along on their source code to understand how everything&amp;nbsp;works.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="real-world-use-cases"&gt;
&lt;h2&gt;Real world use&amp;nbsp;cases&lt;/h2&gt;
&lt;p&gt;In this section I am going to present a number of use cases demonstrating the usefulness of Django CBVs. In most of
these examples I am going to override one of the methods of the mixins I discussed in the previous section. There
are &lt;em&gt;two&lt;/em&gt; methods you can use for integrating the following use cases to your&amp;nbsp;application.&lt;/p&gt;
&lt;p&gt;Create your own class inheriting from one of the Django CBVs and add to it directly the method to override. For example,
if you wanted to override the &lt;tt class="docutils literal"&gt;get_queryset()&lt;/tt&gt; method a &lt;tt class="docutils literal"&gt;ListView&lt;/tt&gt; you would do&amp;nbsp;a:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GetQuerysetOverrideListView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ListView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_queryset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;qs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_queryset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;qs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;PUBLISHED&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is useful if you know that you aren&amp;#8217;t going to need the overriden &lt;tt class="docutils literal"&gt;get_queryset&lt;/tt&gt; functionality to a different
method and following the &lt;span class="caps"&gt;YAGNI&lt;/span&gt; principle (or if you know that even if you need it you could inherit from &lt;tt class="docutils literal"&gt;GetQuerysetOverrideListView&lt;/tt&gt;
i.e in another ListView).
However, if you know that there may be more CBVs that would need their
queryset filtered by &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;status='&lt;span class="caps"&gt;PUBLISHED&lt;/span&gt;'&lt;/span&gt;&lt;/tt&gt; then you should add a mixin that would be used by your&amp;nbsp;CBVs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GetQuerysetOverrideMixin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_queryset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;qs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_queryset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;qs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;PUBLISHED&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GetQuerysetOverrideListView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GetQuerysetOverrideMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ListView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, one thing that needs some discussion here is that the method &lt;tt class="docutils literal"&gt;get_queryset&lt;/tt&gt; is provided by a mixin (in fact
it is provided by two mixins: &lt;tt class="docutils literal"&gt;MultipleObjectMixin&lt;/tt&gt; for &lt;tt class="docutils literal"&gt;ListView&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;SingleObjectMixin&lt;/tt&gt; for &lt;tt class="docutils literal"&gt;DetailView&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;UpdateView&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;DeleteView&lt;/tt&gt;). Because of how &lt;span class="caps"&gt;MRO&lt;/span&gt; works, I won&amp;#8217;t need to inherit &lt;tt class="docutils literal"&gt;GetQuerysetOverrideMixin&lt;/tt&gt; from
&lt;tt class="docutils literal"&gt;MultipleObjectMixin&lt;/tt&gt; (or &lt;tt class="docutils literal"&gt;SingleObjectMixin&lt;/tt&gt; but let&amp;#8217;s ignore that for now) but I can just inherit from object
and make sure that, as already discussed, put the mixin &lt;em&gt;before&lt;/em&gt; (to the left) of the &lt;span class="caps"&gt;CBV&lt;/span&gt;. Notice that even if I had
defined &lt;tt class="docutils literal"&gt;GetQuerysetOverrideMixin&lt;/tt&gt; as &lt;tt class="docutils literal"&gt;GetQuerysetOverrideMixin(MultipleObjectMixin)&lt;/tt&gt; the &lt;tt class="docutils literal"&gt;MultipleObjectMixin&lt;/tt&gt; class would
be found &lt;em&gt;twice&lt;/em&gt; in the &lt;span class="caps"&gt;MRO&lt;/span&gt; list so only the rightmost instance would remain. So the &lt;span class="caps"&gt;MRO&lt;/span&gt; for both &lt;tt class="docutils literal"&gt;GetQuerysetOverrideMixin(object, )&lt;/tt&gt;
and &lt;tt class="docutils literal"&gt;GetQuerysetOverrideMixin(MultipleObjectMixin)&lt;/tt&gt; &lt;em&gt;would be the same&lt;/em&gt;! Also, inheriting directly from object makes
our &lt;tt class="docutils literal"&gt;GetQuerysetOverrideMixin&lt;/tt&gt; more &lt;span class="caps"&gt;DRY&lt;/span&gt; since if it inherited from &lt;tt class="docutils literal"&gt;MultipleObjectMixin&lt;/tt&gt; we&amp;#8217;d need to create &lt;em&gt;another&lt;/em&gt;
version of it that would inherit from &lt;tt class="docutils literal"&gt;SingleObjectMixin&lt;/tt&gt;; this is because &lt;tt class="docutils literal"&gt;get_queryset&lt;/tt&gt; exists in both these&amp;nbsp;mixins.&lt;/p&gt;
&lt;p&gt;For some of the following use cases I am also going to use the following models for user generated content (articles and uploaded&amp;nbsp;files):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;STATUS_CHOICES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DRAFT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Draft&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;PUBLISHED&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Published&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;REMOVED&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Removed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Category&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;permissions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;publisher_access&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Publisher Access&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;admin_access&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Admin Access&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AbstractGeneralInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;STATUS_CHOICES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;category&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PROTECT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;created_on&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now_add&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;created_by&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AUTH_USER_MODEL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PROTECT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%(class)s&lt;/span&gt;&lt;span class="s1"&gt;_created_by&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;modified_on&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;modified_by&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AUTH_USER_MODEL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PROTECT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%(class)s&lt;/span&gt;&lt;span class="s1"&gt;_modified_by&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;owned_by&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AUTH_USER_MODEL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PROTECT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%(class)s&lt;/span&gt;&lt;span class="s1"&gt;_owned_by&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;published_on&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;abstract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AbstractGeneralInfo&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Document&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AbstractGeneralInfo&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FileField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All this can be found on the accompanying project &lt;a class="reference external" href="https://github.com/spapas/cbv-tutorial"&gt;https://github.com/spapas/cbv-tutorial&lt;/a&gt; on the djangocbv app (visit &lt;a class="reference external" href="http://127.0.0.1:8001/djangocbv/"&gt;http://127.0.0.1:8001/djangocbv/&lt;/a&gt;).&lt;/p&gt;
&lt;div class="section" id="do-something-when-a-valid-form-is-submitted"&gt;
&lt;h3&gt;Do something when a valid form is&amp;nbsp;submitted&lt;/h3&gt;
&lt;p&gt;When a form is submitted and the form is valid
the &lt;tt class="docutils literal"&gt;form_valid&lt;/tt&gt; method of &lt;tt class="docutils literal"&gt;ModelForMixin&lt;/tt&gt; (and &lt;tt class="docutils literal"&gt;FormMixin&lt;/tt&gt;) will be called. This method
can be overridden to do various things before (or after) the form is saved. For example,
you may want have a field whose value is calculated from other fields in the form or you want to
create an extra object. Let&amp;#8217;s see a generic example of overriding a &lt;tt class="docutils literal"&gt;CreateView&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;UpdateView&lt;/tt&gt; with&amp;nbsp;comments:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# let&amp;#39;s calculate a field value&lt;/span&gt;
    &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;calculated_field&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cleaned_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cleaned_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c1"&gt;# save the form by calling super().form_valid(); keep the return value - it is the value of get_success_url&lt;/span&gt;
    &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# For Create or UpdateView, the just-saved object will be assigned to self.object&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Created an object with id {0}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# return the redirect&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect_to&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is rather complex so I&amp;#8217;ll also explain it: The form_valid gets the actual form which, since is validated
has a &lt;tt class="docutils literal"&gt;cleaned_data&lt;/tt&gt; dictionary of values. This form also has an &lt;tt class="docutils literal"&gt;instance&lt;/tt&gt; attribute which is the object
that this form is bound to - notice that a normal &lt;tt class="docutils literal"&gt;Form&lt;/tt&gt; won&amp;#8217;t have an instance only a &lt;tt class="docutils literal"&gt;ModelForm&lt;/tt&gt;.
This can be used to modify the instance of this form as needed - before saving it. When you want to actually save
the instance you call &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;super().form_valid()&lt;/span&gt;&lt;/tt&gt; passing it the modified form (and instance). This method does
three&amp;nbsp;things&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It saves the instance to the&amp;nbsp;database&lt;/li&gt;
&lt;li&gt;It assigns the saved object to the &lt;tt class="docutils literal"&gt;object&lt;/tt&gt; instance attribute (so you can refer to it by &lt;tt class="docutils literal"&gt;self.instance&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;It uses &lt;tt class="docutils literal"&gt;get_redirect_url&lt;/tt&gt; to retrieve the location where you should redirect after the form is&amp;nbsp;submitted&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thus in this example we save &lt;tt class="docutils literal"&gt;redirect_to&lt;/tt&gt; to return it also from our method also and then can use &lt;tt class="docutils literal"&gt;self.object.id&lt;/tt&gt;
to log the id of the current&amp;nbsp;object.&lt;/p&gt;
&lt;p&gt;On a more specific example, notice the &lt;tt class="docutils literal"&gt;Article&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;Document&lt;/tt&gt; models which both inherit (abstract)
from &lt;tt class="docutils literal"&gt;AbstractGeneralInfo&lt;/tt&gt; have a &lt;tt class="docutils literal"&gt;created_by&lt;/tt&gt; and
a &lt;tt class="docutils literal"&gt;modified_by&lt;/tt&gt; field. These fields have to be filled automatically from the current logged in user. Now, there are various
options to do that but what I vote for is using an &lt;tt class="docutils literal"&gt;AuditableMixin&lt;/tt&gt; as I have already described in &lt;a class="reference external" href="https://spapas.github.io/2015/01/21/django-model-auditing/#adding-simple-auditing-functionality-ourselves"&gt;my Django model auditing article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To replicate the functionality we&amp;#8217;ll create an &lt;tt class="docutils literal"&gt;AuditableMixin&lt;/tt&gt; like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AuditableMixin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;created_by&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;created_by&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;
        &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modified_by&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This mixin can be used by both the create and update view of both &lt;tt class="docutils literal"&gt;Article&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;Document&lt;/tt&gt;. So all four of these
classes will share the same functionality. Notice that the &lt;tt class="docutils literal"&gt;form_valid&lt;/tt&gt; method is overridden - the &lt;tt class="docutils literal"&gt;created_by&lt;/tt&gt;
of the form&amp;#8217;s instance (which is the object that was edited, remember how &lt;tt class="docutils literal"&gt;ModelFormMixin&lt;/tt&gt; works) will by set
to the current user if it is null (so it will be only set once) while the &lt;tt class="docutils literal"&gt;modified_by&lt;/tt&gt; will be set always to the
current user. Finally we call &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;super().form_valid&lt;/span&gt;&lt;/tt&gt; and return its response so
that the form will be actually saved and the redirect will go to the proper success url. To use it for example for the
&lt;tt class="docutils literal"&gt;Article&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;CreateView&lt;/tt&gt; should be defined like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ArticleCreateView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AuditableMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CreateView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="change-the-queryset-of-the-cbv"&gt;
&lt;h3&gt;Change the queryset of the &lt;span class="caps"&gt;CBV&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;All CBVs that inherit from &lt;tt class="docutils literal"&gt;SingleObjectMixin&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;MultipleObjectMixin&lt;/tt&gt; (&lt;tt class="docutils literal"&gt;ListView&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;DetailView&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;UpdateView&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;DeleteView&lt;/tt&gt;)
have a &lt;tt class="docutils literal"&gt;model&lt;/tt&gt; and a &lt;tt class="docutils literal"&gt;queryset&lt;/tt&gt; property that can be used (either one or the other) to define the queryset that will be used for
querying the database for that CBVs results. This queryset can be further dynamically refined by overriding the &lt;tt class="docutils literal"&gt;get_queryset()&lt;/tt&gt; method.
What I usually do is that I define the &lt;tt class="docutils literal"&gt;model&lt;/tt&gt; attribute and then override &lt;tt class="docutils literal"&gt;get_querset&lt;/tt&gt; in order to dynamically modify the&amp;nbsp;queryset.&lt;/p&gt;
&lt;p&gt;For example, let&amp;#8217;s say that I wanted to add a count of articles and documents per each category. Here&amp;#8217;s how the &lt;tt class="docutils literal"&gt;CategoryListView&lt;/tt&gt; could be&amp;nbsp;done:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CategoryListView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ExportCsvMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AdminOrPublisherPermissionRequiredMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ListView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Category&lt;/span&gt;
    &lt;span class="n"&gt;context_object_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;categories&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_queryset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;qs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_queryset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;qs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;annotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;article_cnt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;article&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;document_cnt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;document&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that I also use some more mixins for this &lt;tt class="docutils literal"&gt;ListView&lt;/tt&gt; (they&amp;#8217;ll be explained later). The &lt;tt class="docutils literal"&gt;get_queryset&lt;/tt&gt; adds
the annotation to the &lt;tt class="docutils literal"&gt;super()&lt;/tt&gt; queryset (which will be &lt;tt class="docutils literal"&gt;Category.objects.all()&lt;/tt&gt;). One final comment is that instead
of this, I could have more or less the same functionality by implementing &lt;tt class="docutils literal"&gt;CategoryListView&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CategoryListView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ExportCsvMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AdminOrPublisherPermissionRequiredMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ListView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;context_object_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;categories&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;annotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;article_cnt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;article&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;document_cnt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;document&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This has the same functionality (return all categories with the number of articles and documents for each one) and
saves some typing from overriding the &lt;tt class="docutils literal"&gt;get_queryset&lt;/tt&gt;  method. However as I said most of the time I use the model
attribute and override the &lt;tt class="docutils literal"&gt;get_queryset&lt;/tt&gt; method because it seems more explicit and descriptive to me and most of
the time I&amp;#8217;ll need to add some more filtering (based on the current user, based on some query parameter etc) that
can only be implemented on the &lt;tt class="docutils literal"&gt;get_queryset&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="allow-each-user-to-list-view-edit-delete-only-his-own-items"&gt;
&lt;h3&gt;Allow each user to list/view/edit/delete only his own&amp;nbsp;items&lt;/h3&gt;
&lt;p&gt;Continuing from the previous example of modifying the queryset, let&amp;#8217;s suppose that we want to allow each
user to be able to list the items (articles and
documents) he has created and view/edit/delete them. We also want to allow admins and publishers to view/edit&amp;nbsp;everything.&lt;/p&gt;
&lt;p&gt;Since the &lt;tt class="docutils literal"&gt;Article&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;Document&lt;/tt&gt; models both have an &lt;tt class="docutils literal"&gt;owned_by&lt;/tt&gt; element we can use use this to filter
the results returned by &lt;tt class="docutils literal"&gt;get_queryset()&lt;/tt&gt;. For example, here&amp;#8217;s a mixin that checks if the current user is
admin or publisher. If he is a publisher then he will just return the &lt;tt class="docutils literal"&gt;super()&lt;/tt&gt; queryset. If however he is a simple
user it will return only the results that are owned by him with &lt;tt class="docutils literal"&gt;qs.filter(owned_by=self.request.user)&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LimitAccessMixin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_queryset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;qs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_queryset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_perm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;djangocbv.admin_access&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_perm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;djangocbv.publisher_access&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;qs&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;qs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;owned_by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Another similar mixin that is used is the &lt;tt class="docutils literal"&gt;HideRemovedMixin&lt;/tt&gt; that, for simple users, excludes from the queryset the objects that
are&amp;nbsp;removed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HideRemovedMixin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_queryset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;qs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_queryset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_perm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;djangocbv.admin_access&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_perm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;djangocbv.publisher_access&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;qs&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;qs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exclude&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;REMOVED&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One thing that needs a little discussion is that for both of these mixins I am using &lt;tt class="docutils literal"&gt;get_queryset&lt;/tt&gt; to implement access control to
allow using the same mixin for views that inherit from both &lt;tt class="docutils literal"&gt;SingleObjectMixin&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;MultipleObjectMixin&lt;/tt&gt; (since the &lt;tt class="docutils literal"&gt;get_queryset&lt;/tt&gt; is
used in both of them). This
means that when a user tries to access an object that has not access to he&amp;#8217;ll get a nice 404&amp;nbsp;error.&lt;/p&gt;
&lt;p&gt;Beyond this, instead of filtering the queryset,
for views inheriting from &lt;tt class="docutils literal"&gt;SingleObjectMixin&lt;/tt&gt; (i.e &lt;tt class="docutils literal"&gt;DetailView&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;UpdateView&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;DeleteView&lt;/tt&gt;)
we could have overridden the &lt;tt class="docutils literal"&gt;get_object&lt;/tt&gt; method to raise an access denied exception. Here&amp;#8217;s how &lt;tt class="docutils literal"&gt;get_object&lt;/tt&gt; could be
overridden to raise a 403 Forbidden status when a user tries to access an object that does not belong to&amp;nbsp;him:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.exceptions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PermissionDenied&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_object&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;owned_by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;PermissionDenied&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configure-the-form-s-initial-values-from-get-parameters"&gt;
&lt;h3&gt;Configure the form&amp;#8217;s initial values from &lt;span class="caps"&gt;GET&lt;/span&gt;&amp;nbsp;parameters&lt;/h3&gt;
&lt;p&gt;Sometimes we want to have a &lt;tt class="docutils literal"&gt;CreateView&lt;/tt&gt; with some fields already filled. I usually
implement this by passing the proper parameters to the &lt;span class="caps"&gt;URL&lt;/span&gt; (i.e by calling it as /create_view?category_id=2)
and then using the following mixin to override the &lt;tt class="docutils literal"&gt;FormMixin&lt;/tt&gt; &lt;tt class="docutils literal"&gt;get_initial&lt;/tt&gt; method in order to
return the form&amp;#8217;s initial data from&amp;nbsp;it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SetInitialMixin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_initial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;initial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SetInitialMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_initial&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;initial&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;initial&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So if the /article_create url can be used to initialte the &lt;tt class="docutils literal"&gt;CreateView&lt;/tt&gt; for the article,
using &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/article_create?category_id=3&lt;/span&gt;&lt;/tt&gt; will show the CreateView with the Category with id=3
pre-selected in the category&amp;nbsp;field!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pass-extra-kwargs-to-the-formview-form"&gt;
&lt;h3&gt;Pass extra kwargs to the FormView&amp;nbsp;form&lt;/h3&gt;
&lt;p&gt;This is a very common requirement. The form may need to be modified by an external condition,
for example the current user or something that can be calculated from the view. Here&amp;#8217;s a
sample mixin that passes the current request (which also includes the user) to the&amp;nbsp;form:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RequestArgMixin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_form_kwargs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;kwargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RequestArgMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_form_kwargs&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;request&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Please notice that the form has to properly handle the extra kwarg in its constructor,
before calling the super&amp;#8217;s constructor. For
example, here&amp;#8217;s how a form that can accept the request could be&amp;nbsp;implemented:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RequestForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;request&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We use &lt;tt class="docutils literal"&gt;pop&lt;/tt&gt; to remove the request from the received &lt;tt class="docutils literal"&gt;kwargs&lt;/tt&gt; and only then we call the
parent&amp;nbsp;constructor.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="add-values-to-the-context"&gt;
&lt;h3&gt;Add values to the&amp;nbsp;context&lt;/h3&gt;
&lt;p&gt;To add values to the context of a &lt;span class="caps"&gt;CBV&lt;/span&gt; we override the &lt;tt class="docutils literal"&gt;get_context_data()&lt;/tt&gt; method. Here&amp;#8217;s
a mixin that adds a list of categories to all CBVs using&amp;nbsp;it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CategoriesContextMixin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_context_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_context_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;categories&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that the mixin calls super to get the context data of its ancestors and appends to it. This
mean that if we also had a mixin that f.e added the current logged in user to the context (this isn&amp;#8217;t really
needed since there&amp;#8217;s a context processor for this but anyway) then when a &lt;span class="caps"&gt;CBV&lt;/span&gt; inherited from both of
them then the data of both of them would be added to the&amp;nbsp;context.&lt;/p&gt;
&lt;p&gt;As a general comment there are three other methods the same functionality could be&amp;nbsp;achieved:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Just override the &lt;tt class="docutils literal"&gt;get_context_data&lt;/tt&gt; of the &lt;span class="caps"&gt;CBV&lt;/span&gt; you want to add extra data to its&amp;nbsp;context&lt;/li&gt;
&lt;li&gt;Add a template tag that will bring the needed data to the&amp;nbsp;template&lt;/li&gt;
&lt;li&gt;Use a context processor to bring the data to all&amp;nbsp;templates&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As can be understood, each of the above methods has certain advantages and disadvantages. For
example, if the extra data will query the database then the context processor method will add
one extra query for all page loads (even if the data is not needed). On the other hand,
the template tag will query the database only on specific views but it makes debugging and
reasoning about your template more difficult since if you have a lot of template tags you&amp;#8217;ll have
various context variables appearing from thing&amp;nbsp;air!&lt;/p&gt;
&lt;p&gt;One final comment is that overriding the &lt;tt class="docutils literal"&gt;get_context_data&lt;/tt&gt; method will probably be the most
common thing you&amp;#8217;re going to do when using CBVs (you&amp;#8217;ll definitely need to add things to the context)
so try to remember the following 3 needed&amp;nbsp;lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_context_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_context_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# ... here we add stuff to the ctx&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="add-a-simple-filter-to-a-listview"&gt;
&lt;h3&gt;Add a simple filter to a&amp;nbsp;ListView&lt;/h3&gt;
&lt;p&gt;For filtering I recommend using the excellent &lt;a class="reference external" href="https://github.com/carltongibson/django-filter"&gt;django-filter&lt;/a&gt; package as I&amp;#8217;ve already
presented in &lt;a class="reference external" href="https://spapas.github.io/2017/10/11/essential-django-packages/"&gt;my essential Django package list&lt;/a&gt;. Here&amp;#8217;s how a mixin can be created that
adds a filter to the&amp;nbsp;context:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AddFilterMixin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;filter_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_context_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_context_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter_class&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;NotImplementedError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Please define filter_class when using AddFilterMixin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;filter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_queryset&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;filter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;filter&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context_object_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context_object_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qs&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that the &lt;tt class="docutils literal"&gt;get_context_data&lt;/tt&gt; checks to see if the &lt;tt class="docutils literal"&gt;filter_class&lt;/tt&gt; attribute has been
defined (if not it will raise a useful explanation). It will then instantiate the filter class
passing it the &lt;tt class="docutils literal"&gt;self.request.&lt;span class="caps"&gt;GET&lt;/span&gt;&lt;/tt&gt; and the current queryset (&lt;tt class="docutils literal"&gt;self.get_queryset()&lt;/tt&gt;) - so for
example any extra filtering you are doing to the queryset (for example only show content owned by the
current user) will be also used. Finally, pass the filter to the context and assign the
contect_object_name to the filtered&amp;nbsp;queryset.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s for example how this mixin is used for &lt;tt class="docutils literal"&gt;ArticleListView&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ArticleListView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AddFilterMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ListView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;
    &lt;span class="n"&gt;context_object_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;articles&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;filter_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArticleFilter&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then just add the following to the &lt;tt class="docutils literal"&gt;article_list.html&lt;/tt&gt; template:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;submit&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Filter&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;articles&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;Display&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;filtered&lt;/span&gt; &lt;span class="n"&gt;articles&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;here&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;endfor&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="support-for-success-messages"&gt;
&lt;h3&gt;Support for success&amp;nbsp;messages&lt;/h3&gt;
&lt;p&gt;Django has a very useful &lt;a class="reference external" href="https://docs.djangoproject.com/en/2.0/ref/contrib/messages/"&gt;messages framework&lt;/a&gt; which can be used to add flash messages
to a view. A flash message is a message that persists in the sesion until it is viewed
by the user. So, for example when a user edits an object and saves it, he&amp;#8217;ll be redirected
to the success page - if you have configured a flash message to inform the user that the
save was ok then he&amp;#8217;ll see this message once and then if he reloads the page it will
be&amp;nbsp;removed.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s a mixin that can be used to support flash messages using Django&amp;#8217;s message&amp;nbsp;framework:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SuccessMessageMixin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;success_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_success_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;success_message&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_success_message&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This mixin overrides the &lt;tt class="docutils literal"&gt;form_valid&lt;/tt&gt; and adds the message using &lt;tt class="docutils literal"&gt;get_success_message&lt;/tt&gt; - this
can be overriden if you want to have a dynamic message or just set the &lt;tt class="docutils literal"&gt;success_message&lt;/tt&gt; attribute
for a static message, for example something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SuccesMessageArticleCreateView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SuccessMessageMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CreateView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;success_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Object was created!&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;#8217;d like to once again point out here that since the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;super().form_valid(form)&lt;/span&gt;&lt;/tt&gt; method is properly used
then if a &lt;span class="caps"&gt;CBV&lt;/span&gt; uses multiple mixins that override form_valid (for example if your &lt;span class="caps"&gt;CBV&lt;/span&gt; overrides both
&lt;tt class="docutils literal"&gt;SuccessMessageMixin&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;AuditableMixin&lt;/tt&gt; then the form_valid of &lt;em&gt;both&lt;/em&gt; will be called so you&amp;#8217;ll
get both the created_by/modified_by values set to the current user and the success&amp;nbsp;message!&lt;/p&gt;
&lt;p&gt;Notice that Django actually provides an implementation of &lt;a class="reference external" href="https://docs.djangoproject.com/en/2.0/ref/contrib/messages/#adding-messages-in-class-based-views"&gt;a message mixin&lt;/a&gt; which can be used instead
of the proposed implementation here (I didn&amp;#8217;t know it until recently that&amp;#8217;s why I am using this to some
projects and I also present it&amp;nbsp;here).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="implement-a-quick-moderation"&gt;
&lt;h3&gt;Implement a quick&amp;nbsp;moderation&lt;/h3&gt;
&lt;p&gt;It is easy to implement some moderation to our model publishing. For example, let&amp;#8217;s suppose that we only
allow publishers to publish a model. Here&amp;#8217;s how it can be&amp;nbsp;done:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;REMOVED&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_perm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;djangocbv.publisher_access&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;PUBLISHED&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;DRAFT&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, first of all we make sure that the object is not &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;REMOVED&lt;/span&gt;&lt;/tt&gt; (if it is
remove it we don&amp;#8217;t do anything else). Next we check if the current user has
&lt;tt class="docutils literal"&gt;publisher_access&lt;/tt&gt; if yes we change the object&amp;#8217;s status to &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;PUBLISHED&lt;/span&gt;&lt;/tt&gt; - on any
other case we change its status to &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;DRAFT&lt;/span&gt;&lt;/tt&gt;. Notice that this means that whenever a
publisher saves the object it will be published and whenever a non-publisher saves it
it will be made a draft. We then call our ancestor&amp;#8217;s &lt;tt class="docutils literal"&gt;form_valid&lt;/tt&gt; to save the object
and return to success&amp;nbsp;url.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;d like to repeat here that this mixin, since it calls super, can work concurrently
with any other mixins that override &lt;tt class="docutils literal"&gt;form_valid&lt;/tt&gt; (and also call their super method
of course), for example it can be used together with the audit (auto-fill created_by
and moderated_by) and the success mixin we defined&amp;nbsp;previously!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="allow-access-to-a-view-if-a-user-has-one-out-of-a-group-of-permissions"&gt;
&lt;h3&gt;Allow access to a view if a user has one out of a group of&amp;nbsp;permissions&lt;/h3&gt;
&lt;p&gt;For this we&amp;#8217;ll need to use the authentication mixins functionality. We could implement
this by overriding &lt;tt class="docutils literal"&gt;PermissionRequiredMixin&lt;/tt&gt; or by overriding &lt;tt class="docutils literal"&gt;UserPassesTestMixin&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Using &lt;tt class="docutils literal"&gt;PermissionRequiredMixin&lt;/tt&gt; is not very easy because the way it works
it will allow access if the user has &lt;em&gt;all&lt;/em&gt; permissions from the group (not only one as is the requirement).
Of course you could override its &lt;tt class="docutils literal"&gt;has_permission&lt;/tt&gt; method to change the way it checks if
the user has the permissions (i.e make sure it has one permission instead of&amp;nbsp;all):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AnyPermissionRequiredMixin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PermissionRequiredMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;has_permission&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;perms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_permission_required&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_perm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;perm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;perm&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;perms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Also we could implement our mixin using &lt;tt class="docutils literal"&gt;UserPassesTestMixin&lt;/tt&gt; as its&amp;nbsp;base:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AnyPermissionRequiredAlternativeMixin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UserPassesTestMixin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;permissions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_perm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;perm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;perm&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;permissions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The functionality is very simple: If the user has one of the list of the configured permissions then the test will pass (so he&amp;#8217;ll have access to the view).
If instead the user has none of the permissions then he won&amp;#8217;t be able to access the&amp;nbsp;view.&lt;/p&gt;
&lt;p&gt;Notice that for the above implementations we inherited from &lt;tt class="docutils literal"&gt;PermissionRequiredMixin&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;UserPassesTextMixin&lt;/tt&gt; to keep their functionality - if we had inherited
these mixins from object then we&amp;#8217;d need to inherit our CBVs from both &lt;tt class="docutils literal"&gt;AnyPermissionRequiredMixin&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;PermissionRequiredMixin&lt;/tt&gt; or
&lt;tt class="docutils literal"&gt;AnyPermissionRequiredAlternativeMixin&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;UserPassesTestMixin&lt;/tt&gt; (with the correct &lt;span class="caps"&gt;MRO&lt;/span&gt; order of&amp;nbsp;course).&lt;/p&gt;
&lt;p&gt;Now, the whole permission cheking functionality can be even more &lt;span class="caps"&gt;DRY&lt;/span&gt;. Let&amp;#8217;s suppose that we know that there are a couple of views which should only
be visible to users having either the &lt;tt class="docutils literal"&gt;app.admin&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;app.curator&lt;/tt&gt; permission. Instead of inheriting all these views from &lt;tt class="docutils literal"&gt;AnyPermissionRequiredMixin&lt;/tt&gt;
and configuring the permissions list to each one, the &lt;span class="caps"&gt;DRY&lt;/span&gt; way to implement this is to add yet another mixin from which the CBVs will actually&amp;nbsp;inhert:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AdminOrPublisherPermissionRequiredMixin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AnyPermissionRequiredMixin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;permissions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;djangocbv.admin_access&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;djangocbv.publisher_access&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="disable-a-view-based-on-some-condition"&gt;
&lt;h3&gt;Disable a view based on some&amp;nbsp;condition&lt;/h3&gt;
&lt;p&gt;There are times you want to disable a view based on an arbitrary condition - for example example make the view
disabled before a specific date. Here&amp;#8217;s a simple mixin that overrides &lt;tt class="docutils literal"&gt;dispatch&lt;/tt&gt; to do&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DisabledDateMixin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;the_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2018&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;the_date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;PermissionDenied&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can even disable a view completely  in case you want to keep it in your urls.py using this&amp;nbsp;mixin:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DisabledDateMixin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;PermissionDenied&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="output-non-html-views"&gt;
&lt;h3&gt;Output non-html&amp;nbsp;views&lt;/h3&gt;
&lt;p&gt;I&amp;#8217;ve written a whole article about this, please take a look at my &lt;a class="reference external" href="https://spapas.github.io/2014/09/15/django-non-html-responses/"&gt;Django non-&lt;span class="caps"&gt;HTML&lt;/span&gt; responses&lt;/a&gt;&amp;nbsp;article.&lt;/p&gt;
&lt;p&gt;Also, notice that is very easy to create a mixin that will output a view to &lt;span class="caps"&gt;PDF&lt;/span&gt; - I have already written
an &lt;a class="reference external" href="https://spapas.github.io/2015/11/27/pdf-in-django/#using-a-cbv"&gt;essential guide for outputting PDFs in Django&lt;/a&gt; so I am just going to refer you to this article for
(much more)&amp;nbsp;information!&lt;/p&gt;
&lt;p&gt;Finally, let&amp;#8217;s take a look at a generic Mixin that you can use to add &lt;span class="caps"&gt;CSV&lt;/span&gt; exporting capabilities to a
&lt;tt class="docutils literal"&gt;ListView&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ExportCsvMixin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;render_to_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;response_kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;text/csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-Disposition&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;attachment; filename=&amp;quot;export.csv&amp;quot;&amp;#39;&lt;/span&gt;

            &lt;span class="n"&gt;writer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;object_list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Write headers&lt;/span&gt;
                    &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render_to_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;response_kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see this mixin overrides the &lt;tt class="docutils literal"&gt;render_to_response&lt;/tt&gt; method. It will check if there&amp;#8217;s a
&lt;tt class="docutils literal"&gt;csv&lt;/tt&gt; key to the &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;GET&lt;/span&gt;&lt;/tt&gt; queryset dictionary, thus the url must be called with &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;?csv=true&lt;/span&gt;&lt;/tt&gt; or something similar. You
can just add this link to your&amp;nbsp;template:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;button&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;?csv=true&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Export csv&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So if the view needs to be exported to &lt;span class="caps"&gt;CSV&lt;/span&gt;, it will create a new &lt;tt class="docutils literal"&gt;HttpResponse&lt;/tt&gt; object with the correct content type.
The next line will add a header that (&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Content-Disposition&lt;/span&gt;&lt;/tt&gt;) will mark the response as an attachment and give it a default file name.
We then crate a new &lt;tt class="docutils literal"&gt;csv.writer&lt;/tt&gt; passing the just-created response as the place to write the csv. The &lt;tt class="docutils literal"&gt;for&lt;/tt&gt; loop that follows
enumerates the &lt;tt class="docutils literal"&gt;object_list&lt;/tt&gt; value of the context (remember that this is added by the &lt;tt class="docutils literal"&gt;MultipleObjectMixin&lt;/tt&gt; and contains the
result of the &lt;tt class="docutils literal"&gt;ListView&lt;/tt&gt;). It will then use the object&amp;#8217;s &lt;tt class="docutils literal"&gt;__dict__&lt;/tt&gt; attribute to write the headers (for the first time) and then
write the values of all&amp;nbsp;objects.&lt;/p&gt;
&lt;p&gt;As another simple example, let&amp;#8217;s create a quick &lt;span class="caps"&gt;JSON&lt;/span&gt; output mixin for our&amp;nbsp;DetailViews:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JsonDetailMixin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;render_to_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;response_kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;)))&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render_to_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;response_kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you add this to a view inheriting from &lt;tt class="docutils literal"&gt;DetailView&lt;/tt&gt; and pass it the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;?json=true&lt;/span&gt;&lt;/tt&gt; query parameter
you&amp;#8217;ll get a &lt;span class="caps"&gt;JSON&lt;/span&gt;&amp;nbsp;response!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="use-one-templateview-for-multiple-html-templates"&gt;
&lt;h3&gt;Use one TemplateView for multiple html&amp;nbsp;templates&lt;/h3&gt;
&lt;p&gt;Using a &lt;tt class="docutils literal"&gt;TemplateView&lt;/tt&gt; you could display an html template without much problem just by
settings the &lt;tt class="docutils literal"&gt;template&lt;/tt&gt; attribute of your class. What if you wanted to have a single
&lt;tt class="docutils literal"&gt;TemplateView&lt;/tt&gt; that would display many templates based on the query path? Simple, just
override &lt;tt class="docutils literal"&gt;get_template_names&lt;/tt&gt; to return a different template based on the path. For example,
using this&amp;nbsp;view:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;class DynamicTemplateView(TemplateView):
    def get_template_names(self):
        what = self.kwargs[&amp;#39;what&amp;#39;]
        return &amp;#39;{0}.html&amp;#39;.format(what)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can render any template you have depending on the value of the &lt;tt class="docutils literal"&gt;what&lt;/tt&gt; kwarg. To allow
only specific template names you can either add a check to the above implementation (i.e that
what is &lt;tt class="docutils literal"&gt;help&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;about&lt;/tt&gt;) or you may do it to the urls.py if you use a regular expression. Thus,
to only allow &lt;tt class="docutils literal"&gt;help.html&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;about.html&lt;/tt&gt; to be rendered with this method add it to your urls like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;re_path(r&amp;#39;^show/(?P&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;what&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;help|about)/&amp;#39;, views.DynamicTemplateView.as_view(), name=&amp;#39;template-show&amp;#39;),
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, to use it to render the &lt;tt class="docutils literal"&gt;help.html&lt;/tt&gt; you&amp;#8217;ll just call it like &amp;lt;a href=&amp;#8217;{% url &amp;#8220;template-show&amp;#8221; &amp;#8220;help&amp;#8221;&amp;nbsp;%}&amp;#8217;&amp;gt;Help&amp;lt;/a&amp;gt;&lt;/p&gt;
&lt;p&gt;Notice that of course instead of creating the &lt;tt class="docutils literal"&gt;DynamicTemplateView&lt;/tt&gt; you could just dump these html files in your
static folder and return them using the static files functionality. However the extra thing that the &lt;tt class="docutils literal"&gt;DynamicTemplateView&lt;/tt&gt;
brings to you is that this is a full Django template thus you can use template tags, filters, your context variables, inherit
from your site-base and even override &lt;tt class="docutils literal"&gt;get_context_data&lt;/tt&gt; to add extra info to the template! All this is not possible with
static&amp;nbsp;files!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="implement-a-partial-ajax-view"&gt;
&lt;h3&gt;Implement a partial Ajax&amp;nbsp;view&lt;/h3&gt;
&lt;p&gt;Overriding &lt;tt class="docutils literal"&gt;get_template_names&lt;/tt&gt; can also be used to create a &lt;span class="caps"&gt;DRY&lt;/span&gt; Ajax view
of your data! For example, let&amp;#8217;s say that you have a &lt;tt class="docutils literal"&gt;DetailView&lt;/tt&gt; for one of your models that
has overriden the &lt;tt class="docutils literal"&gt;get_template_names&lt;/tt&gt; like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_template_names&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_ajax&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ajax_partial&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;core/partial/data_ajax.html&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_template_names&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and you have also defined a normal template for classic request response viewing and an ajax template
that contains only the specific data for this instances (i.e it does not containg html body, headers, footers etc,
only a &amp;lt;div&amp;gt; with the instance&amp;#8217;s data). Notice I&amp;#8217;m using either the &lt;tt class="docutils literal"&gt;is_ajax&lt;/tt&gt; method or I directly passed &lt;span class="caps"&gt;GET&lt;/span&gt;
value (&lt;tt class="docutils literal"&gt;ajax_partial&lt;/tt&gt;) - this is needed because sometimes &lt;tt class="docutils literal"&gt;is_ajax&lt;/tt&gt; is not working as expected (depending on
how you&amp;#8217;re going to do the request), also this way you can easily test the partial ajax view through your browser
by passing it &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;?ajax_partia=true&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Using this technique you can create an Ajax view of your data just by requesting the DetailView through an
Ajax call and dumping the response you get to a modal dialog (for example)  - no need for fancy &lt;span class="caps"&gt;REST&lt;/span&gt; APIs. Also as
a bonus, the classic DetailView will work normally, so you can have the Ajax view to give a summary of the instance&amp;#8217;s
data (i.e have a subset of the info on the Ajax template) and the normal view to display&amp;nbsp;everything.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="add-a-dynamic-filter-and-or-table-to-the-context"&gt;
&lt;h3&gt;Add a dynamic filter and/or table to the&amp;nbsp;context&lt;/h3&gt;
&lt;p&gt;If you have a lot of similar models you can add a mixin that dynamically creates tables and a filters
for these models  - take a look at my &lt;a class="reference external" href="https://spapas.github.io/2015/10/05/django-dynamic-tables-similar-models/"&gt;dynamic tables and filters for similar models&lt;/a&gt;&amp;nbsp;article!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configure-forms-for-your-views"&gt;
&lt;h3&gt;Configure forms for your&amp;nbsp;views&lt;/h3&gt;
&lt;p&gt;As I&amp;#8217;ve already explained if you are using a &lt;tt class="docutils literal"&gt;FormView&lt;/tt&gt; you&amp;#8217;ll need to set a &lt;tt class="docutils literal"&gt;form_class&lt;/tt&gt; for
your view (needed by &lt;tt class="docutils literal"&gt;FormMixin&lt;/tt&gt;) while, for an Update or &lt;tt class="docutils literal"&gt;CreateView&lt;/tt&gt; which use the &lt;tt class="docutils literal"&gt;ModelFormMixin&lt;/tt&gt;
you can either set the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;form-class&lt;/span&gt;&lt;/tt&gt; or directly configure the instance&amp;#8217;s fields that will be displayed
to the form using the &lt;tt class="docutils literal"&gt;fields&lt;/tt&gt; attribute.&lt;/p&gt;
&lt;p&gt;For example, let&amp;#8217;s say that you have a rather generic &lt;tt class="docutils literal"&gt;FormView&lt;/tt&gt; that will display a different form
depending on the user permissions. Here&amp;#8217;s how you could do this to return a &lt;tt class="docutils literal"&gt;SuperForm&lt;/tt&gt; if the
current user is a superuser and a &lt;tt class="docutils literal"&gt;SimpleForm&lt;/tt&gt; in other&amp;nbsp;cases:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_form_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_superuser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;SuperForm&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;SimpleForm&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="display-a-different-form-for-create-and-update"&gt;
&lt;h3&gt;Display a different form for Create and&amp;nbsp;Update&lt;/h3&gt;
&lt;p&gt;There are various ways you can do this (for example you can just declare a different &lt;tt class="docutils literal"&gt;form_class&lt;/tt&gt; for your
&lt;tt class="docutils literal"&gt;Create&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;UpdateView&lt;/tt&gt;) but I think that the most &lt;span class="caps"&gt;DRY&lt;/span&gt; one, especially if the create and update form are
similar is to pass an &lt;tt class="docutils literal"&gt;is_create&lt;/tt&gt; argument to the form which it will then be used to properly configure the&amp;nbsp;form.&lt;/p&gt;
&lt;p&gt;Thus, on your &lt;tt class="docutils literal"&gt;CreateView&lt;/tt&gt; you&amp;#8217;ll add this &lt;tt class="docutils literal"&gt;get_form_kwargs&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_form_kwargs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;kwargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyCreateView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_form_kwargs&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;is_create&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;while on your &lt;tt class="docutils literal"&gt;UpdateView&lt;/tt&gt; you&amp;#8217;ll add&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_form_kwargs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;kwargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyUpdateView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_form_kwargs&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;is_create&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Please notice that the form has to properly handle the extra kwarg in its constructor as I&amp;#8217;ve already explained&amp;nbsp;previously.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="only-allow-specific-http-methods-for-a-view"&gt;
&lt;h3&gt;Only allow specific &lt;span class="caps"&gt;HTTP&lt;/span&gt; methods for a&amp;nbsp;view&lt;/h3&gt;
&lt;p&gt;Let&amp;#8217;s say that you want to create an &lt;tt class="docutils literal"&gt;UnpublishView&lt;/tt&gt; i.e a view that will change the status of your content
to &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;DRAFT&lt;/span&gt;&lt;/tt&gt;. Since this view will change your model instance it must be called through &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;POST&lt;/span&gt;&lt;/tt&gt;, however
you may not want to display an individual form for this view, just a button that when called will display
a client-side (Javascript) prompt and if the user clicks it it will immediately do a &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;POST&lt;/span&gt;&lt;/tt&gt; request
by submitting the form. The best way to create this is to just implement an &lt;tt class="docutils literal"&gt;UpdateView&lt;/tt&gt; for your model
and change its form valid to change the status to &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;DRAFT&lt;/span&gt;&lt;/tt&gt;, something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;DRAFT&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Beyond this, you&amp;#8217;ll need to add a &lt;tt class="docutils literal"&gt;fields = []&lt;/tt&gt; attribute to your &lt;tt class="docutils literal"&gt;UpdateView&lt;/tt&gt; to denote that you won&amp;#8217;t
need to update any fields from the model (since you&amp;#8217;ll update the status directly) and finally, to only allow
this view to be called through an http &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;POST&lt;/span&gt;&lt;/tt&gt; method add the following&amp;nbsp;attribute:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;http_method_names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;post&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="create-an-umbrella-view-for-multiple-models"&gt;
&lt;h3&gt;Create an umbrella View for multiple&amp;nbsp;models&lt;/h3&gt;
&lt;p&gt;Let&amp;#8217;s say that you have a couple of models (called &lt;tt class="docutils literal"&gt;Type1&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;Type2&lt;/tt&gt; that are more or less the same and
you want to quickly create a &lt;tt class="docutils literal"&gt;ListView&lt;/tt&gt; for both of them but you&amp;#8217;d like to create just one &lt;tt class="docutils literal"&gt;ListView&lt;/tt&gt; and
separate them by their url. Here&amp;#8217;s how it could be&amp;nbsp;done:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UmbrellaListView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ListView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;template_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;umbrella_list.html&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kind&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;kind&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kind&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;type1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queryset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Type1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kind&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;type2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queryset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Type2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UmbrellaListView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that for this to work properly you must setup your urls like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^list/(?P&amp;lt;kind&amp;gt;type1|type2)/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UmbrellaListView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;umbrella_list&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="a-heavy-cbv-user-project"&gt;
&lt;h2&gt;A heavy &lt;span class="caps"&gt;CBV&lt;/span&gt; user&amp;nbsp;project&lt;/h2&gt;
&lt;p&gt;In this small chapter I&amp;#8217;d like to present a bunch of mixins and views that I&amp;#8217;ve defined to the
accompanying project (&lt;a class="reference external" href="https://github.com/spapas/cbv-tutorial"&gt;https://github.com/spapas/cbv-tutorial&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s start with the mixins (I won&amp;#8217;t show the mixins I&amp;#8217;ve already talked about in the previous&amp;nbsp;chapter):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SetOwnerIfNeeded&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;owned_by_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;owned_by&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ChangeStatusMixin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;new_status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new_status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;NotImplementedError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Please define new_status when using ChangeStatusMixin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_status&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ContentCreateMixin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SuccessMessageMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;AuditableMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;SetOwnerIfNeeded&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;RequestArgMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;SetInitialMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;ModerationMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;LoginRequiredMixin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;success_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Object successfully created!&amp;#39;&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ContentUpdateMixin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SuccessMessageMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;AuditableMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;SetOwnerIfNeeded&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;RequestArgMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;SetInitialMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;ModerationMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;LimitAccessMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;LoginRequiredMixin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;success_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Object successfully updated!&amp;#39;&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ContentListMixin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ExportCsvMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AddFilterMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HideRemovedMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ContentRemoveMixin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SuccessMessageMixin&lt;/span&gt;
                         &lt;span class="n"&gt;AdminOrPublisherPermissionRequiredMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="n"&gt;AuditableMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="n"&gt;HideRemovedMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="n"&gt;ChangeStatusMixin&lt;/span&gt;&lt;span class="p"&gt;,):&lt;/span&gt;
    &lt;span class="n"&gt;http_method_names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;post&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;
    &lt;span class="n"&gt;new_status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;REMOVED&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;success_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Object successfully removed!&amp;#39;&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ContentUnpublishMixin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SuccessMessageMixin&lt;/span&gt;
                            &lt;span class="n"&gt;AdminOrPublisherPermissionRequiredMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;AuditableMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;UnpublishSuccessMessageMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;ChangeStatusMixin&lt;/span&gt;&lt;span class="p"&gt;,):&lt;/span&gt;
    &lt;span class="n"&gt;http_method_names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;post&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;
    &lt;span class="n"&gt;new_status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;DRAFT&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;success_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Object successfully unpublished!&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;SetOwnerIfNeeded&lt;/tt&gt; and  &lt;tt class="docutils literal"&gt;ChangeStatusMixin&lt;/tt&gt; are simple mixins that override &lt;tt class="docutils literal"&gt;form_valid&lt;/tt&gt; to
introduce some functionality before saving the&amp;nbsp;object).&lt;/p&gt;
&lt;p&gt;The mixins that follow are used to group functionality of
other mixins together and will be inherited by the views. Thus, &lt;tt class="docutils literal"&gt;ContentCreateMixin&lt;/tt&gt; has the mixin functionality needed to create something (for example
an &lt;tt class="docutils literal"&gt;Article&lt;/tt&gt; or a &lt;tt class="docutils literal"&gt;Document&lt;/tt&gt;) i.e show a success message, add auditing information, set the object&amp;#8217;s owner,
pass the request to the form, set the form&amp;#8217;s initial values, do some moderation and only allow logged in users. On
a similar fashion, the &lt;tt class="docutils literal"&gt;ContentUpdateMixin&lt;/tt&gt; collects the functionality needed to update something and is similar to
&lt;tt class="docutils literal"&gt;ContentCreateMixin&lt;/tt&gt; (with the difference that it also as the &lt;tt class="docutils literal"&gt;LimitAccessMixin&lt;/tt&gt; to only allow simple users to
edit their own content). The &lt;tt class="docutils literal"&gt;ContentListMixin&lt;/tt&gt; adds functionality for export to &lt;span class="caps"&gt;CSV&lt;/span&gt;, simple filter and hiding removed&amp;nbsp;things.&lt;/p&gt;
&lt;p&gt;Finally, the &lt;tt class="docutils literal"&gt;ContentRemoveMixin&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;ContentUnpublishMixin&lt;/tt&gt; are used to implement Views for removing and unpublishing
an object. Both of them inherit from &lt;tt class="docutils literal"&gt;ChangeStatusMixin&lt;/tt&gt; - one setting
the &lt;tt class="docutils literal"&gt;new_status&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;REMOVED&lt;/span&gt;&lt;/tt&gt; the other to &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;DRAFT&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Notice that they share much functionality so I could
remove both &lt;tt class="docutils literal"&gt;ContentRemoveMixin&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;ContentUnpublishMixin&lt;/tt&gt; and add a single &lt;tt class="docutils literal"&gt;ContentChangeStatusMixin&lt;/tt&gt; like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ContentChangeStatusMixin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AdminOrPublisherPermissionRequiredMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;AuditableMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;UnpublishSuccessMessageMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;ChangeStatusMixin&lt;/span&gt;&lt;span class="p"&gt;,):&lt;/span&gt;
    &lt;span class="n"&gt;http_method_names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;post&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;
    &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thus the &lt;tt class="docutils literal"&gt;new_status&lt;/tt&gt; attribute wouldn&amp;#8217;t be there so the views inheriting from this &lt;tt class="docutils literal"&gt;ContentChangeStatusMixin&lt;/tt&gt;
(i.e &lt;tt class="docutils literal"&gt;*RemoveView&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;*UnpublishView&lt;/tt&gt;) would need to define the &lt;tt class="docutils literal"&gt;new_status&lt;/tt&gt; field themselves.
This is definitely valid (and more &lt;span class="caps"&gt;DRY&lt;/span&gt;) but less explicit than the way I&amp;#8217;ve implemented this - i.e you may
wanted to not allow publishers to remove objects, only admins (so you could implement that differently in the &lt;tt class="docutils literal"&gt;get_queryset&lt;/tt&gt;
or &lt;tt class="docutils literal"&gt;dispatch&lt;/tt&gt; method of &lt;tt class="docutils literal"&gt;ContentRemoveMixin&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;ContentUpdateMixin&lt;/tt&gt;) this is easier if you have both the
&lt;tt class="docutils literal"&gt;ContentRemoveMixin&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;ContentUnpublishMixin&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Now let&amp;#8217;s take a look at the&amp;nbsp;views:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CategoryListView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ExportCsvMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AdminOrPublisherPermissionRequiredMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ListView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Category&lt;/span&gt;
    &lt;span class="n"&gt;context_object_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;categories&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_queryset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;qs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_queryset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;qs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;annotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;article_cnt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;article&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;document_cnt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;document&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CategoryCreateView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SuccessMessageMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AdminOrPublisherPermissionRequiredMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CreateView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Category&lt;/span&gt;
    &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;success_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Category created!&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;success_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reverse_lazy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;category-list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CategoryUpdateView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SuccessMessageMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AdminOrPublisherPermissionRequiredMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UpdateView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Category&lt;/span&gt;
    &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;success_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Category updated!&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;success_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reverse_lazy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;category-list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CategoryDetailView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CategoriesContextMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DetailView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Category&lt;/span&gt;
    &lt;span class="n"&gt;context_object_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;category&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_context_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_context_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;article_number&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;document_number&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ArticleListView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ContentListMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ListView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;
    &lt;span class="n"&gt;context_object_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;articles&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;filter_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArticleFilter&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ArticleCreateView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ContentCreateMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CreateView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;
    &lt;span class="n"&gt;form_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArticleForm&lt;/span&gt;
    &lt;span class="n"&gt;success_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reverse_lazy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;article-list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ArticleUpdateView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ContentUpdateMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UpdateView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;
    &lt;span class="n"&gt;form_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArticleForm&lt;/span&gt;
    &lt;span class="n"&gt;success_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reverse_lazy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;article-list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ArticleDetailView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HideRemovedMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;JsonDetailMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DetailView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;
    &lt;span class="n"&gt;context_object_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;article&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_template_names&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_ajax&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;partial&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;djangocbv/_article_content_partial.html&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_template_names&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ArticleRemoveView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ContentRemoveMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UpdateView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;
    &lt;span class="n"&gt;success_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reverse_lazy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;article-list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ArticleUnpublishView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ContentUnpublishMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UpdateView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;
    &lt;span class="n"&gt;success_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reverse_lazy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;article-list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DocumentListView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ContentListMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ListView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Document&lt;/span&gt;
    &lt;span class="n"&gt;context_object_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;documents&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;filter_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DocumentFilter&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DocumentCreateView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ContentCreateMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CreateView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Document&lt;/span&gt;
    &lt;span class="n"&gt;form_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DocumentForm&lt;/span&gt;
    &lt;span class="n"&gt;success_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reverse_lazy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;document-list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DocumentUpdateView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ContentUpdateMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UpdateView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Document&lt;/span&gt;
    &lt;span class="n"&gt;form_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DocumentForm&lt;/span&gt;
    &lt;span class="n"&gt;success_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reverse_lazy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;document-list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DocumentDetailView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HideRemovedMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;JsonDetailMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DetailView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Document&lt;/span&gt;
    &lt;span class="n"&gt;context_object_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;document&amp;#39;&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DocumentRemoveView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ContentRemoveMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UpdateView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Document&lt;/span&gt;
    &lt;span class="n"&gt;success_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reverse_lazy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;document-list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DocumentUnpublishView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ContentUnpublishMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UpdateView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Document&lt;/span&gt;
    &lt;span class="n"&gt;success_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reverse_lazy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;document-list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DynamicTemplateView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TemplateView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_template_names&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;what&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;what&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{0}.html&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;what&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you will see there&amp;nbsp;are&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;4 views related to categories (Create, Detail, Update and&amp;nbsp;List)&lt;/li&gt;
&lt;li&gt;6 views related to articles (Create, Detail, Update, List, Unpublish and Remove)&amp;nbsp;and&lt;/li&gt;
&lt;li&gt;another 6 views related to documents (same as&amp;nbsp;articles).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The views for &lt;tt class="docutils literal"&gt;Article&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;Document&lt;/tt&gt; are more or less the same: They inherit
from the corresponding mixin we defined previously (&lt;tt class="docutils literal"&gt;CreateContentMixin&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;UpdateContentMixin&lt;/tt&gt; etc) add a
redirect to their corresponding list view (I am using &lt;tt class="docutils literal"&gt;redirect_lazy&lt;/tt&gt; there because &lt;tt class="docutils literal"&gt;redirect&lt;/tt&gt; wouldn&amp;#8217;t work
because it will lead to a cyclic dependency between urls and views) and define their corresponding form and model.
For the the DetailViews I don&amp;#8217;t use a group mixin like the others but I just add the &lt;tt class="docutils literal"&gt;HideRemovedMixin&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;JsonDetailMixin&lt;/tt&gt; directly to their ancestor list. This is to make clear that the group mixins (&lt;tt class="docutils literal"&gt;ContentCreateMixin&lt;/tt&gt; etc)
are optional and I could for example define &lt;tt class="docutils literal"&gt;ArticleCreateView&lt;/tt&gt; like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ArticleCreateView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SuccessMessageMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;AuditableMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;SetOwnerIfNeeded&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;RequestArgMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;SetInitialMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;ModerationMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;LoginRequiredMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;CreateView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;
    &lt;span class="n"&gt;form_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArticleForm&lt;/span&gt;
    &lt;span class="n"&gt;success_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reverse_lazy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;article-list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;success_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Object successfully created!&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What&amp;#8217;s the advantage of using the  &lt;tt class="docutils literal"&gt;ContentCreateMixin&lt;/tt&gt;  then? Well since the same mixins are used from &lt;tt class="docutils literal"&gt;DocumentCreateView&lt;/tt&gt;
I won&amp;#8217;t need to re-define this list there. Also if for example I want to allow users that have a specific permission to create
articles and document I will remove the &lt;tt class="docutils literal"&gt;LoginRequireMixin&lt;/tt&gt; and add the &lt;tt class="docutils literal"&gt;AllowCreateContentMixin&lt;/tt&gt; only to the &lt;tt class="docutils literal"&gt;ContentCreateMixin&lt;/tt&gt;
and not to both &lt;tt class="docutils literal"&gt;ArticleCreateView&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;DocumentCreateView&lt;/tt&gt; (and I won&amp;#8217;t be in danger of forgetting to change it somewhere).
Of course all this depends on your requirements and how &lt;span class="caps"&gt;DRY&lt;/span&gt; you need to&amp;nbsp;be.&lt;/p&gt;
&lt;p&gt;The category related views are simpler and override their mixins directly. Finally there&amp;#8217;s a &lt;tt class="docutils literal"&gt;DynamicTemplateView&lt;/tt&gt; to
display templates based on their filename as discussed&amp;nbsp;previously.&lt;/p&gt;
&lt;p&gt;Before continuing, please try to understand how much more &lt;span class="caps"&gt;DRY&lt;/span&gt; this project is when compared to using a traditional
functional one (or if not using mixins). For example, there&amp;#8217;s a &lt;tt class="docutils literal"&gt;RequestArgMixin&lt;/tt&gt; that is used by all views that create/update content. If &lt;span class="caps"&gt;INHERITANCE&lt;/span&gt;
didn&amp;#8217;t use that mixin I&amp;#8217;d need to re-define the same functionality (pass the current request to the form&amp;#8217;s constructor) to
4 views (Article/Document Create/Update). Or for the &lt;tt class="docutils literal"&gt;AuditableMixin&lt;/tt&gt; I&amp;#8217;d need to remember to upgrade the created/modified by
to 8 views (Article/Document&amp;nbsp;Create/Update/Unpublish/Remove)!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The previous discussion should convince you how much more &lt;span class="caps"&gt;DRY&lt;/span&gt; your views will be when using CBVs and how
much quicker will be to create your views. Also, if
you followed closely the first and second chapters you should be able to understand everything that is
needed for CBVs and be able to properly understand which method or attribute you need to override to
implement some specific functionality. Finally, the list of examples in the third chapter should help
you get started in all your &lt;span class="caps"&gt;CBV&lt;/span&gt; needs - if you have some specific question about CBVs or you&amp;#8217;d like
another use case added to the list feel free to ask and I&amp;#8217;ll try to add&amp;nbsp;it!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Update 21/04/2020&lt;/em&gt; As per commenter&amp;#8217;s Ahmed I. Elsayed comment, there are sites with a similar
functionality with the &lt;span class="caps"&gt;CBV&lt;/span&gt; inspector for the Django Rest Framework (&lt;a class="reference external" href="http://www.cdrf.co/"&gt;http://www.cdrf.co/&lt;/a&gt;) and
Django Forms (&lt;a class="reference external" href="https://cdf.9vo.lt/"&gt;https://cdf.9vo.lt/&lt;/a&gt;)! They are an excellent resource for&amp;nbsp;reference!!&lt;/p&gt;
&lt;/div&gt;
</content><category term="django"></category><category term="python"></category><category term="cbv"></category><category term="class-based-views"></category><category term="django"></category></entry><entry><title>Easy downloading youtube videos and mp3s using youtube-dl andÂ python</title><link href="https://www.spapas.net/2018/03/06/easy-youtube-mp3-downloading/" rel="alternate"></link><published>2018-03-06T12:20:00+02:00</published><updated>2018-03-06T12:20:00+02:00</updated><author><name>Serafeim Papastefanos</name></author><id>tag:www.spapas.net,2018-03-06:/2018/03/06/easy-youtube-mp3-downloading/</id><summary type="html">&lt;p class="first last"&gt;Download videos (and convert them to mp3s) from youtube using python youtube-dl and&amp;nbsp;ffmpeg!&lt;/p&gt;
</summary><content type="html">&lt;p&gt;In this article I am going to present you with an easy (and advertisement/malware free) way to download
videos from youtube, converting them to mp3 if needed. Also, I will give some more useful hints, for
example how to download multiple mp3s using a script, how to break a long mp3 to same-length parts
so you could quickly skip tracks when you play it in your stereo&amp;nbsp;etc.&lt;/p&gt;
&lt;p&gt;I am going to give specific instructions for Windows users - however everything I&amp;#8217;ll propose should also be applicable
to &lt;span class="caps"&gt;OSX&lt;/span&gt; or Linux users with minor&amp;nbsp;modifications.&lt;/p&gt;
&lt;p&gt;The tools we are going to use&amp;nbsp;are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://rg3.github.io/youtube-dl/"&gt;youtube-dl&lt;/a&gt; which is a python library for downloading videos from youtube (and some other&amp;nbsp;sites)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.ffmpeg.org"&gt;ffmpeg&lt;/a&gt; which is a passepartout video/audio editing&amp;nbsp;library&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;To install youtube-dl I recommend installing it in your global python (2 or 3) package list using pip. Please read my
&lt;a class="reference external" href="https://www.spapas.net/2017/12/20/python-2-3-windows/"&gt;previous&lt;/a&gt;&amp;nbsp;article&lt;/p&gt;
&lt;p&gt;to see how you should install and use Python 2 or 3
on Windows. Following the instructions from there, you can do the following to install youtube-dl in your global
Python 3&amp;nbsp;packages:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
py -3 -m pip install youtube-dl
&lt;/pre&gt;
&lt;p&gt;To run youtube-dl you&amp;#8217;ll write something like &lt;tt class="docutils literal"&gt;py &lt;span class="pre"&gt;-3&lt;/span&gt; &lt;span class="pre"&gt;-m&lt;/span&gt; youtube_dl url_or_video_id&lt;/tt&gt; (notice the underscore instead of dash since
dashes are not supported in module names in python). For example try something like this &lt;tt class="docutils literal"&gt;py &lt;span class="pre"&gt;-3&lt;/span&gt; &lt;span class="pre"&gt;-m&lt;/span&gt; youtube_dl YgtL4S7Hrwo&lt;/tt&gt; and you&amp;#8217;ll
be rewarded with the 2016 Pycon talk from Guido van Rossum! If you find this a little too much too type don&amp;#8217;t be afraid, I will give
some hints later about how to improve&amp;nbsp;this.&lt;/p&gt;
&lt;p&gt;To upgrade your youtube-dl installation you should do something like&amp;nbsp;this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
py -3 -m pip install -U youtube-dl
&lt;/pre&gt;
&lt;p&gt;Notice that you must frequently upgrade your youtube-dl installation because sometimes youtube changes the requirements
for viewing / downloading videos and your old version will not work. So if for some reason something is not correct when
you use youtube-dl always try updating&amp;nbsp;first.&lt;/p&gt;
&lt;p&gt;If you wanted you could also create a virtual environment (see instructions on previously mentioned article) and install youtube-dl locally there using &lt;tt class="docutils literal"&gt;pip install &lt;span class="pre"&gt;youtube-dl&lt;/span&gt;&lt;/tt&gt;
however I prefer to install it on the global packages to be really easy for me to call it from a command prompt I open. Notice
that if you install youtube-dl in a virtualenv, after you activate that virtualenv you&amp;#8217;ll be able to run it just by typing &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;youtube-dl&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Finally, If for some reason you don&amp;#8217;t want want to mess with python and all this (or it just seems greek to you) then you
may go on and directly download a &lt;a class="reference external" href="https://yt-dl.org/latest/youtube-dl.exe"&gt;youtube-dl windows executable&lt;/a&gt;. Just put it in your path and you should be good to&amp;nbsp;go.&lt;/p&gt;
&lt;p&gt;To install ffmpeg, I recommend &lt;a class="reference external" href="https://ffmpeg.zeranoe.com/builds/"&gt;downloading the Windows build from here&lt;/a&gt; (select the correct Windows architecture of your system and
always static linking - the version doesn&amp;#8217;t matter). This will get you a zip - we are mainly interested to the three files under the
&lt;tt class="docutils literal"&gt;bin&lt;/tt&gt; folder of that zip which should be copied to a directory under your&amp;nbsp;path:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;ffmpeg is the passepartout video converting toot that we are going to&amp;nbsp;use&lt;/li&gt;
&lt;li&gt;ffprobe will print some information about a file (about its container and video/audio&amp;nbsp;streams)&lt;/li&gt;
&lt;li&gt;ffplay will play the file &amp;#8212; not really recommended there are better tools but it is invaluable
for testing; if it can be played be ffplay then ffmpeg will be able to properly read your&amp;nbsp;file&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Notice I recommend copying things to a directory in your path. This is recommended and will save you from repeatedly typing the same things
over and over. Also, later I will propose a bunch of &lt;span class="caps"&gt;DOS&lt;/span&gt; batch (.bat) files that can also be copied to that directory and help you even
more in you youtube video downloading. To add a directory to the &lt;span class="caps"&gt;PATH&lt;/span&gt;, just press Windows+Pause Break, Advanced System Settings, Advanced,
Environment Variables, edit the &amp;#8220;Path&amp;#8221; User variable (for your user) and append the directory&amp;nbsp;there.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="using-youtube-dl"&gt;
&lt;h2&gt;Using&amp;nbsp;youtube-dl&lt;/h2&gt;
&lt;p&gt;As I&amp;#8217;ve already explained before, to run youtube-dl you&amp;#8217;ll either write something like &lt;tt class="docutils literal"&gt;py &lt;span class="pre"&gt;-3&lt;/span&gt; &lt;span class="pre"&gt;-m&lt;/span&gt; youtube_dl&lt;/tt&gt; (if you&amp;#8217;ve installed it
to your global python packages) or run youtube-dl if you&amp;#8217;ve downloaded the pre-built exe or have installed it in a virtualenv. To save
you from some keystrokes, you can create a batch file that will run and pass any more parameters to it, something like&amp;nbsp;this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
py -3 -m youtube_dl %*
&lt;/pre&gt;
&lt;p&gt;(the %* will capture the remaining command line) so to get the previous video just run &lt;tt class="docutils literal"&gt;getvideo YgtL4S7Hrwo&lt;/tt&gt;
(or getvideo &lt;a class="reference external" href="https://www.youtube.com/watch?v=YgtL4S7Hrwo"&gt;https://www.youtube.com/watch?v=YgtL4S7Hrwo&lt;/a&gt; - works the same with the video id or the complete&amp;nbsp;url).&lt;/p&gt;
&lt;p&gt;One thing I&amp;#8217;d like to mention here is that youtube-dl works fine with playlists and even channels. For example,
to download all videos from PyCon 2017 just do&amp;nbsp;this:&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;getvideo &lt;span class="pre"&gt;https://www.youtube.com/channel/UCrJhliKNQ8g0qoE_zvL8eVg/feed&lt;/span&gt;&lt;/tt&gt; and you should see something&amp;nbsp;like:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
E:\&amp;gt;py -3 -m youtube_dl https://www.youtube.com/channel/UCrJhliKNQ8g0qoE_zvL8eVg/feed
[youtube:channel] UCrJhliKNQ8g0qoE_zvL8eVg: Downloading channel page
[youtube:playlist] UUrJhliKNQ8g0qoE_zvL8eVg: Downloading webpage
[download] Downloading playlist: Uploads from PyCon 2017
[youtube:playlist] UUrJhliKNQ8g0qoE_zvL8eVg: Downloading page #1
[youtube:playlist] playlist Uploads from PyCon 2017: Downloading 143 videos
[download] Downloading video 1 of 143
[youtube] AjFfsOA7AQI: Downloading webpage
[youtube] AjFfsOA7AQI: Downloading video info webpage
[youtube] AjFfsOA7AQI: Extracting video information
WARNING: Requested formats are incompatible for merge and will be merged into mkv.
[download] Destination: Final remarks and conference close  - Pycon 2017-AjFfsOA7AQI.f137.mp4
[download]   2.9% of 34.49MiB at 940.52KiB/s ETA 00:36
&lt;/pre&gt;
&lt;p&gt;This is gonna take some time&amp;nbsp;&amp;#8230;&lt;/p&gt;
&lt;p&gt;Now, youtube-dl has &lt;a class="reference external" href="https://github.com/rg3/youtube-dl/blob/master/README.md#options"&gt;many options&lt;/a&gt; and can be configured with &lt;a class="reference external" href="https://github.com/rg3/youtube-dl/blob/master/README.md#configuration"&gt;default values&lt;/a&gt; depending on your
requirements. I won&amp;#8217;t go into detail about these except on some things I usually use, if you
need some help feel free to ask&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;When you download a video, youtube-dl will try to download the best quality possible for that video,
however a video may have various different formats that can be queries by passing the option &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--list-formats&lt;/span&gt;&lt;/tt&gt;
to ffmpeg, for example here&amp;#8217;s the output from the previously mentioned&amp;nbsp;video:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
E:\&amp;gt;getvideo YgtL4S7Hrwo --list-formats
[youtube] YgtL4S7Hrwo: Downloading webpage
[youtube] YgtL4S7Hrwo: Downloading video info webpage
[youtube] YgtL4S7Hrwo: Extracting video information
[info] Available formats for YgtL4S7Hrwo:
format code  extension  resolution note
249          webm       audio only DASH audio   53k , opus &amp;#64; 50k, 15.14MiB
250          webm       audio only DASH audio   72k , opus &amp;#64; 70k, 20.29MiB
171          webm       audio only DASH audio  111k , vorbis&amp;#64;128k, 29.42MiB
140          m4a        audio only DASH audio  130k , m4a_dash container, mp4a.40.2&amp;#64;128k, 38.38MiB
251          webm       audio only DASH audio  130k , opus &amp;#64;160k, 36.94MiB
278          webm       256x144    144p   58k , webm container, vp9, 30fps, video only, 11.01MiB
242          webm       426x240    240p   88k , vp9, 30fps, video only, 12.40MiB
160          mp4        256x144    144p  120k , avc1.4d400c, 30fps, video only, 33.64MiB
243          webm       640x360    360p  153k , vp9, 30fps, video only, 23.48MiB
134          mp4        640x360    360p  230k , avc1.4d401e, 30fps, video only, 28.91MiB
133          mp4        426x240    240p  260k , avc1.4d4015, 30fps, video only, 74.75MiB
244          webm       854x480    480p  289k , vp9, 30fps, video only, 39.31MiB
135          mp4        854x480    480p  488k , avc1.4d401f, 30fps, video only, 56.43MiB
247          webm       1280x720   720p  945k , vp9, 30fps, video only, 102.45MiB
136          mp4        1280x720   720p 1074k , avc1.4d401f, 30fps, video only, 116.72MiB
17           3gp        176x144    small , mp4v.20.3, mp4a.40.2&amp;#64; 24k
36           3gp        320x180    small , mp4v.20.3, mp4a.40.2
43           webm       640x360    medium , vp8.0, vorbis&amp;#64;128k
18           mp4        640x360    medium , avc1.42001E, mp4a.40.2&amp;#64; 96k
22           mp4        1280x720   hd720 , avc1.64001F, mp4a.40.2&amp;#64;192k (best)
&lt;/pre&gt;
&lt;p&gt;As you can see, each has an id and defines an extension (container)  and info about its video and audio stream.
You can download a &lt;em&gt;specific&lt;/em&gt; format by using the -f command line otpion. For example , to download the audio-only
format with the worst audio quality use &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;C:\Users\serafeim&amp;gt;getvideo&lt;/span&gt; YgtL4S7Hrwo &lt;span class="pre"&gt;-f&lt;/span&gt; 249&lt;/tt&gt;. Notice that there are
formats with audio ony and other formats with vide only. To download the worst format possible (resulting in the
smallest file size of course ) you can pass the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-f&lt;/span&gt; worst&lt;/tt&gt; command line (there&amp;#8217;s also a &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-f&lt;/span&gt; best&lt;/tt&gt; command line
which is used by&amp;nbsp;default).&lt;/p&gt;
&lt;p&gt;Another thing I&amp;#8217;d like to point out here is that you can define an &lt;a class="reference external" href="https://github.com/rg3/youtube-dl/blob/master/README.md#output-template"&gt;output template&lt;/a&gt; using the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-o&lt;/span&gt;&lt;/tt&gt; option that
will format the name of the output file of your video using the provided options. There are  &lt;a class="reference external" href="https://github.com/rg3/youtube-dl/blob/master/README.md#output-template-examples"&gt;many examples in the docs&lt;/a&gt;
so I won&amp;#8217;t go into any more details&amp;nbsp;here.&lt;/p&gt;
&lt;p&gt;Another cool option is the -a that will help you download all videos from a file. For example, if you have a file
named &lt;tt class="docutils literal"&gt;videos.txt&lt;/tt&gt; with the following&amp;nbsp;contsnts:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
AjFfsOA7AQI
3dDtACSYVx0
G17E4Muylis
&lt;/pre&gt;
&lt;p&gt;running &lt;tt class="docutils literal"&gt;getvideo &lt;span class="pre"&gt;-a&lt;/span&gt; videos.txt &lt;span class="pre"&gt;-f&lt;/span&gt; worst&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;will get you all three videos in their worst quality. If you don&amp;#8217;t want to create files then you can use something
like&amp;nbsp;this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
for %i in (AjFfsOA7AQI 3dDtACSYVx0 G17E4Muylis) do getvideo %i -f worst
&lt;/pre&gt;
&lt;p&gt;and it will run  getvideo for all three&amp;nbsp;files.&lt;/p&gt;
&lt;p&gt;Some more options I&amp;#8217;d like to recommend using&amp;nbsp;are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--restrict-filenames&lt;/span&gt;&lt;/tt&gt; to avoid strange&amp;nbsp;filenames&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--ignore-errors&lt;/span&gt;&lt;/tt&gt; to ignore errors when download multiple files (from a playlist or a channel) - this is really
useful because if you have a play with missing items youtube-dl will stop downloading the remaining files when it
encounters the missing&amp;nbsp;one&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want to always use these options you may add them to your configuration file (&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;C:\Users\&amp;lt;user&lt;/span&gt; &lt;span class="pre"&gt;name&amp;gt;\youtube-dl.conf&lt;/span&gt;&lt;/tt&gt;)
or to the getvideo.bat defined above i.e getvideo.bat will&amp;nbsp;be:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
py -3 -m youtube_dl --restrict-filenames --ignore-errors %*
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="extracting-mp3s"&gt;
&lt;h2&gt;Extracting&amp;nbsp;mp3s&lt;/h2&gt;
&lt;p&gt;The next step in this trip is to understand how to extract mp3s from videos that are downloaded from youtube. If you&amp;#8217;ve
payed attention you&amp;#8217;d know that by now you can download audio-only formats from youtube - however they are in a format
called &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Dynamic_Adaptive_Streaming_over_HTTP"&gt;&lt;span class="caps"&gt;DASH&lt;/span&gt;&lt;/a&gt; which most probably is &lt;em&gt;not&lt;/em&gt; playable by your car stereo (&lt;span class="caps"&gt;DASH&lt;/span&gt; is specialized for streaming audio through &lt;span class="caps"&gt;HTTP&lt;/span&gt;).&lt;/p&gt;
&lt;p&gt;Thus, the proper way to get mp3s is to post-process
the downloaded file using ffmpeg to convert it to mp3. This could be done manually (by doing something
&lt;tt class="docutils literal"&gt;ffmpeg &lt;span class="pre"&gt;-i&lt;/span&gt; input out.mp3&lt;/tt&gt; &amp;#8212; ffmpeg is smart enough to know how to convert per extension)
but thankfully youtube-dl offers the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-x&lt;/span&gt;&lt;/tt&gt; (and friend) parameters to make this automatic. Using &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-x&lt;/span&gt;&lt;/tt&gt; tells
youtube-dl to extract the audio from the video (notice that youtube-dl is smart enough to download one of the audio-only
formats so you don&amp;#8217;t have ). Using -x alone may result in a different audio format (for example .ogg) so to force conversion to mp3
you should also add the  &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--audio-format&lt;/span&gt; mp3&lt;/tt&gt; parameter. Thus, to download an mp3 you can use the following command
line (continuing from the previous&amp;nbsp;examples):&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
py -3 -m youtube_dl --restrict-filenames --ignore-errors -x --audio-format mp3  AjFfsOA7AQI
&lt;/pre&gt;
&lt;p&gt;or even better, create a &lt;tt class="docutils literal"&gt;getmp3.bat&lt;/tt&gt; batch file that will be used to retrieve an&amp;nbsp;mp3:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
py -3 -m youtube_dl --restrict-filenames --ignore-errors -x --audio-format mp3 %1
&lt;/pre&gt;
&lt;p&gt;Please notice that also in this case youtube-dl is smart enough to download an audio-only format thus
you won&amp;#8217;t need to select it by hand using &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-f&lt;/span&gt;&lt;/tt&gt; to save&amp;nbsp;bandwith.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="splitting-the-mp3-file-to-parts"&gt;
&lt;h2&gt;Splitting the mp3 file to&amp;nbsp;parts&lt;/h2&gt;
&lt;p&gt;Some people would like to split their large mp3 files to same-length segments. Of course it would be better
for the file to be split by silence to individual songs (if the file contains songs) but these methods usually
don&amp;#8217;t work that good so I prefer the same length segments. To do that using ffmpeg you just need to add the
following&amp;nbsp;parameters:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
ffmpeg -i input.mp3 -segment_time 180 -f segment out.%03d.mp3&amp;quot;
&lt;/pre&gt;
&lt;p&gt;The segment time is in seconds (so each segment will be 3 minutes) while the output files will have a name like
&lt;tt class="docutils literal"&gt;out.001.mp3, out.002.mp3&lt;/tt&gt; etc.&lt;/p&gt;
&lt;p&gt;What if you&amp;#8217;d like to make the segmentation automatic? For this, I recommend writing a batch file with two
commands - one to download the mp3 and a second one to call ffmpeg to segment the file. Notice that you
could use the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--postprocessor-args&lt;/span&gt; &lt;span class="caps"&gt;ARGS&lt;/span&gt;&lt;/tt&gt; command line parameter to pass the required arguments to youtube-dl
so it will be done in one command however I&amp;#8217;d like to have a little more control thus I prefer two commands (if
you decide to use &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--postprocessor-args&lt;/span&gt; &lt;span class="caps"&gt;ARGS&lt;/span&gt;&lt;/tt&gt; keep in mind that args must be inside double quotes&amp;nbsp;&amp;#8220;&amp;#8221;).&lt;/p&gt;
&lt;p&gt;Since we are going to use two commands, we need to feed the output file of youtube-dl to ffmpeg and specify a
name for the ffmpeg output file-segments. The easiest way to do that is to just pass two parameters to the batch
file - one for the video to download and one for its name. Copy the following to a file named &lt;tt class="docutils literal"&gt;getmp3seg.bat&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
py -3 -m youtube_dl %1 -x --audio-format mp3 --audio-quality 128k -o %2.%%(ext)s&amp;quot;
ffmpeg -i %2.mp3 -segment_time 180 -f segment %2.%%03d.mp3
del %2.mp3
&lt;/pre&gt;
&lt;p&gt;You can then call it like this: &lt;tt class="docutils literal"&gt;getmp3seg AjFfsOA7AQI test&lt;/tt&gt;. The first line will download and covert
the video to mp3 and put it in a file named &lt;tt class="docutils literal"&gt;test.mp3&lt;/tt&gt; (the %2 is the test, the %% is used to
escape the % and the %(ext)s is the extensions - this is needed if you use something like -o %2.mp3
youtube-dl will be confused when trying to convert the file to mp3 and will not work). The 2nd line
will segment the file to 180 second seconds (notice that here also we need to escape %) and the third
line will delete the original mp3. This leaves us with the following 4 files (the video was around 10 minutes): &lt;tt class="docutils literal"&gt;test.000.mp3,
test.001.mp3, test.002.mp3, test.003.mp3&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;One final thing I&amp;#8217;d like to present here is a (more complex) script that you can use to download a video
and segmentize it only if it is more than 360 seconds. For this, we will also use the &lt;a class="reference external" href="http://ibiblio.org/mp3info/"&gt;mp3info&lt;/a&gt; util which can
be downloaded directly from the homepage and copied to the path. So copy the following to a script named &lt;tt class="docutils literal"&gt;getmp3seg2.bat&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;#64;echo off

IF &amp;quot;%2&amp;quot;==&amp;quot;&amp;quot; GOTO HAVE_1

py -3 -m youtube_dl %1 -x --audio-format mp3 -o %2.%%(ext)s&amp;quot;

FOR /f %%i IN ('mp3info -p &amp;quot;%%S&amp;quot; %2.mp3') DO SET koko=%%i

IF %koko%  GTR 360 (
        ECHO greater than or equal to 360
        ffmpeg -i %2.mp3 -segment_time 180 -f segment %2.%%03d.mp3
        del %2.mp3
)  else (
   ECHO less than 360
)

GOTO :eof

:HAVE_1
ECHO Please call this file with video id and title
&lt;/pre&gt;
&lt;p&gt;This is a little more complex - I&amp;#8217;ll explain it quickly: &lt;tt class="docutils literal"&gt;&amp;#64;echo off&lt;/tt&gt; is used to suppress non needed output.
The &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;IF&lt;/span&gt;&lt;/tt&gt; following makes sure that you have two parameters. The next line downloads the file and converts it to mp3. The &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;FOR&lt;/span&gt;&lt;/tt&gt;
loop is a little strange but it&amp;#8217;s result will be to retrieve the output of &lt;tt class="docutils literal"&gt;mp3info &lt;span class="pre"&gt;-o&lt;/span&gt; &amp;quot;%S&amp;quot; title.mp3&lt;/tt&gt; (which is the
duration in seconds of that mp3) and assign it to the &lt;tt class="docutils literal"&gt;koko&lt;/tt&gt; variable. The next &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;IF&lt;/span&gt;&lt;/tt&gt; checks if &lt;tt class="docutils literal"&gt;koko&lt;/tt&gt; is greater than (&lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;GTR&lt;/span&gt;&lt;/tt&gt;)
360 seconds and if yes will run the conversion code we discussed before - else it will just output that it is less than 360&amp;nbsp;seconds.&lt;/p&gt;
&lt;p&gt;Finally, there&amp;#8217;s a &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;GOTO&lt;/span&gt;: eof&lt;/tt&gt; line to skip printing the error message when the batch is called with less than two&amp;nbsp;parameters.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="using-youtube-dl-from-python"&gt;
&lt;h2&gt;Using youtube-dl from&amp;nbsp;python&lt;/h2&gt;
&lt;p&gt;Integrating with youtube-dl from python is easy. Of course, you could just go on and directly call the command line
however you can have more control. The most important class is &lt;tt class="docutils literal"&gt;youtube_dl.YoutubeDL.YoutubeDL&lt;/tt&gt;. You instantiate
an object of this class class passing the parameters you&amp;#8217;d like and call its &lt;tt class="docutils literal"&gt;download()&lt;/tt&gt; instance method passing
a list of urls. Here&amp;#8217;s a small script that downloads the input video&amp;nbsp;ids:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;youtube_dl&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;YoutubeDL&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;ydl_opts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="n"&gt;ydl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;YoutubeDL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ydl_opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;ydl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;download&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Enter list of urls to download&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Save it in a file named getvideo.py and run it like &lt;tt class="docutils literal"&gt;py &lt;span class="pre"&gt;-3&lt;/span&gt; getvideo.py AjFfsOA7AQI 3dDtACSYVx0 G17E4Muylis&lt;/tt&gt; to download all three&amp;nbsp;videos!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fixing-your-unicode-names"&gt;
&lt;h2&gt;Fixing your unicode&amp;nbsp;names&lt;/h2&gt;
&lt;p&gt;The last thing I&amp;#8217;d like to talk about concerns people that want to download videos with Unicode characters in their titles (for example&amp;nbsp;Greek).&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s suppose that you want to download the file vFVNOaUPRow which is piano music from a well-know greek composer. If you get it without parameters
(for example &lt;tt class="docutils literal"&gt;py &lt;span class="pre"&gt;-3&lt;/span&gt; &lt;span class="pre"&gt;-m&lt;/span&gt; youtube_dl &lt;span class="pre"&gt;-x&lt;/span&gt; &lt;span class="pre"&gt;--audio-format&lt;/span&gt; mp3 vFVNOaUPRow&lt;/tt&gt;)
you&amp;#8217;ll get the following output file: &lt;tt class="docutils literal"&gt;Î ÎÎ¬Î½Î¿Ï Î§Î±ÏÎ¶Î¹Î´Î¬ÎºÎ¹Ï. ÏÎ±Î¯Î¶ÎµÎ¹ 11 ÎºÎ¿Î¼Î¼Î¬ÏÎ¹Î± ÏÏÎ¿ &lt;span class="pre"&gt;ÏÎ¹Î¬Î½Î¿-vFVNOaUPRow.f247.mp3&lt;/span&gt;&lt;/tt&gt; (notice the greek characters) while, if
you add the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--restrict-filenames&lt;/span&gt;&lt;/tt&gt; I mentioned before you&amp;#8217;ll get &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;_11-vFVNOaUPRow.f247.mp3&lt;/span&gt;&lt;/tt&gt; (notice that the greek characters have been removed
since they are not&amp;nbsp;safe).&lt;/p&gt;
&lt;p&gt;So if you use the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--restrict-filenames&lt;/span&gt;&lt;/tt&gt; parameter you&amp;#8217;ll get an output that contains &lt;em&gt;only&lt;/em&gt; the video id (and any safe characters it may find) while
if you don&amp;#8217;t use it you&amp;#8217;ll get the normal title of the video. However, most stereos &lt;em&gt;do not&lt;/em&gt; display unicode characters properly so if I get this
file to my car I&amp;#8217;ll see garbage and I won&amp;#8217;t be able to identify it &amp;#8212; I will be able to listen it but not see its&amp;nbsp;name!&lt;/p&gt;
&lt;p&gt;To fix that, I propose transliterating the unicode characters using the &lt;a class="reference external" href="https://pypi.python.org/pypi/Unidecode"&gt;unidecode&lt;/a&gt; library. Just install it using &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt;. Then you can the following
script to rename all mp3 files in a directory to using english characters&amp;nbsp;only:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;unidecode&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mp3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Renaming {0} to {1}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unidecode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unidecode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unidecode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unidecode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Copy this to a file named transliterate.py and run it in a directory containing mp3 files (&lt;tt class="docutils literal"&gt;py &lt;span class="pre"&gt;-3&lt;/span&gt; transliterate.py&lt;/tt&gt;) to rename them to non-unicode&amp;nbsp;characters.&lt;/p&gt;
&lt;/div&gt;
</content><category term="python"></category><category term="youtube"></category><category term="youtube-dl"></category><category term="ffmpeg"></category><category term="python"></category></entry><entry><title>Authentication for django-rest-framework withÂ django-rest-auth</title><link href="https://www.spapas.net/2018/03/01/django-rest-auth/" rel="alternate"></link><published>2018-03-01T22:40:00+02:00</published><updated>2018-03-01T22:40:00+02:00</updated><author><name>Serafeim Papastefanos</name></author><id>tag:www.spapas.net,2018-03-01:/2018/03/01/django-rest-auth/</id><summary type="html">&lt;p class="first last"&gt;How to authenticate with&amp;nbsp;django-rest-auth&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;strong&gt;Update: 25/08/2021&lt;/strong&gt; Please notice that I&amp;#8217;ve written
a &lt;a class="reference external" href="https://www.spapas.net/2021/08/25/django-token-rest-auth/"&gt;a new article&lt;/a&gt;
concerning Token authentication in django rest framework which
I recommend to read instead of this one since most info here is&amp;nbsp;deprecated.&lt;/p&gt;
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Most of the times I need authentication with any &lt;span class="caps"&gt;REST&lt;/span&gt; APIs defined through &lt;a class="reference external" href="http://www.django-rest-framework.org"&gt;django-rest-framework&lt;/a&gt;
I will use  &lt;a class="reference external" href="http://www.django-rest-framework.org/api-guide/authentication/#sessionauthentication"&gt;SessionAuthentication&lt;/a&gt; method. This method uses the session cookie (which is set through the
normal Django login and logout views)
to check out if there&amp;#8217;s an authenticated user and get his username. This method works only in the
same session (browser window) as the one that actually did the login but this should be enough for most&amp;nbsp;cases.&lt;/p&gt;
&lt;p&gt;However, sometimes instead of using the normal Django login/logout views, you&amp;#8217;ll want
to authentication through &lt;span class="caps"&gt;REST&lt;/span&gt; end-points, for example for using them with SPAs (where
you don&amp;#8217;t want to use the traditional views for authentication but through &lt;span class="caps"&gt;REST&lt;/span&gt; end-points) or
because you have implemented a mobile (or desktop) application that needs to authenticate with
your&amp;nbsp;script.&lt;/p&gt;
&lt;p&gt;There are various ways this could be done but one of the simplest is using &lt;a class="reference external" href="https://github.com/Tivix/django-rest-auth"&gt;django-rest-auth&lt;/a&gt;.
This project adds a number of &lt;span class="caps"&gt;REST&lt;/span&gt; end-points to your project that can be used for user login
and registration (and even social login when combined with &lt;a class="reference external" href="https://github.com/pennersr/django-allauth"&gt;django-allauth&lt;/a&gt;).
In the following I am going to write a simple tutorial on how to actually use django-rest-auth to
authenticate with django-rest-framework using the provided &lt;span class="caps"&gt;REST&lt;/span&gt; end points and how to call a
&lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; as an authenticated&amp;nbsp;user.&lt;/p&gt;
&lt;p&gt;Before continuing with the tutorial, let&amp;#8217;s take a look at what we&amp;#8217;ll build&amp;nbsp;here:&lt;/p&gt;
&lt;img alt="Our project" src="/images/rest-auth.gif" style="width: 640px;" /&gt;
&lt;p&gt;This is a single html page (styled with &lt;a class="reference external" href="https://picturepan2.github.io/spectre/"&gt;spectre.css&lt;/a&gt;) that checks if the user is logged in
and either displays the login or logout button (using javascript). When you click the login you&amp;#8217;ll get a modal in which you
can enter your credentials which will be submitted through &lt;span class="caps"&gt;REST&lt;/span&gt; to the django-rest-auth endpoint and
depending on the response will set a javascript variable (and a corresponding session/local storage key).
Then you can use the &amp;#8220;Test auth&amp;#8221; button that works only on authenticated users and returns their username.
Finally, notice that after you log out the &amp;#8220;test auth&amp;#8221; button returns a 403 access&amp;nbsp;denied.&lt;/p&gt;
&lt;p&gt;If you want to play with this project yourself, you can clone it here &lt;a class="reference external" href="https://github.com/spapas/rest_authenticate"&gt;https://github.com/spapas/rest_authenticate&lt;/a&gt;.
Just create a venv, install requirements, create a superuser and you should be good to&amp;nbsp;go!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-theory"&gt;
&lt;h2&gt;Some&amp;nbsp;theory&lt;/h2&gt;
&lt;p&gt;After you log in with Django, your authentication information is saved to the &amp;#8220;session&amp;#8221;_. The session is a bucket of information
that the Django application saves about your visit &amp;#8212; to distinguish between different visitors a cookie with a unique
value named &lt;tt class="docutils literal"&gt;sessionid&lt;/tt&gt; will be used. So, your web browser will send this cookie with each page request thus allowing Django
to know which bucket of information is yours (and if you&amp;#8217;ve authenticated know who are you). This is not a Django
related concept but a general one (supported by most if not all &lt;span class="caps"&gt;HTTP&lt;/span&gt; frameworks) and is used to add state to an otherwise
stateless medium (&lt;span class="caps"&gt;HTTP&lt;/span&gt;).&lt;/p&gt;
&lt;p&gt;Since the &lt;tt class="docutils literal"&gt;sessionid&lt;/tt&gt; cookie is sent not only with traditional but also with Ajax request it can be used to authenticate
&lt;span class="caps"&gt;REST&lt;/span&gt; requests after you&amp;#8217;ve logged in. This is what is used by default in django-rest-framework and as I said in the
introduction it is a very good solution for most use cases: You login to django and you can go ahead and call the &lt;span class="caps"&gt;REST&lt;/span&gt;
&lt;span class="caps"&gt;API&lt;/span&gt; through Ajax; the &lt;tt class="docutils literal"&gt;sessionid&lt;/tt&gt; cookie will be sent along with the request and you&amp;#8217;ll be&amp;nbsp;authenticated.&lt;/p&gt;
&lt;p&gt;Now, although the session authentication is nice for using in browsers, you may need to access your &lt;span class="caps"&gt;API&lt;/span&gt; through a desktop
or a mobile application where, setting the cookies yourself is not the optimal solution. Also, you may have an &lt;span class="caps"&gt;SPA&lt;/span&gt; that needs
to access an &lt;span class="caps"&gt;API&lt;/span&gt; in a different domain; using &lt;a class="reference external" href="https://stackoverflow.com/questions/3342140/cross-domain-cookies"&gt;using cookies for this is not easy&lt;/a&gt; - if possible at&amp;nbsp;all.&lt;/p&gt;
&lt;p&gt;For such cases, django-rest-framework
offers a different authentication method called &lt;tt class="docutils literal"&gt;TokenAuthentication_&lt;/tt&gt;. Using this method, each user of the Django application
is correlated with a random string (Token) which is passed along with the request at its header thus the Django app can authenticate
the user using this token! One thing that may seem strange is that since both the session cookie and a token are
set through &lt;span class="caps"&gt;HTTP&lt;/span&gt; Headers why all the fuss about tokens? Why not just use the session cookie and be done with it. Well, there are
various reasons - here&amp;#8217;s a &lt;cite&gt;rather extensive article&lt;/cite&gt; explaining some. Some of the reasons are that a token can be valid forever
while the session is something ephemeral - beyond authorization information, sessions may keep various other data for a web
application and are expired after some time to save space. Also, since tokens are used for exactly this (authentication) they
are much easier to use and reason about. Finally, as I&amp;#8217;ve already explained, sharing cookies by multiple sites is not something
you&amp;#8217;d like to&amp;nbsp;do.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installation-configuration"&gt;
&lt;h2&gt;Installation &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt;&amp;nbsp;configuration&lt;/h2&gt;
&lt;p&gt;To install django-rest-auth just follow &lt;a class="reference external" href="http://django-rest-auth.readthedocs.io/en/latest/installation.html#installation"&gt;the instructions here&lt;/a&gt; i.e just add
&lt;tt class="docutils literal"&gt;'rest_framework', 'rest_framework.authtoken'&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;'rest_auth'&lt;/tt&gt; to your &lt;cite&gt;INSTALLED_APPS&lt;/cite&gt; in
&lt;tt class="docutils literal"&gt;settings.py&lt;/tt&gt; and run&amp;nbsp;migrate.&lt;/p&gt;
&lt;p&gt;Since I won&amp;#8217;t be adding any other apps to this project (no models are actually needed), I&amp;#8217;ve added
two directories &lt;tt class="docutils literal"&gt;static&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;templates&lt;/tt&gt; to put static files and templates there. This is configured
by adding the &lt;tt class="docutils literal"&gt;'&lt;span class="caps"&gt;DIRS&lt;/span&gt;'&lt;/tt&gt; attribte to &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;TEMPLATES&lt;/span&gt;&lt;/tt&gt;, like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;TEMPLATES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;BACKEND&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;django.template.backends.django.DjangoTemplates&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;DIRS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;templates&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and adding the &lt;cite&gt;STATICFILES_DIRS&lt;/cite&gt; setting:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;STATICFILES_DIRS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;static&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The remaining setting are the default as were created by &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;django-admin&lt;/span&gt; startproject&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;I have included the the following urls to &lt;tt class="docutils literal"&gt;urls.py&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;admin/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test_auth/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TestAuthView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test_auth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rest-auth/logout/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LogoutViewEx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rest_logout&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rest-auth/login/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LoginView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;s