<!doctype html>
<html lang="en" class="light">
  <head>
    <title>Some useful Git commands ||  R3ID</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta http-equiv="last-modified" content="2022-06-28">
    <meta name="description" content="A software engineer based in Hertfordshire who specializes in developing (and occasionally designing) exceptional, high-quality websites and applications.">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.1.1/tailwind.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
    <link rel="stylesheet" href="/assets/css/main.css" media="screen">
    <link rel="stylesheet" href="/assets/css/main.css" media="print">
    <link rel="icon" type="image/png" href="https://r3id.dev/favicon.ico">
  </head>
  <body class="home-page text-gray-500">

    <nav class="max-w-5xl m-auto p-5 flex justify-between border-solid border-b border-gray-100 bg-white dark:border-black dark:bg-blackish sticky top-0 opacity-90 z-10">
  <div class="flex items-center">
    <a href="/" class="transition-colors">
      <i class="far fa-arrow-left text-sm text-glow hover:text-gray-700"></i>
    </a>
  </div>
</nav>




<div class="default-container">
  <div class="pt-20 pb-1 inline-flex overflow-x-auto space-x-2">
		<a href="/">
			<p class="cursor-pointer text-sm text-gray-400 dark:text-gray-600 hover:font-medium hover:text-gray-700 dark:hover:text-gray-300 min-w-max">Home /</p>
		</a>
    <a href="/notes">
			<p class="cursor-pointer text-sm text-gray-400 dark:text-gray-600 hover:font-medium hover:text-gray-700 dark:hover:text-gray-300 min-w-max">Notes to self /</p>
		</a>
		<a href="/notes/useful-git-cmds">
			<p class="cursor-pointer text-sm text-glow dark:text-glow hover:font-medium hover:text-gray-700 dark:hover:text-gray-300 min-w-max">Some useful Git commands</p>
		</a>
	</div>
	<div class="mb-6">
		<h1 class="pb-2 font-bold text-3xl text-gray-600">Some useful Git commands</h1>
    
      <p class="text-sm italic mb-4">It's a 7 minute read</p>
    
	</div>
  <div class="text-content">
    <p>As developers we need to store our code somewhere. I mainly use Git, which is also one of the most popular version control systems. So, in this article we are going to look at a few Git commands which will come in handy, and most of which you’d use regularly.</p>

<div class="image-center">
<img src="https://r3id.dev/assets/images/articles/a-gitflow.png" />
</div>

<hr />

<h2 id="git-config">git config</h2>
<p>The <code class="language-plaintext highlighter-rouge">git config</code> command is used to set Git configuration values on a global or local project level. At its most basic level it sets the name and email which will be associated with commits.</p>

<p>Example: <code class="language-plaintext highlighter-rouge">git config –global user.name "[name]"</code></p>

<p>Example: <code class="language-plaintext highlighter-rouge">git config –global user.email "[email address]"</code></p>

<h2 id="git-init">git init</h2>
<p>The <code class="language-plaintext highlighter-rouge">git init</code> command creates a new Git repository. It can be used to convert an existing, un-versioned project to a Git repository or initialise a new, empty repository.</p>

<p>Example: <code class="language-plaintext highlighter-rouge">git init</code></p>

<p>Example: <code class="language-plaintext highlighter-rouge">git init [repository name]</code></p>

<h2 id="git-clone">git clone</h2>
<p>If a project has already been set up in a central repository, the <code class="language-plaintext highlighter-rouge">git clone</code> command is the most common way for users to obtain a development copy. Like <code class="language-plaintext highlighter-rouge">git init</code>, cloning is generally a one-time operation.</p>

<p>Example: <code class="language-plaintext highlighter-rouge">git clone https://repourl.com/repo_name.git</code></p>

<h2 id="git-add">git add</h2>
<p>The <code class="language-plaintext highlighter-rouge">git add</code> command adds a change in the working directory to the staging area. It lets Git know that you want to include updates to a particular file in the next commit.</p>

<h3 id="options">Options</h3>
<p><code class="language-plaintext highlighter-rouge">git add .</code></p>

<p>Stage all changes in all files for the next commit.</p>

<p><code class="language-plaintext highlighter-rouge">git add [file]</code></p>

<p>Stage all changes in <code class="language-plaintext highlighter-rouge">[file]</code> for the next commit.</p>

<p><code class="language-plaintext highlighter-rouge">git add [directory]</code></p>

<p>Stage all changes in <code class="language-plaintext highlighter-rouge">[directory]</code> for the next commit.</p>

<h2 id="git-commit">git commit</h2>
<p>The git commit command captures a snapshot of the project’s currently staged changes. Committed snapshots can be thought of as <em>safe</em> versions of a project, and Git will not change them unless you explicitly ask it to.</p>

<h3 id="options-1">Options</h3>
<p><code class="language-plaintext highlighter-rouge">git commit</code></p>

<p>Commit the staged snapshot. This will launch a text editor prompting you for a commit message. After you’ve entered a message, save the file and close the editor to create the actual commit.</p>

<p><code class="language-plaintext highlighter-rouge">git commit -a</code></p>

<p>Commit a snapshot of all changes in the working directory. This only includes modifications to tracked files (those that have been added with git add at some point in their history).</p>

<p><code class="language-plaintext highlighter-rouge">git commit -m "commit message"</code></p>

<p>A shortcut command that immediately creates a commit with a passed commit message. By default, git commit will open up the locally configured text editor, and prompt for a commit message to be entered. Passing the -m option will forgo the text editor prompt in-favour of an inline message.</p>

<h2 id="git-status">git status</h2>
<p>The <code class="language-plaintext highlighter-rouge">git status</code> command displays the state of the working directory and the staging area. It lets you see which changes have been staged, which haven’t, and which files aren’t being tracked by Git. Status output does not show you any information regarding the committed project history. For this, you need to use git log.</p>

<h2 id="git-log">git log</h2>
<p>The <code class="language-plaintext highlighter-rouge">git log</code> command displays committed snapshots. It lets you list the project history, filter it, and search for specific changes.</p>

<h2 id="git-tag">git tag</h2>
<p>This document will discuss the Git concept of tagging and the <code class="language-plaintext highlighter-rouge">git tag</code> command. Tags are references which point to specific points in Git history. Tagging is generally used to capture a point in history that is used for a marked version release (<em>i.e. v1.0.1</em>). A tag is like a branch that doesn’t change. Unlike branches, tags, after being created, have no further history of commits</p>

<p>To create a new tag execute the following command:</p>

<p><code class="language-plaintext highlighter-rouge">git tag &lt;tagname&gt;</code> replace <code class="language-plaintext highlighter-rouge">&lt;tagname&gt;</code> with a semantic identifier to the state of the repo at the time the tag is being created. A common pattern is to use version numbers like <code class="language-plaintext highlighter-rouge">git tag v1.4</code>.</p>

<h2 id="git-branch">git branch</h2>
<p>A branch represents an independent line of development. Branches serve as an abstraction for the edit/stage/commit process. You can think of them as a way to request a brand new working directory, staging area, and project history. New commits are recorded in the history for the current branch, which results in a fork in the history of the project.</p>

<h3 id="options-2">Options</h3>
<p><code class="language-plaintext highlighter-rouge">git branch</code> list all of the branches in your repository. This is synonymous with git branch –list.</p>

<p><code class="language-plaintext highlighter-rouge">git branch &lt;branch&gt;</code> creates a new branch called <branch>. This does not check out the new branch.</branch></p>

<p><code class="language-plaintext highlighter-rouge">git branch -d &lt;branch&gt;</code> deletes the specified branch. This is a “safe” operation in that Git prevents you from deleting the branch if it has un-merged changes.</p>

<p><code class="language-plaintext highlighter-rouge">git branch -D &lt;branch&gt;</code> force deletes the specified branch, even if it has un-merged changes. This is the command to use if you want to permanently throw away all of the commits associated with a particular line of development.</p>

<p><code class="language-plaintext highlighter-rouge">git branch -m &lt;branch&gt;</code> renames the current branch to <branch>.</branch></p>

<p><code class="language-plaintext highlighter-rouge">git branch -a</code> lists all remote branches.</p>

<h2 id="git-checkout">git checkout</h2>
<p>The <code class="language-plaintext highlighter-rouge">git checkout</code> command lets you navigate between the branches created by <code class="language-plaintext highlighter-rouge">git branch</code>. Checking out a branch updates the files in the working directory to match the version stored in that branch, and it tells Git to record all new commits on that branch. Think of it as a way to select which line of development you’re working on.</p>

<p>Switching branches is a straightforward operation. Executing the following will point HEAD to the tip of <branchname>.</branchname></p>

<p><code class="language-plaintext highlighter-rouge">git checkout &lt;branchname&gt;</code></p>

<p>The git checkout command accepts a <code class="language-plaintext highlighter-rouge">-b</code> argument that acts as a convenience method which will create the new branch and immediately switch to it. You can work on multiple features in a single repository by switching between them with git checkout.</p>

<p><code class="language-plaintext highlighter-rouge">git checkout -b &lt;new-branch&gt;</code></p>

<p>## git merge
Git merge will combine multiple sequences of commits into one unified history. In the most frequent use cases, git merge is used to combine two branches.
An example of using <code class="language-plaintext highlighter-rouge">git merge</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Start a new feature
git checkout -b new-feature master
# Edit some files
git add &lt;file&gt;
git commit -m "Start a feature"
# Edit some files
git add &lt;file&gt;
git commit -m "Finish a feature"
# Merge in the new-feature branch
git checkout master
git merge new-feature
git branch -d new-feature
</code></pre></div></div>

<h2 id="git-remote">git remote</h2>
<p>The <code class="language-plaintext highlighter-rouge">git remote</code> command is essentially an interface for managing a list of remote entries that are stored in the repository’s <code class="language-plaintext highlighter-rouge">./.git/config</code> file.</p>

<p><code class="language-plaintext highlighter-rouge">git remote</code> lists the remote connections you have to other repositories.</p>

<p><code class="language-plaintext highlighter-rouge">git remote -v</code> is the same as the above command, but include the URL of each connection.</p>

<p><code class="language-plaintext highlighter-rouge">git remote add</code> creates a new connection to a remote repository. After adding a remote, you’ll be able to use <name> as a convenient shortcut for <url> in other Git commands.</url></name></p>

<p>Example:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git remote add myrepo https://repourl.com/repo_name.git
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">git remote rm</code> removes the connection to the remote repository called <name>.</name></p>

<p><code class="language-plaintext highlighter-rouge">git remote rename</code> renames a remote connection from <old-name> to <new-name>.</new-name></old-name></p>

<h2 id="git-push">git push</h2>
<p>The <code class="language-plaintext highlighter-rouge">git push</code> command is used to upload local repository content to a remote repository. Pushing is how you transfer commits from your local repository to a remote repo.</p>

<p><code class="language-plaintext highlighter-rouge">git push</code> push the specified branch to <remote>, along with all of the necessary commits and internal objects. This creates a local branch in the destination repository. To prevent you from overwriting commits, Git won’t let you push when it results in a non-fast-forward merge in the destination repository.</remote></p>

<p><code class="language-plaintext highlighter-rouge">git push  --force</code> same as the above command, but force the push even if it results in a non-fast-forward merge. <strong>Do not use the –force flag unless you’re absolutely sure you know what you’re doing.</strong></p>

<p><code class="language-plaintext highlighter-rouge">git push  --all</code> push all of your local branches to the specified remote.</p>

<p><code class="language-plaintext highlighter-rouge">git push  --tags</code> tags are not automatically pushed when you push a branch or use the <code class="language-plaintext highlighter-rouge">--all</code> option. The <code class="language-plaintext highlighter-rouge">--tags</code> flag sends all of your local tags to the remote repository.</p>

<h2 id="git-pull">git pull</h2>
<p>The <code class="language-plaintext highlighter-rouge">git pull</code> command is used to fetch and download content from a remote repository and immediately update the local repository to match that content.</p>

  </div>
</div>


    <div class="py-20 grid justify-center">
  <div class="w-full flex align-middle space-x-4">
    <a href="https://www.linkedin.com/in/alanr3id/" title="LinkedIn">
      <i class="fab fa-linkedin-in text-xl text-blue-600"></i>
    </a>
    <a href="https://twitter.com/alan_r3id" target="_blank" title="Twitter">
      <i class="fab fa-twitter text-xl text-blue-300"></i>
    </a>
    <a href="https://dribbble.com/r3id" target="_blank" title="Dribbble">
      <i class="fab fa-dribbble text-xl text-pink-600"></i>
    </a>
    <a href="https://github.com/r3id" target="_blank" title="GitHub">
      <i class="fab fa-github text-xl text-black"></i>
    </a>
    <a href="https://medium.com/@r3id" target="_blank" title="Medium">
      <i class="fab fa-medium text-xl text-black"></i>
    </a>
  </div>
  <p class="pt-5 pb-5 text-xs font-medium text-center text-gray-400 dark:text-gray-200">
    <a href="/privacy">Privacy</a>
  </p>
  <p class="pt-5 pb-5 text-xs font-medium text-center text-gray-300 dark:text-gray-200">
    © 2021 Alan Reid
  </p>
</div>


    <!-- Global site tag (gtag.js) - Google Analytics -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-68933763-1"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());

      gtag('config', 'UA-68933763-1');
    </script>
  </body>
</html>
