<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <title>Services | Nodewood - Node.js &amp; Vue.js SaaS Boilerplate &amp; Starter Kit</title>
    <meta name="generator" content="VuePress 1.8.0">
    <link href="https://fonts.googleapis.com/css?family=Raleway|Rubik&amp;display=swap" rel="stylesheet">
    <link href="https://unpkg.com/tailwindcss@^1.0/dist/tailwind.min.css" rel="stylesheet">
    <script>var clicky_site_ids = clicky_site_ids || []; clicky_site_ids.push(101244903);</script>
    <script async="async" src="https://static.getclicky.com/js"></script>
    <meta name="description" content="Save weeks or months of development time and start writing code now with Nodewood, a Vue.js/Node.js Javascript SaaS starter kit focused on setting you up for success.">
    
    <link rel="preload" href="/assets/css/0.styles.a1f64882.css" as="style"><link rel="preload" href="/assets/js/app.2c5c8431.js" as="script"><link rel="preload" href="/assets/js/3.97560a66.js" as="script"><link rel="preload" href="/assets/js/23.144f5590.js" as="script"><link rel="prefetch" href="/assets/js/1.e7c95f4b.js"><link rel="prefetch" href="/assets/js/10.4714bec1.js"><link rel="prefetch" href="/assets/js/11.e1c6e275.js"><link rel="prefetch" href="/assets/js/12.7d1683db.js"><link rel="prefetch" href="/assets/js/13.6ad699ae.js"><link rel="prefetch" href="/assets/js/14.98fffd60.js"><link rel="prefetch" href="/assets/js/15.75e154cd.js"><link rel="prefetch" href="/assets/js/16.e0558b03.js"><link rel="prefetch" href="/assets/js/17.2c79718e.js"><link rel="prefetch" href="/assets/js/18.01df460c.js"><link rel="prefetch" href="/assets/js/19.dcfb6177.js"><link rel="prefetch" href="/assets/js/20.7a5ebcf2.js"><link rel="prefetch" href="/assets/js/21.8e46f6a6.js"><link rel="prefetch" href="/assets/js/22.85a4fe2c.js"><link rel="prefetch" href="/assets/js/24.e330e298.js"><link rel="prefetch" href="/assets/js/25.11d829d6.js"><link rel="prefetch" href="/assets/js/26.8efddb91.js"><link rel="prefetch" href="/assets/js/27.6151565d.js"><link rel="prefetch" href="/assets/js/28.2ff0aeda.js"><link rel="prefetch" href="/assets/js/29.7d3717f8.js"><link rel="prefetch" href="/assets/js/30.2c5eca19.js"><link rel="prefetch" href="/assets/js/31.b0f778d0.js"><link rel="prefetch" href="/assets/js/32.da80e8ef.js"><link rel="prefetch" href="/assets/js/33.f36044ca.js"><link rel="prefetch" href="/assets/js/34.ca2176a9.js"><link rel="prefetch" href="/assets/js/35.486971e2.js"><link rel="prefetch" href="/assets/js/36.01f889f1.js"><link rel="prefetch" href="/assets/js/37.22720a84.js"><link rel="prefetch" href="/assets/js/38.3879083d.js"><link rel="prefetch" href="/assets/js/39.76217072.js"><link rel="prefetch" href="/assets/js/4.82b986e7.js"><link rel="prefetch" href="/assets/js/40.2f3ff916.js"><link rel="prefetch" href="/assets/js/41.d1beef0f.js"><link rel="prefetch" href="/assets/js/42.b55d7485.js"><link rel="prefetch" href="/assets/js/43.abfd8c00.js"><link rel="prefetch" href="/assets/js/44.785cabc6.js"><link rel="prefetch" href="/assets/js/45.a7ebb691.js"><link rel="prefetch" href="/assets/js/46.505af8a7.js"><link rel="prefetch" href="/assets/js/47.87e4cbfe.js"><link rel="prefetch" href="/assets/js/48.7fe633eb.js"><link rel="prefetch" href="/assets/js/49.695e374f.js"><link rel="prefetch" href="/assets/js/5.a06e35e7.js"><link rel="prefetch" href="/assets/js/50.6a044cca.js"><link rel="prefetch" href="/assets/js/51.cd34d42b.js"><link rel="prefetch" href="/assets/js/52.6c1a4410.js"><link rel="prefetch" href="/assets/js/53.1c5bba26.js"><link rel="prefetch" href="/assets/js/54.79229308.js"><link rel="prefetch" href="/assets/js/55.17556840.js"><link rel="prefetch" href="/assets/js/56.efe22f15.js"><link rel="prefetch" href="/assets/js/57.85a6201e.js"><link rel="prefetch" href="/assets/js/58.e62d9cf8.js"><link rel="prefetch" href="/assets/js/59.616f8f3d.js"><link rel="prefetch" href="/assets/js/6.5c0e4fa7.js"><link rel="prefetch" href="/assets/js/60.5de3197c.js"><link rel="prefetch" href="/assets/js/61.05007999.js"><link rel="prefetch" href="/assets/js/62.3ab5ac3f.js"><link rel="prefetch" href="/assets/js/63.cf858a85.js"><link rel="prefetch" href="/assets/js/64.6679b2f5.js"><link rel="prefetch" href="/assets/js/65.4846ffb2.js"><link rel="prefetch" href="/assets/js/7.4701d5ea.js"><link rel="prefetch" href="/assets/js/8.a264957f.js"><link rel="prefetch" href="/assets/js/9.addc3dd2.js">
    <link rel="stylesheet" href="/assets/css/0.styles.a1f64882.css">
  </head>
  <body>
    <div id="app" data-server-rendered="true"><div class="theme-container"><header class="navbar"><div class="sidebar-button"><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" role="img" viewBox="0 0 448 512" class="icon"><path fill="currentColor" d="M436 124H12c-6.627 0-12-5.373-12-12V80c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12zm0 160H12c-6.627 0-12-5.373-12-12v-32c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12zm0 160H12c-6.627 0-12-5.373-12-12v-32c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12z"></path></svg></div> <a href="/" class="home-link router-link-active"><img src="/log-logo-bw.svg" alt="Nodewood Documentation" class="logo"> <span class="site-name can-hide">Nodewood</span></a> <div class="links mr-32"><nav class="nav-links can-hide"><div class="nav-item"><a href="/" class="nav-link">
  Home
</a></div><div class="nav-item"><a href="/blog/">
      Blog
    </a></div> <!----></nav> <a href="/app/signup" class="build-with-nodewood">
      Build with Nodewood
    </a> <div class="search-box"><input aria-label="Search" autocomplete="off" spellcheck="false" value=""> <!----></div></div> <div class="bg-red-700 text-white fixed transform rotate-45 px-16" style="top: 20px; right: -40px">
    BETA
  </div></header> <div class="sidebar-mask"></div> <aside class="sidebar"><nav class="nav-links"><div class="nav-item"><a href="/" class="nav-link">
  Home
</a></div><div class="nav-item"><a href="/blog/">
      Blog
    </a></div> <!----></nav>  <ul class="sidebar-links"><li><section class="sidebar-group collapsable depth-0"><p class="sidebar-heading"><span>Overview</span> <span class="arrow right"></span></p> <!----></section></li><li><section class="sidebar-group collapsable depth-0"><p class="sidebar-heading"><span>Getting Started</span> <span class="arrow right"></span></p> <!----></section></li><li><section class="sidebar-group collapsable depth-0"><p class="sidebar-heading"><span>Architecture Concepts</span> <span class="arrow right"></span></p> <!----></section></li><li><section class="sidebar-group collapsable depth-0"><p class="sidebar-heading open"><span>API / Backend</span> <span class="arrow down"></span></p> <ul class="sidebar-links sidebar-group-items"><li><a href="/docs/api/" aria-current="page" class="sidebar-link">Introduction</a></li><li><a href="/docs/api/express/" class="sidebar-link">Express App</a></li><li><a href="/docs/api/controllers/" class="sidebar-link">Controllers &amp; API Routing</a></li><li><a href="/docs/api/services/" aria-current="page" class="active sidebar-link">Services</a></li><li><a href="/docs/api/database/" class="sidebar-link">Database</a></li></ul></section></li><li><section class="sidebar-group collapsable depth-0"><p class="sidebar-heading"><span>UI / Frontend</span> <span class="arrow right"></span></p> <!----></section></li><li><a href="/docs/cli/" class="sidebar-link">CLI / Scripts</a></li><li><section class="sidebar-group collapsable depth-0"><p class="sidebar-heading"><span>Nodewood Features</span> <span class="arrow right"></span></p> <!----></section></li><li><section class="sidebar-group collapsable depth-0"><p class="sidebar-heading"><span>Tutorials</span> <span class="arrow right"></span></p> <!----></section></li><li><a href="/docs/sales-website/" class="sidebar-link">Sales Website</a></li><li><a href="/docs/deploying/" class="sidebar-link">Deploying to Production</a></li><li><a href="/docs/help/" class="sidebar-link">Help</a></li></ul> </aside> <main class="page"> <div class="theme-default-content content__default"><h1 id="services"><a href="#services" class="header-anchor">#</a> Services</h1> <p>Complex controllers that contain a lot of domain logic is a classic anti-pattern that can lead to duplicated code and difficult-to-read controllers, among other issues.  However, Nodewood's Models lack database access, meaning the tradition ActiveRecord pattern of performing all your saving/loading on them won't work.  This is where Services come into play.</p> <p>A Service contains a collection of actions commonly taken in that domain.  In the case of the &quot;users&quot; feature, users can be created, logged in, updated, etc.  These are actions in the <code>UsersService</code> that are called from the <code>UsersController</code> and return one or many <code>UserModels</code>.</p> <p>Multiple services can be used per Controller, as necessary.  A Controller may need to deal with both Users and Comments, and might call a <code>CommentsService</code> action to save a comment and a <code>UsersService</code> action to update the total number of comments made by a user.</p> <div class="custom-block tip"><p class="custom-block-title">TIP</p> <p>All services for all enabled features are <em>automatically</em> injected into your Controllers and other Services.  This means that you can use those services from a Controller without needing to manually create it, <em>and</em> you can use any other service from the service you are in.</p> <p>To use an automatically-injected service, use the camelCase version of that service's name.  For the <code>UsersService</code> service:</p> <div class="language-javascript extra-class"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>usersService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></div> <h2 id="database"><a href="#database" class="header-anchor">#</a> Database</h2> <p>Nodewood makes use of the <a href="https://massivejs.org/" target="_blank" rel="noopener noreferrer">MassiveJS<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> database library, as it fits the service pattern perfectly - you build queries on tables that return objects which are parsed into Nodewood models when they are passed into the constructor.  However Nodewood services include a few convenience methods and members to make working with MassiveJs a bit easier.</p> <h3 id="db"><a href="#db" class="header-anchor">#</a> <code>db</code></h3> <p>This is the MassiveJs instance that you would use to execute queries against: <code>const users = await this.db.users.findOne(1);</code>.</p> <h3 id="model"><a href="#model" class="header-anchor">#</a> <code>model</code></h3> <p>This is the model class this service returns from its database functions.</p> <h3 id="table"><a href="#table" class="header-anchor">#</a> <code>table()</code></h3> <p>This is a shortcut to the correct table to use for the current Service.  This allows you to start all database calls the same: <code>const users = await this.table().findOne(1);</code>.  Further, if you are in a transaction, you can pass the current transaction to <code>table(tx)</code> to ensure that the call happens inside the transaction.</p> <p>This abstraction helps power the other service helpers.</p> <h3 id="find"><a href="#find" class="header-anchor">#</a> <code>find()</code></h3> <p>Finds one model by its <code>id</code> field.</p> <h3 id="findby"><a href="#findby" class="header-anchor">#</a> <code>findBy()</code></h3> <p>Finds a collection of models by a simple query.  Accepts pagination parameters <code>page</code> and <code>per</code>, as well as <a href="https://massivejs.org/docs/options-objects" target="_blank" rel="noopener noreferrer">any other options values supported by MassiveJS<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>.</p> <h3 id="count"><a href="#count" class="header-anchor">#</a> <code>count()</code></h3> <p>Counts the total collection of models in the database for a query.  Used in conjunction with <code>findBy()</code> to identify the total number of pages when listing.</p> <h3 id="insert"><a href="#insert" class="header-anchor">#</a> <code>insert()</code></h3> <p>Inserts a collection of values into the database as a new row.  An array of keys can optionally be passed as well.  This will restrict the inserted data from the values to only the entries defined by the keys, so that a form's body can safely be used for the <code>values</code> parameter.  This allows you to write simple code that also prevents attackers from attempting to insert fields they're not allowed to (like <code>account_type</code>, etc)</p> <div class="language-javascript extra-class"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token constant">USER_CREATE_FORM_FIELDS</span><span class="token punctuation">,</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'#features/users/lib/validators/UserValidator'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>usersService<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span> req<span class="token punctuation">.</span>body<span class="token punctuation">,</span> <span class="token constant">USER_CREATE_FORM_FIELDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>In the above code, only the fields defined by <code>USER_CREATE_FORM_FIELDS</code> are picked from the request body and inserted into the users table.</p> <h3 id="update"><a href="#update" class="header-anchor">#</a> <code>update()</code></h3> <p>Updates a database row as defined by an ID with a collection of values.  Similar to <code>insert()</code>, an array of keys can optionally be passed as well to limit the values that are updated.</p> <div class="language-javascript extra-class"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token constant">USER_EDIT_FORM_FIELDS</span><span class="token punctuation">,</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'#features/users/lib/validators/UserValidator'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>usersService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">,</span> req<span class="token punctuation">.</span>body<span class="token punctuation">,</span> <span class="token constant">USER_EDIT_FORM_FIELDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>In the above code, only the fields defined by <code>USER_EDIT_FORM_FIELDS</code> are picked from the request body and used to update the user.</p> <h3 id="delete"><a href="#delete" class="header-anchor">#</a> <code>delete()</code></h3> <p>Deletes an instance by ID.</p> <h3 id="transactions"><a href="#transactions" class="header-anchor">#</a> Transactions</h3> <p>If you examine the source code for the main Service class (located at <code>wood/api/Service.js</code>), you'll notice the first parameter for all these function is <code>tx</code>, which means you can wrap these calls in a transaction in case you need to call multiple service actions to achieve your controller's ends - especially useful when getting the count for a pagination query:</p> <div class="language-javascript extra-class"><pre class="language-javascript"><code><span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">withTransaction</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">tx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span>
    page <span class="token operator">=</span> <span class="token constant">DEFAULT_PAGE</span><span class="token punctuation">,</span>
    per <span class="token operator">=</span> <span class="token constant">DEFAULT_PER</span><span class="token punctuation">,</span>
    search <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">;</span>

  <span class="token keyword">const</span> pages <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>usersService<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> per<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>usersService<span class="token punctuation">.</span><span class="token function">getSearchPage</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    search<span class="token punctuation">,</span>
    <span class="token literal-property property">page</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> pages<span class="token punctuation">)</span><span class="token punctuation">,</span>
    per<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Any errors that are thrown inside a <code>withTranaction()</code> call will be caught and handled as normal, but will cause any database calls that have been initiated with the provided <code>tx</code> object to be rolled back safely.</p> <p>If you <em>don't</em> wish to have a service action happen inside a transaction (for example, to update a &quot;failed&quot; count for a user before throwing an error that will roll back all transaction-based queries), you can pass <code>null</code> for the <code>tx</code> parameter, and the query will be executed outside the transaction.</p> <h2 id="email"><a href="#email" class="header-anchor">#</a> Email</h2> <p>Nodewood uses the <a href="https://nodemailer.com/about/" target="_blank" rel="noopener noreferrer">Nodemailer<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> library to send transactional emails.  You will need a mailer service (like <a href="https://aws.amazon.com/ses/" target="_blank" rel="noopener noreferrer">Amazon SES<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> or <a href="https://www.mailgun.com/" target="_blank" rel="noopener noreferrer">Mailgun<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>) to connect to, but Nodemailer is very versatile and easy to configure for whatever mailer service you choose.  The library comes installed by default, but you will need to add configuration values to <code>app/config/email.js</code> so it knows what mailer to use and what credentials to provide it.</p> <div class="custom-block tip"><p class="custom-block-title">TIP</p> <p>It is not recommended to use Nodewood to send campaign (i.e. mailing list) emails.  A great amount of work and care go into ensuring deliverability for campaign emails, and you are far, far better off engaging the services of a dedicated campaign mailer than trying to replicate them on your own.  In addition, you do not want to mix the IP addresses you use for sending transactional mail and campaign mail, in case a over-zealous ISP adds your campaign mail IP address to a blacklist.  You would be unable to send transactional mail to those customers as well, which could include payment alerts or other critical and time-sensitive notifications.</p></div> <h3 id="configuration"><a href="#configuration" class="header-anchor">#</a> Configuration</h3> <p>Nodemailer does not send email itself, it instead proxies your emails to a third-party email service.  These services ensure reliability, deliverability, and trackability for your send email.  In order to use one of these services, you will first need to sign up for an account:</p> <div class="tabs-component"><ul role="tablist" class="tabs-component-tabs"></ul> <div class="tabs-component-panels"><section aria-hidden="true" id="amazon-ses" role="tabpanel" class="tabs-component-panel" style="display:none;"><p>First, we need to set up your domain for sending email:</p> <ol><li><a href="https://portal.aws.amazon.com/billing/signup" target="_blank" rel="noopener noreferrer">Sign up for an Amazon AWS account<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></li> <li><a href="https://console.aws.amazon.com/ses/home" target="_blank" rel="noopener noreferrer">Got to the SES home<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></li> <li>Click &quot;Domains&quot; in the sidebar.</li> <li>Click the &quot;Verify a New Domain&quot; button.</li> <li>Enter your domain name and click &quot;Generate DKIM Settings&quot;.</li> <li>Add the provided TXT and CNAME records to your domain.  (You will need to do this with your DNS provider, not in Amazon (unless Amazon provides your domain names).)</li> <li>Wait for the Verification Status and DKIM Status to change from &quot;pending verification&quot; to &quot;verified&quot;.  This can take some time - DNS is not an especially fast technology.  You will get an email on success.</li></ol> <br> <p>This configures AWS SES in &quot;sandbox mode&quot;, which will work for development.  However, in order to send email in sandbox mode, you need to verify the email addresses that will be sending or receiving mail:</p> <ol><li>Click &quot;Email Addresses&quot; in the sidebar.</li> <li>Click &quot;Verify a New Email Address&quot;.</li> <li>Add your email address and then click &quot;Verify this Email Address&quot;</li> <li>Check your email and click the link in the verification email Amazon sends you.</li></ol> <br> <p>Then we need to create a user that can send email, and get your access and secret keys:</p> <ol><li>Click &quot;Services&quot; in the top bar and choose &quot;IAM&quot;.</li> <li>Click &quot;Users&quot; in the sidebar.</li> <li>Click &quot;Add User&quot;.</li> <li>Enter a user name, click the &quot;Programmatic access&quot; checkbox, and click &quot;Next: Permissions&quot;.</li> <li>Click the &quot;Attach existing policies directly&quot; button.</li> <li>Click the box next to &quot;AmazonSESFullAccess&quot;, and click &quot;Next: Tags&quot;.</li> <li>Optionally enter any tags you wish to categorize this user, and click &quot;Next: Review&quot;.</li> <li>Review your choices and click &quot;Create user&quot;.</li> <li>Edit your <code>.env</code> file at the root of your Nodewood project, and add your &quot;Access key ID&quot; as <code>AWS_ACCESS_KEY_ID</code>, and your &quot;Secret access key&quot; (you will have to click &quot;Show&quot;) as <code>AWS_SECRET_ACCESS_KEY</code>.</li> <li>From your project's <code>app</code> folder, run <code>yarn add aws-sdk</code>.</li></ol> <br> <p>Finally, you will need to configure Nodemailer by editing your config files.</p> <p>First, add the new transport config to your <code>app/config-api/email.js</code> config file:</p> <div class="language-javascript extra-class"><pre class="language-javascript"><code><span class="token keyword">const</span> woodConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@wood/config-api/email'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> aws <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'aws-sdk'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>woodConfig<span class="token punctuation">,</span>

  <span class="token literal-property property">transportConfig</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token constant">SES</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">aws<span class="token punctuation">.</span>SES</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">accessKeyId</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">AWS_ACCESS_KEY_ID</span><span class="token punctuation">,</span>
      <span class="token literal-property property">secretAccessKey</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">AWS_SECRET_ACCESS_KEY</span><span class="token punctuation">,</span>
      <span class="token literal-property property">apiVersion</span><span class="token operator">:</span> <span class="token string">'2010-12-01'</span><span class="token punctuation">,</span>
      <span class="token literal-property property">region</span><span class="token operator">:</span> <span class="token string">'us-east-2'</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>Then, add the new email addresses to your <code>app/config/email.js</code> config file`:</p> <div class="language-javascript extra-class"><pre class="language-javascript"><code><span class="token keyword">const</span> woodConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@wood/config/email'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>woodConfig<span class="token punctuation">,</span>

  <span class="token comment">// Replace this with the email you are sending from</span>
  <span class="token literal-property property">fromEmail</span><span class="token operator">:</span> <span class="token string">'admin@your-url.com'</span><span class="token punctuation">,</span>

  <span class="token comment">// Replace this with the email you will receive support requests at</span>
  <span class="token literal-property property">supportEmail</span><span class="token operator">:</span> <span class="token string">'support@your-url.com'</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>The transport configuration is in a separate config file to ensure that it is still safe and simple to import your email address information in your UI.  Otherwise, you'd need to add all the email-sending libraries to your UI package in order to include the transport properly, which would add unnecessary size to your distributable files.</p> <p>To switch to Production mode (which you will want to do <em>well before</em> you go live, since it can take some time for Amazon's customer support to review your case), you will need to <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html" target="_blank" rel="noopener noreferrer">follow Amazon's instructions on Moving out of the Amazon SES Sandbox<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>.</p></section> <section aria-hidden="true" id="mailgun" role="tabpanel" class="tabs-component-panel" style="display:none;"><ol><li><a href="https://signup.mailgun.com/new/signup" target="_blank" rel="noopener noreferrer">Sign up for a Mailgun account<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>.  The Flex Trial should work fine for development.</li> <li>Click the &quot;Sending&quot; dropdown on the sidebar, then click &quot;Domains&quot;.</li> <li>Click &quot;Add New Domain&quot;.</li> <li>Fill in your domain name (typically you want to follow Mailgun's advice and add a <code>mg.</code> subdomain to your domain, this helps if you choose to receive email through Mailgun later).</li> <li>Click &quot;Add Domain&quot;.</li> <li>Add the provided TXT, CNAME, and optionally MX records at your DNS provider.</li> <li>Wait a moment for the DNS changes to propagate, then click &quot;Verify DNS Settings&quot;.</li> <li>Once your DNS settings are verified (green checkmarks), click the &quot;Settings&quot; dropdown on the sidebar, then click &quot;API Keys&quot;.</li> <li>Click the &quot;eye&quot; button next to your Private API Key.  Copy this value, and add it to your .env file as <code>MAILGUN_API_KEY</code>.</li> <li>From your project's <code>app</code> folder, run <code>yarn add nodemailer-mailgun-transport</code>.</li></ol> <br> <p>Finally, you will need to configure Nodemailer by editing your config files.</p> <p>First, add the new transport config to your <code>app/config-api/email.js</code> config file:</p> <div class="language-javascript extra-class"><pre class="language-javascript"><code><span class="token keyword">const</span> woodConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@wood/config-api/email'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> mg <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'nodemailer-mailgun-transport'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>woodConfig<span class="token punctuation">,</span>

  <span class="token literal-property property">transportConfig</span><span class="token operator">:</span> <span class="token function">mg</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">auth</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">api_key</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">MAILGUN_API_KEY</span><span class="token punctuation">,</span>
      <span class="token literal-property property">domain</span><span class="token operator">:</span> <span class="token string">'REPLACE_WITH_YOUR_DOMAIN'</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>Then, add the new email addresses to your <code>app/config/email.js</code> config file`:</p> <div class="language-javascript extra-class"><pre class="language-javascript"><code><span class="token keyword">const</span> woodConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@wood/config/email'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>woodConfig<span class="token punctuation">,</span>

  <span class="token comment">// Replace this with the email you are sending from</span>
  <span class="token literal-property property">fromEmail</span><span class="token operator">:</span> <span class="token string">'admin@your-url.com'</span><span class="token punctuation">,</span>

  <span class="token comment">// Replace this with the email you will receive support requests at</span>
  <span class="token literal-property property">supportEmail</span><span class="token operator">:</span> <span class="token string">'support@your-url.com'</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>The transport configuration is in a separate config file to ensure that it is still safe and simple to import your email address information in your UI.  Otherwise, you'd need to add all the email-sending libraries to your UI package in order to include the transport properly, which would add unnecessary size to your distributable files.</p></section></div></div> <p>Consult <a href="https://nodemailer.com/transports/" target="_blank" rel="noopener noreferrer">Nodemailer's documentation<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> for how to set up other mail transports.</p> <h3 id="sending"><a href="#sending" class="header-anchor">#</a> Sending</h3> <p>By default, Nodewood sends a variety of emails (account confirmation, password reset, etc).  If you have completed the above configuration step, those emails should now be sending correctly.  However, you will likely wish to send application-specific emails yourself.</p> <p><code>#lib/Email</code> exports a <code>sendMail()</code> function that allows you to send mail.  The first parameter to this function is the <code>mailer</code> object configured above and passed into services via the constructor.  The second parameter is an options object used to specify who to send to, who to send from, add a message subject, body, etc.</p> <p>You can either pass an <code>html</code> key to this options object and use that HTML directly, or you can pass a <code>template</code> key containing the full path to an <a href="https://ejs.co/" target="_blank" rel="noopener noreferrer">EJS<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> template to use and a <code>data</code> key containing data to substitute into the template.  Typically templates are stored in a feature's <code>api/emails</code> folder, but if you have a collection of templates that are common to your application, you could, for example, create an <code>app/emails</code> folder and store them there.</p> <p>You can always pass a <code>text</code> key to this options object to define a text-only email body to display to email readers that don't display HTML.</p> <div class="language-javascript extra-class"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> sendMail <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'#lib/Email'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">await</span> <span class="token function">sendMail</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mailer<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">from</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>appName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> &lt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>appEmail<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">to</span><span class="token operator">:</span> user<span class="token punctuation">.</span>email<span class="token punctuation">,</span>
  <span class="token literal-property property">subject</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>appName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: Your weekly results</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../emails/WeeklyResults.ejs'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">total</span><span class="token operator">:</span> results<span class="token punctuation">.</span>total<span class="token punctuation">,</span>
    <span class="token literal-property property">userName</span><span class="token operator">:</span> user<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
    appName<span class="token punctuation">,</span>
    appUrl<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="adding-a-new-service"><a href="#adding-a-new-service" class="header-anchor">#</a> Adding a new service</h2> <p>To add a new service with some sample code to get you rolling, run:</p> <div class="language- extra-class"><pre class="language-text"><code>nodewood add:service FEATURE NAME
</code></pre></div><p>Replace <code>FEATURE</code> with the name of the feature you wish to add a service for, and <code>NAME</code> with the name of the service you wish to create.  (e.g.: <code>nodewood add:service scheduling calendar</code> to add <code>CalendarsService</code> to the <code>scheduling</code> feature.)</p> <h2 id="service-example-communicating-with-a-third-party-api"><a href="#service-example-communicating-with-a-third-party-api" class="header-anchor">#</a> Service example: Communicating with a third-party API</h2> <p>No one is an island, and these days, it's pretty rare to find an app that doesn't rely on external services to get things done.  You might need file storage on S3, email delivery with Mailgun, or any other number of capabilities that external services provide.  But where's the best place to put the code that does this communication?  Not in a Controller, since we want to keep those as thin as possible.  But if we place this access in a Service, we keep our Controllers clean, and we can create compose-able functions that can be used safely in multiple places in our app.</p> <h3 id="an-example-a-blog-post-importer"><a href="#an-example-a-blog-post-importer" class="header-anchor">#</a> An example: A Blog Post Importer</h3> <p>Let's assume we're importing blog posts from an external service for use in our app.  (Maybe our app does spelling/grammar checking, or offers blog post backups.)  These posts are available from https://justsomeblog.com/posts, which returns JSON in the following format.</p> <div class="language-json extra-class"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;posts&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
    <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;A post title&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;The post author&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;date&quot;</span><span class="token operator">:</span> <span class="token string">&quot;A timestamp&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;contents&quot;</span><span class="token operator">:</span> <span class="token string">&quot;The post contents&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> ...<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div><p>We'll want to start with defining a Model to work with.  Assume we already a have a feature called <code>imports</code> that we're working in:</p> <div class="language-bash extra-class"><pre class="language-bash"><code>$ nodewood add:model imports post
</code></pre></div><p>This will create a model in <code>app/features/imports/lib/models/PostModel.js</code>, which we can update to take into account the fields we know of:</p> <div class="language-javascript extra-class"><pre class="language-javascript"><code><span class="token keyword">const</span> moment <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'moment'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> Model <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'#lib/Model'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> FieldNumber<span class="token punctuation">,</span> FieldString<span class="token punctuation">,</span> FieldDate <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'#lib/Fields'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * @type {Object} Field configuration.
 */</span>
<span class="token keyword">const</span> <span class="token constant">POST_MODEL_FIELDS</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">FieldNumber</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'ID'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">FieldString</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'Title'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">author</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">FieldString</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'Author'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">FieldDate</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'Date'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">contents</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">FieldString</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'Contents'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">PostModel</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span> <span class="token punctuation">{</span>
  <span class="token comment">/**
   * Constructor.
   *
   * @param {Number} id - The internal ID of this post.
   * @param {String} title - The title of this post.
   * @param {String} author - The author of this post.
   * @param {Date} date - The date this post was published.
   * @param {String} contents - The contents of this post.
   */</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> id<span class="token punctuation">,</span> title<span class="token punctuation">,</span> author<span class="token punctuation">,</span> date<span class="token punctuation">,</span> contents <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token constant">POST_MODEL_FIELDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>author <span class="token operator">=</span> author<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>date <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>contents <span class="token operator">=</span> contents<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/**
   * Convert model to JSON.
   *
   * @return {Object}
   */</span>
  <span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span>
      <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span>
      <span class="token literal-property property">author</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>author<span class="token punctuation">,</span>
      <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token literal-property property">contents</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>contents<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  PostModel<span class="token punctuation">,</span>
  <span class="token constant">POST_MODEL_FIELDS</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>Then, we can create a Service to import these blog posts:</p> <div class="language-bash extra-class"><pre class="language-bash"><code>$ nodewood add:service imports post
</code></pre></div><p>This creates a service at <code>app/features/imports/api/services/PostsService.js</code>, which we can add our importing code to:</p> <div class="language-javascript extra-class"><pre class="language-javascript"><code><span class="token keyword">const</span> bent <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'bent'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> Service <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'#api/Service'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> PostModel <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'#features/imports/lib/models/PostModel'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> getJSON <span class="token operator">=</span> <span class="token function">bent</span><span class="token punctuation">(</span><span class="token string">'json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">PostsService</span> <span class="token keyword">extends</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
  <span class="token comment">/**
   * The constructor.
   *
   * @param {MassiveJS} db - The database to use to create the post.
   * @param {Nodemailer} mailer - The mailer to use to send mail.
   */</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> db<span class="token punctuation">,</span> mailer <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">{</span> db<span class="token punctuation">,</span> mailer <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>model <span class="token operator">=</span> PostModel<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/**
   * Imports post from third-party service and returns them as models.
   *
   * @return {Array&lt;PostModel&gt;}
   */</span>
  <span class="token keyword">async</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> postsJson <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token string">'https://justsomeblog.com/posts'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> postsJson<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">PostModel</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  PostsService<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>(This code uses the <a href="https://www.npmjs.com/package/bent" target="_blank" rel="noopener noreferrer">Bent HTTP client<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>, which you'll need to add to your project by running <code>yarn add bent</code> from your <code>app</code> folder.)</p> <p>All we're doing in this service is returning the imported posts as PostModels.  Alternatively, you could save the imported models to your database or perform calculations on them or anything you choose!</p> <p>Finally, you can use this service in a Controller that potentially exposes these imported posts out to be used in your UI, or even another third-party service that uses your app!</p> <div class="language-javascript extra-class"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> PrivateController <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'#api/Controllers/PrivateController'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">ImportController</span> <span class="token keyword">extends</span> <span class="token class-name">PrivateController</span> <span class="token punctuation">{</span>
  <span class="token comment">/**
   * Constructor.
   *
   * @param {MassiveJS} db - The MassiveJS db connection.
   * @param {Mailer} mailer - The mailer.
   */</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> db<span class="token punctuation">,</span> mailer <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">{</span> db<span class="token punctuation">,</span> mailer <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/import/posts'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">import</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/**
   * @api {get} /import/posts Get a list of all imported posts
   * @apiGroup Import
   * @apiName List
   */</span>
  <span class="token keyword">async</span> <span class="token keyword">import</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">posts</span><span class="token operator">:</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>postsService<span class="token punctuation">.</span><span class="token function">import</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>Many third-party services will, of course, offer NPM packages you can use instead of making calls directly to their REST services, but this is a simplified example that can illustrate the general case, and can also be useful if you have other services of your own that you're looking to communicate with.</p></div> <footer class="page-edit"><!----> <!----></footer> <div class="page-nav"><p class="inner"><span class="prev">
      ←
      <a href="/docs/api/controllers/" class="prev">
        Controllers &amp; API Routing
      </a></span> <span class="next"><a href="/docs/api/database/">
        Database
      </a>
      →
    </span></p></div> </main></div><div class="global-ui"></div></div>
    <script src="/assets/js/app.2c5c8431.js" defer></script><script src="/assets/js/3.97560a66.js" defer></script><script src="/assets/js/23.144f5590.js" defer></script>
  </body>
</html>
